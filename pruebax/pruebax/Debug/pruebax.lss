
pruebax.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000915  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX = 0;											//REINICIAR ADMUX
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR);								//JUSTIFICACIÓN A LA IZQUIERDA
  96:	80 81       	ld	r24, Z
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//REFERENCIA AVCC
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);								//DESHABILITAR PIN DIGITAL 0
  a2:	ee e7       	ldi	r30, 0x7E	; 126
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
// 	DIDR0 |= (1<<ADC2D);								//DESHABILITAR PIN DIGITAL 2
// 	DIDR0 |= (1<<ADC3D);								//DESHABILITAR PIN DIGITAL 3
// 	DIDR0 |= (1<<ADC4D);								//DESHABILITAR PIN DIGITAL 4
// 	DIDR0 |= (1<<ADC5D);								//DESHABILITAR PIN DIGITAL 5
	
	ADCSRA = 0;											//REINICIAR ADCSRA
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	//ADCSRA |= (1<<ADIE);								//HABILITaR INTERRUPCIONES DE ADC
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//PRESCALER DE 128 ----> 125kHz
  b2:	80 81       	ld	r24, Z
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <ADC_CHANEL_SELECT>:
	//ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
}

uint8_t ADC_CHANEL_SELECT(uint8_t chanel){
	ADMUX = (ADMUX & 0xF0)|chanel;						//SEPARAR LOS VALORES DEL ADMUX DEL RESTO DEL REGISTRO
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//START CONVERSION
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	while ((ADCSRA)&(1<<ADSC));							//REPETIR HASTA QUE LA CONVERSION TERMINE
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	86 fd       	sbrc	r24, 6
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ADC_CHANEL_SELECT+0x1c>
	return ADCH;										//RETORNAR EL ADCH
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	08 95       	ret

000000e4 <I2C_Slave_Init>:
/*****************/
//Funcion para inicializar el esclavo
/*****************/

void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC4)); //PINES DE I2C COMO ENTRADAS
  e4:	97 b1       	in	r25, 0x07	; 7
  e6:	9f 7e       	andi	r25, 0xEF	; 239
  e8:	97 b9       	out	0x07, r25	; 7
	
	//TWAR = address << 1 & 0b11111110;// se asigna la direccion
	TWAR = (adress <<1| 0x01); //direccion y habilitar la llamada general
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//se habilita la interfaz ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  f6:	85 e4       	ldi	r24, 0x45	; 69
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	08 95       	ret

000000fe <__vector_24>:



/**********************COMUNICACION I2C*********************************/
// Rutina de interrupción del TWI (I2C)
ISR(TWI_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;  // Lee los 3 bits superiores del registro de estado
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 114:	88 7f       	andi	r24, 0xF8	; 248

	switch (estado) {
 116:	80 39       	cpi	r24, 0x90	; 144
 118:	d1 f0       	breq	.+52     	; 0x14e <__vector_24+0x50>
 11a:	40 f4       	brcc	.+16     	; 0x12c <__vector_24+0x2e>
 11c:	80 37       	cpi	r24, 0x70	; 112
 11e:	89 f0       	breq	.+34     	; 0x142 <__vector_24+0x44>
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	a9 f0       	breq	.+42     	; 0x14e <__vector_24+0x50>
 124:	80 36       	cpi	r24, 0x60	; 96
 126:	09 f0       	breq	.+2      	; 0x12a <__vector_24+0x2c>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <__vector_24+0xb0>
 12a:	0b c0       	rjmp	.+22     	; 0x142 <__vector_24+0x44>
 12c:	88 3b       	cpi	r24, 0xB8	; 184
 12e:	79 f1       	breq	.+94     	; 0x18e <__vector_24+0x90>
 130:	18 f4       	brcc	.+6      	; 0x138 <__vector_24+0x3a>
 132:	88 3a       	cpi	r24, 0xA8	; 168
 134:	61 f1       	breq	.+88     	; 0x18e <__vector_24+0x90>
 136:	3b c0       	rjmp	.+118    	; 0x1ae <__vector_24+0xb0>
 138:	80 3c       	cpi	r24, 0xC0	; 192
 13a:	99 f1       	breq	.+102    	; 0x1a2 <__vector_24+0xa4>
 13c:	88 3c       	cpi	r24, 0xC8	; 200
 13e:	89 f1       	breq	.+98     	; 0x1a2 <__vector_24+0xa4>
 140:	36 c0       	rjmp	.+108    	; 0x1ae <__vector_24+0xb0>
		case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24
		break;
 14c:	35 c0       	rjmp	.+106    	; 0x1b8 <__vector_24+0xba>

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR;  // Lee el dato recibido del registro de datos
 14e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (dato == 'n') {
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	8e 36       	cpi	r24, 0x6E	; 110
 15c:	91 f4       	brne	.+36     	; 0x182 <__vector_24+0x84>
			// Cambiar el estado de Abierto
			day = !day;  // Cambia entre 0 y 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <day>
 164:	91 11       	cpse	r25, r1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <day>
			if (day == 1) {
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	21 f4       	brne	.+8      	; 0x178 <__vector_24+0x7a>
				PORTD |= (1<<PORTD4);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 61       	ori	r24, 0x10	; 16
 174:	8b b9       	out	0x0b, r24	; 11
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_24+0x80>
				} else {
				PORTD &= ~(1<<PORTD4);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	8b b9       	out	0x0b, r24	; 11
			}
			// Limpiar la variable 'dato' para evitar cambios no deseados
			dato = 0;
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 182:	ec eb       	ldi	r30, 0xBC	; 188
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	80 83       	st	Z, r24
		break;
 18c:	15 c0       	rjmp	.+42     	; 0x1b8 <__vector_24+0xba>

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = day;  // Carga el valor en el registro de datos
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <day>
 192:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 196:	ec eb       	ldi	r30, 0xBC	; 188
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 6c       	ori	r24, 0xC0	; 192
 19e:	80 83       	st	Z, r24
		break;
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <__vector_24+0xba>

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 1a2:	ec eb       	ldi	r30, 0xBC	; 188
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 6c       	ori	r24, 0xC0	; 192
 1aa:	80 83       	st	Z, r24
		break;
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_24+0xba>

		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 69       	ori	r24, 0x90	; 144
 1b6:	80 83       	st	Z, r24
		break;
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:
int main(void)
{
	cli();
 1ca:	f8 94       	cli
	DDRB |= (1<<DDB5);		//COLOCAR LED DEL PB5 COMO SALIDA
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD4);		//COLOCAR LED COMO SALIDA
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8a b9       	out	0x0a, r24	; 10
	//BOTONES
	DDRB &= ~(1<<DDB4);												//PINES B4 Y B0 COMO ENTRADAS
 1d8:	84 b1       	in	r24, 0x04	; 4
 1da:	8f 7e       	andi	r24, 0xEF	; 239
 1dc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB4);											//PULLUPS
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	85 b9       	out	0x05, r24	; 5
	initADC();
 1e4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
//	initPCint0();
	I2C_Slave_Init(slave2);
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_Slave_Init>
	sei();
 1ee:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	80 e7       	ldi	r24, 0x70	; 112
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x2c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x36>
 200:	00 00       	nop
	
	while (1)
	{
		_delay_ms(50);
		valorADC = ADC_CHANEL_SELECT(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 5d 00 	call	0xba	; 0xba <ADC_CHANEL_SELECT>
 208:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valorADC>
		
		if (valorADC <= 90  && day == 1 ){
 20c:	8b 35       	cpi	r24, 0x5B	; 91
 20e:	50 f4       	brcc	.+20     	; 0x224 <main+0x5a>
 210:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <day>
 214:	91 30       	cpi	r25, 0x01	; 1
 216:	31 f4       	brne	.+12     	; 0x224 <main+0x5a>
			PORTD |= (1<<PORTD4);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	8b b9       	out	0x0b, r24	; 11
			day = 0;
 21e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <day>
 222:	e6 cf       	rjmp	.-52     	; 0x1f0 <main+0x26>
			//writeTextUART("Noche");
			}else if(valorADC > 90 && day == 0){
 224:	8b 35       	cpi	r24, 0x5B	; 91
 226:	20 f3       	brcs	.-56     	; 0x1f0 <main+0x26>
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <day>
 22c:	81 11       	cpse	r24, r1
 22e:	e0 cf       	rjmp	.-64     	; 0x1f0 <main+0x26>
			PORTD &= ~(1<<PORTD4);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	8b b9       	out	0x0b, r24	; 11
			//writeTextUART("Dia");
			day =1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <day>
 23c:	d9 cf       	rjmp	.-78     	; 0x1f0 <main+0x26>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
