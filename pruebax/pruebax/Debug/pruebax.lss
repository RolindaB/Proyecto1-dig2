
pruebax.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b1  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059d  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015c  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX = 0;											//REINICIAR ADMUX
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR);								//JUSTIFICACIÓN A LA IZQUIERDA
  96:	80 81       	ld	r24, Z
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//REFERENCIA AVCC
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);								//DESHABILITAR PIN DIGITAL 0
  a2:	ee e7       	ldi	r30, 0x7E	; 126
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
// 	DIDR0 |= (1<<ADC2D);								//DESHABILITAR PIN DIGITAL 2
// 	DIDR0 |= (1<<ADC3D);								//DESHABILITAR PIN DIGITAL 3
// 	DIDR0 |= (1<<ADC4D);								//DESHABILITAR PIN DIGITAL 4
// 	DIDR0 |= (1<<ADC5D);								//DESHABILITAR PIN DIGITAL 5
	
	ADCSRA = 0;											//REINICIAR ADCSRA
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	//ADCSRA |= (1<<ADIE);								//HABILITaR INTERRUPCIONES DE ADC
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//PRESCALER DE 128 ----> 125kHz
  b2:	80 81       	ld	r24, Z
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <ADC_CHANEL_SELECT>:
	//ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
}

uint8_t ADC_CHANEL_SELECT(uint8_t chanel){
	ADMUX = (ADMUX & 0xF0)|chanel;						//SEPARAR LOS VALORES DEL ADMUX DEL RESTO DEL REGISTRO
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								//START CONVERSION
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	while ((ADCSRA)&(1<<ADSC));							//REPETIR HASTA QUE LA CONVERSION TERMINE
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	86 fd       	sbrc	r24, 6
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ADC_CHANEL_SELECT+0x1c>
	return ADCH;										//RETORNAR EL ADCH
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	08 95       	ret

000000e4 <I2C_Slave_Init>:
/*****************/
//Funcion para inicializar el esclavo
/*****************/

void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC4)); //PINES DE I2C COMO ENTRADAS
  e4:	97 b1       	in	r25, 0x07	; 7
  e6:	9f 7e       	andi	r25, 0xEF	; 239
  e8:	97 b9       	out	0x07, r25	; 7
	
	//TWAR = address << 1 & 0b11111110;// se asigna la direccion
	TWAR = (adress <<1| 0x01); //direccion y habilitar la llamada general
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//se habilita la interfaz ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  f6:	85 e4       	ldi	r24, 0x45	; 69
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	08 95       	ret

000000fe <daySensor>:
	}
}

void daySensor(void) {
	//_delay_ms(50);
	valorADC = ADC_CHANEL_SELECT(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 5d 00 	call	0xba	; 0xba <ADC_CHANEL_SELECT>
 104:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valorADC>
	
	if (valorADC <= 70) {
 108:	87 34       	cpi	r24, 0x47	; 71
 10a:	30 f4       	brcc	.+12     	; 0x118 <daySensor+0x1a>
		PORTD |= (1 << PORTD4);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	8b b9       	out	0x0b, r24	; 11
		day = 0;
 112:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <day>
 116:	08 95       	ret
		} else if (valorADC > 70) {
 118:	87 34       	cpi	r24, 0x47	; 71
 11a:	30 f0       	brcs	.+12     	; 0x128 <daySensor+0x2a>
		PORTD &= ~(1 << PORTD4);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 7e       	andi	r24, 0xEF	; 239
 120:	8b b9       	out	0x0b, r24	; 11
		day = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <day>
 128:	08 95       	ret

0000012a <initPCint0>:
	}
}

void initPCint0(void) {
	PCMSK0 |= (1 << PCINT4); // INTERRUPCIONES EN EL BOTON PB4
 12a:	eb e6       	ldi	r30, 0x6B	; 107
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0); // HABILITANDO LA ISR PCINT[7:0]
 134:	e8 e6       	ldi	r30, 0x68	; 104
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <initTimer0>:
}

void initTimer0(void) {
	TCCR0A = 0; // Modo normal
 140:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler de 1024
 142:	85 b5       	in	r24, 0x25	; 37
 144:	85 60       	ori	r24, 0x05	; 5
 146:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); // Habilitar interrupción por desbordamiento
 148:	ee e6       	ldi	r30, 0x6E	; 110
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <main>:
void daySensor(void);
void initPCint0(void);
void initTimer0(void);

int main(void) {
	cli();
 154:	f8 94       	cli
	DDRB |= (1 << DDB5); // COLOCAR LED DEL PB5 COMO SALIDA
 156:	84 b1       	in	r24, 0x04	; 4
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD4) | (1 << DDD3); // COLOCAR LED COMO SALIDA
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	88 61       	ori	r24, 0x18	; 24
 160:	8a b9       	out	0x0a, r24	; 10
	// BOTONES
	DDRB &= ~(1 << DDB4); // PINES B4 COMO ENTRADA
 162:	84 b1       	in	r24, 0x04	; 4
 164:	8f 7e       	andi	r24, 0xEF	; 239
 166:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB4); // PULLUPS
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	85 b9       	out	0x05, r24	; 5
	initADC();
 16e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPCint0();
 172:	0e 94 95 00 	call	0x12a	; 0x12a <initPCint0>
	initTimer0();
 176:	0e 94 a0 00 	call	0x140	; 0x140 <initTimer0>
	I2C_Slave_Init(slave2);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_Slave_Init>
	sei();
 180:	78 94       	sei
	
	while (1) {
		if (dato == 'x') {
 182:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <dato>
 186:	88 37       	cpi	r24, 0x78	; 120
 188:	49 f4       	brne	.+18     	; 0x19c <main+0x48>
			estado = !estado;
 18a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <estado>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	91 11       	cpse	r25, r1
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estado>
			dato = 0;
 198:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <dato>
		}
		if (estado == 1 && dato == 'n') {
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	b9 f4       	brne	.+46     	; 0x1d2 <main+0x7e>
 1a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <dato>
 1a8:	8e 36       	cpi	r24, 0x6E	; 110
 1aa:	99 f4       	brne	.+38     	; 0x1d2 <main+0x7e>
			// Cambiar el estado de Abierto
			day = !day;  // Cambia entre 0 y 1
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <day>
 1b2:	91 11       	cpse	r25, r1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <day>
			if (day == 1) {
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <main+0x72>
				PORTD |= (1 << PORTD4);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 61       	ori	r24, 0x10	; 16
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <main+0x78>
				} else {
				PORTD &= ~(1 << PORTD4);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8f 7e       	andi	r24, 0xEF	; 239
 1ca:	8b b9       	out	0x0b, r24	; 11
			}
			// Limpiar la variable 'dato' para evitar cambios no deseados
			dato = 0;
 1cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <dato>
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <main+0x8a>
			} else if (estado == 0) {
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 1d6:	81 11       	cpse	r24, r1
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <main+0x8a>
			daySensor();
 1da:	0e 94 7f 00 	call	0xfe	; 0xfe <daySensor>
		}
		if (dato == 'p') {
 1de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <dato>
 1e2:	80 37       	cpi	r24, 0x70	; 112
 1e4:	91 f4       	brne	.+36     	; 0x20a <main+0xb6>
			adentro = !adentro;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <adentro>
 1ec:	91 11       	cpse	r25, r1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adentro>
			if (adentro == 1) {
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	21 f4       	brne	.+8      	; 0x200 <main+0xac>
				PORTD |= (1 << PORTD3);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <main+0xb6>
				} else if (adentro == 0) {
 200:	81 11       	cpse	r24, r1
 202:	03 c0       	rjmp	.+6      	; 0x20a <main+0xb6>
				PORTD &= ~(1 << PORTD3);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	8b b9       	out	0x0b, r24	; 11
			}
		}
		dato = 0;
 20a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <dato>
	}
 20e:	b9 cf       	rjmp	.-142    	; 0x182 <main+0x2e>

00000210 <__vector_3>:
	TCCR0A = 0; // Modo normal
	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler de 1024
	TIMSK0 |= (1 << TOIE0); // Habilitar interrupción por desbordamiento
}

ISR(PCINT0_vect) {
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
	if (debounce_flag == 0) {
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	81 11       	cpse	r24, r1
 222:	04 c0       	rjmp	.+8      	; 0x22c <__vector_3+0x1c>
		TCNT0 = 0; // Reinicia el contador
 224:	16 bc       	out	0x26, r1	; 38
		debounce_flag = 1; // Activa el flag de debounce
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	if (debounce_flag == 1) {
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	99 f4       	brne	.+38     	; 0x274 <__vector_16+0x3c>
		debounce_flag = 0; // Desactiva el flag de debounce
 24e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		if ((PINB & (1 << PINB4)) == 0) { // Si el botón sigue presionado
 252:	1c 99       	sbic	0x03, 4	; 3
 254:	0f c0       	rjmp	.+30     	; 0x274 <__vector_16+0x3c>
			adentro = !adentro;
 256:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <adentro>
 25a:	91 11       	cpse	r25, r1
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adentro>
			if (adentro == 1) {
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	21 f4       	brne	.+8      	; 0x26e <__vector_16+0x36>
				PORTD |= (1 << PORTD3);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	88 60       	ori	r24, 0x08	; 8
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	03 c0       	rjmp	.+6      	; 0x274 <__vector_16+0x3c>
				} else {
				PORTD &= ~(1 << PORTD3);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	8b b9       	out	0x0b, r24	; 11
			}
		}
	}
}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_24>:

/*******COMUNICACION I2C************/
// Rutina de interrupción del TWI (I2C)
ISR(TWI_vect) {
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;  // Lee los 3 bits superiores del registro de estado
 292:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 296:	88 7f       	andi	r24, 0xF8	; 248

	switch (estado) {
 298:	80 39       	cpi	r24, 0x90	; 144
 29a:	c9 f0       	breq	.+50     	; 0x2ce <__vector_24+0x4c>
 29c:	38 f4       	brcc	.+14     	; 0x2ac <__vector_24+0x2a>
 29e:	80 37       	cpi	r24, 0x70	; 112
 2a0:	81 f0       	breq	.+32     	; 0x2c2 <__vector_24+0x40>
 2a2:	80 38       	cpi	r24, 0x80	; 128
 2a4:	a1 f0       	breq	.+40     	; 0x2ce <__vector_24+0x4c>
 2a6:	80 36       	cpi	r24, 0x60	; 96
 2a8:	61 f5       	brne	.+88     	; 0x302 <__vector_24+0x80>
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <__vector_24+0x40>
 2ac:	88 3b       	cpi	r24, 0xB8	; 184
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <__vector_24+0x60>
 2b0:	18 f4       	brcc	.+6      	; 0x2b8 <__vector_24+0x36>
 2b2:	88 3a       	cpi	r24, 0xA8	; 168
 2b4:	b1 f0       	breq	.+44     	; 0x2e2 <__vector_24+0x60>
 2b6:	25 c0       	rjmp	.+74     	; 0x302 <__vector_24+0x80>
 2b8:	80 3c       	cpi	r24, 0xC0	; 192
 2ba:	e9 f0       	breq	.+58     	; 0x2f6 <__vector_24+0x74>
 2bc:	88 3c       	cpi	r24, 0xC8	; 200
 2be:	d9 f0       	breq	.+54     	; 0x2f6 <__vector_24+0x74>
 2c0:	20 c0       	rjmp	.+64     	; 0x302 <__vector_24+0x80>
		case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	80 83       	st	Z, r24
		break;
 2cc:	1f c0       	rjmp	.+62     	; 0x30c <__vector_24+0x8a>

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR;  // Lee el dato recibido del registro de datos
 2ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <dato>
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 2d6:	ec eb       	ldi	r30, 0xBC	; 188
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	80 83       	st	Z, r24
		break;
 2e0:	15 c0       	rjmp	.+42     	; 0x30c <__vector_24+0x8a>

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = day;  // Carga el valor en el registro de datos
 2e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <day>
 2e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 2ea:	ec eb       	ldi	r30, 0xBC	; 188
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 6c       	ori	r24, 0xC0	; 192
 2f2:	80 83       	st	Z, r24
		break;
 2f4:	0b c0       	rjmp	.+22     	; 0x30c <__vector_24+0x8a>

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 2f6:	ec eb       	ldi	r30, 0xBC	; 188
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 6c       	ori	r24, 0xC0	; 192
 2fe:	80 83       	st	Z, r24
		break;
 300:	05 c0       	rjmp	.+10     	; 0x30c <__vector_24+0x8a>

		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
 302:	ec eb       	ldi	r30, 0xBC	; 188
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 69       	ori	r24, 0x90	; 144
 30a:	80 83       	st	Z, r24
		break;
	}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
