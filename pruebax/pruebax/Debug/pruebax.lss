
pruebax.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093d  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000522  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011f  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX = 0;											//REINICIAR ADMUX
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR);								//JUSTIFICACIÓN A LA IZQUIERDA
  96:	80 81       	ld	r24, Z
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//REFERENCIA AVCC
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);								//DESHABILITAR PIN DIGITAL 0
  a2:	ee e7       	ldi	r30, 0x7E	; 126
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
// 	DIDR0 |= (1<<ADC2D);								//DESHABILITAR PIN DIGITAL 2
// 	DIDR0 |= (1<<ADC3D);								//DESHABILITAR PIN DIGITAL 3
// 	DIDR0 |= (1<<ADC4D);								//DESHABILITAR PIN DIGITAL 4
// 	DIDR0 |= (1<<ADC5D);								//DESHABILITAR PIN DIGITAL 5
	
	ADCSRA = 0;											//REINICIAR ADCSRA
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	//ADCSRA |= (1<<ADIE);								//HABILITaR INTERRUPCIONES DE ADC
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//PRESCALER DE 128 ----> 125kHz
  b2:	80 81       	ld	r24, Z
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <I2C_Slave_Init>:
/*****************/
//Funcion para inicializar el esclavo
/*****************/

void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC4)); //PINES DE I2C COMO ENTRADAS
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	9f 7e       	andi	r25, 0xEF	; 239
  be:	97 b9       	out	0x07, r25	; 7
	
	//TWAR = address << 1 & 0b11111110;// se asigna la direccion
	TWAR = (adress <<1| 0x01); //direccion y habilitar la llamada general
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//se habilita la interfaz ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  cc:	85 e4       	ldi	r24, 0x45	; 69
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d2:	08 95       	ret

000000d4 <__vector_24>:
		day = 0;
		//writeTextUART("Noche");
		}else if(valorADC > 90 ){
		PORTD &= ~(1<<PORTD4);
		//writeTextUART("Dia");
		day =1;
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	80 39       	cpi	r24, 0x90	; 144
  ec:	c9 f0       	breq	.+50     	; 0x120 <__vector_24+0x4c>
  ee:	38 f4       	brcc	.+14     	; 0xfe <__vector_24+0x2a>
  f0:	80 37       	cpi	r24, 0x70	; 112
  f2:	81 f0       	breq	.+32     	; 0x114 <__vector_24+0x40>
  f4:	80 38       	cpi	r24, 0x80	; 128
  f6:	a1 f0       	breq	.+40     	; 0x120 <__vector_24+0x4c>
  f8:	80 36       	cpi	r24, 0x60	; 96
  fa:	61 f5       	brne	.+88     	; 0x154 <__vector_24+0x80>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <__vector_24+0x40>
  fe:	88 3b       	cpi	r24, 0xB8	; 184
 100:	c9 f0       	breq	.+50     	; 0x134 <__vector_24+0x60>
 102:	18 f4       	brcc	.+6      	; 0x10a <__vector_24+0x36>
 104:	88 3a       	cpi	r24, 0xA8	; 168
 106:	b1 f0       	breq	.+44     	; 0x134 <__vector_24+0x60>
 108:	25 c0       	rjmp	.+74     	; 0x154 <__vector_24+0x80>
 10a:	80 3c       	cpi	r24, 0xC0	; 192
 10c:	e9 f0       	breq	.+58     	; 0x148 <__vector_24+0x74>
 10e:	88 3c       	cpi	r24, 0xC8	; 200
 110:	d9 f0       	breq	.+54     	; 0x148 <__vector_24+0x74>
 112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_24+0x80>
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
 11e:	1f c0       	rjmp	.+62     	; 0x15e <__vector_24+0x8a>
 120:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dato>
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
 132:	15 c0       	rjmp	.+42     	; 0x15e <__vector_24+0x8a>
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <day>
 138:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 6c       	ori	r24, 0xC0	; 192
 144:	80 83       	st	Z, r24
 146:	0b c0       	rjmp	.+22     	; 0x15e <__vector_24+0x8a>
 148:	ec eb       	ldi	r30, 0xBC	; 188
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 6c       	ori	r24, 0xC0	; 192
 150:	80 83       	st	Z, r24
 152:	05 c0       	rjmp	.+10     	; 0x15e <__vector_24+0x8a>
 154:	ec eb       	ldi	r30, 0xBC	; 188
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 69       	ori	r24, 0x90	; 144
 15c:	80 83       	st	Z, r24
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:
	}
	
}
int main(void)
{
	cli();
 16e:	f8 94       	cli
	DDRB |= (1<<DDB5);		//COLOCAR LED DEL PB5 COMO SALIDA
 170:	84 b1       	in	r24, 0x04	; 4
 172:	80 62       	ori	r24, 0x20	; 32
 174:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD4);		//COLOCAR LED COMO SALIDA
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	8a b9       	out	0x0a, r24	; 10
	//BOTONES
	DDRB &= ~(1<<DDB4);												//PINES B4 Y B0 COMO ENTRADAS
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB4);											//PULLUPS
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 61       	ori	r24, 0x10	; 16
 186:	85 b9       	out	0x05, r24	; 5
	initADC();
 188:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
//	initPCint0();
	I2C_Slave_Init(slave2);
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Slave_Init>
	sei();
 192:	78 94       	sei
	
	while (1)
	{
		if(dato = 'x'){
 194:	88 e7       	ldi	r24, 0x78	; 120
 196:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dato>
			estado = !estado;
 19a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	91 11       	cpse	r25, r1
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			dato = 0;
 1a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dato>
		}
		if (estado == 1 && dato == 'n') {
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <main+0x74>
 1b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dato>
 1b8:	8e 36       	cpi	r24, 0x6E	; 110
 1ba:	99 f4       	brne	.+38     	; 0x1e2 <main+0x74>
			// Cambiar el estado de Abierto
			day = !day;  // Cambia entre 0 y 1
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <day>
 1c2:	91 11       	cpse	r25, r1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <day>
			if (day == 1) {
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <main+0x68>
				PORTD |= (1<<PORTD4);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <main+0x6e>
				} else {
				PORTD &= ~(1<<PORTD4);
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	8b b9       	out	0x0b, r24	; 11
			}
			// Limpiar la variable 'dato' para evitar cambios no deseados
			dato = 0;
 1dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dato>
 1e0:	d9 cf       	rjmp	.-78     	; 0x194 <main+0x26>
		} else if(estado = 0){
 1e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	d6 cf       	rjmp	.-84     	; 0x194 <main+0x26>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
