
temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  000011ec  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  0080023e  0080023e  000013be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f31  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3f  00000000  00000000  0000353d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f0  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  0000526c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  0000572c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d3  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000071ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_3>
      10:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 33       	cpi	r26, 0x3E	; 62
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ae e3       	ldi	r26, 0x3E	; 62
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 36       	cpi	r26, 0x6F	; 111
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 34 05 	call	0xa68	; 0xa68 <main>
      9e:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	6b 01       	movw	r12, r22
      b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 7c       	andi	r24, 0xCF	; 207
      b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
      b8:	44 30       	cpi	r20, 0x04	; 4
      ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
      bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
      c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
      c4:	40 31       	cpi	r20, 0x10	; 16
      c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
      c8:	40 34       	cpi	r20, 0x40	; 64
      ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
      cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
      ce:	e9 eb       	ldi	r30, 0xB9	; 185
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8c 7f       	andi	r24, 0xFC	; 252
      d6:	80 83       	st	Z, r24
		break;
      d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
      e4:	80 81       	ld	r24, Z
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	80 83       	st	Z, r24
		break;
      ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
      ec:	e9 eb       	ldi	r30, 0xB9	; 185
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
		break;
      fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
      fe:	e9 eb       	ldi	r30, 0xB9	; 185
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	83 60       	ori	r24, 0x03	; 3
     106:	80 83       	st	Z, r24
		break;
     108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8c 7f       	andi	r24, 0xFC	; 252
     112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	74 e2       	ldi	r23, 0x24	; 36
     118:	84 ef       	ldi	r24, 0xF4	; 244
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	a7 01       	movw	r20, r14
     11e:	96 01       	movw	r18, r12
     120:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
     124:	ca 01       	movw	r24, r20
     126:	b9 01       	movw	r22, r18
     128:	60 51       	subi	r22, 0x10	; 16
     12a:	71 09       	sbc	r23, r1
     12c:	81 09       	sbc	r24, r1
     12e:	91 09       	sbc	r25, r1
     130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     134:	23 70       	andi	r18, 0x03	; 3
     136:	42 e0       	ldi	r20, 0x02	; 2
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	fa 01       	movw	r30, r20
     13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
     13e:	ee 0f       	add	r30, r30
     140:	ff 1f       	adc	r31, r31
     142:	2a 95       	dec	r18
     144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
     146:	9f 01       	movw	r18, r30
     148:	03 2e       	mov	r0, r19
     14a:	00 0c       	add	r0, r0
     14c:	44 0b       	sbc	r20, r20
     14e:	55 0b       	sbc	r21, r21
     150:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
     154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24
}
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	df 90       	pop	r13
     168:	cf 90       	pop	r12
     16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
     16c:	84 ea       	ldi	r24, 0xA4	; 164
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
     172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     176:	88 23       	and	r24, r24
     178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
     184:	80 31       	cpi	r24, 0x10	; 16
     186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	08 95       	ret
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
     190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
     192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
     194:	84 e9       	ldi	r24, 0x94	; 148
     196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
     19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19e:	84 fd       	sbrc	r24, 4
     1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
     1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
     1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
     1a8:	84 e8       	ldi	r24, 0x84	; 132
     1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
     1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b2:	88 23       	and	r24, r24
     1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
     1bc:	88 31       	cpi	r24, 0x18	; 24
     1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
     1c0:	88 32       	cpi	r24, 0x28	; 40
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
     1c4:	80 34       	cpi	r24, 0x40	; 64
     1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
     1d0:	80 e0       	ldi	r24, 0x00	; 0
}
     1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
     1d4:	dc 01       	movw	r26, r24
	if (ack) {
     1d6:	66 23       	and	r22, r22
     1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
     1da:	ec eb       	ldi	r30, 0xBC	; 188
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	90 81       	ld	r25, Z
     1e0:	90 64       	ori	r25, 0x40	; 64
     1e2:	90 83       	st	Z, r25
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
     1e6:	ec eb       	ldi	r30, 0xBC	; 188
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	9f 7b       	andi	r25, 0xBF	; 191
     1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	90 81       	ld	r25, Z
     1f6:	90 68       	ori	r25, 0x80	; 128
     1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
     1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1fe:	99 23       	and	r25, r25
     200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
     208:	98 35       	cpi	r25, 0x58	; 88
     20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
     20c:	90 35       	cpi	r25, 0x50	; 80
     20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
     210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
     21a:	89 2f       	mov	r24, r25
	}
}
     21c:	08 95       	ret

0000021e <read_from_slave>:

uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     21e:	94 ea       	ldi	r25, 0xA4	; 164
     220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     228:	99 23       	and	r25, r25
     22a:	e4 f7       	brge	.-8      	; 0x224 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     22c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     230:	98 7f       	andi	r25, 0xF8	; 248
     232:	98 30       	cpi	r25, 0x08	; 8
     234:	99 f5       	brne	.+102    	; 0x29c <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     242:	84 e8       	ldi	r24, 0x84	; 132
     244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     24c:	88 23       	and	r24, r24
     24e:	e4 f7       	brge	.-8      	; 0x248 <read_from_slave+0x2a>
     250:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
     252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	80 34       	cpi	r24, 0x40	; 64
     25a:	21 f0       	breq	.+8      	; 0x264 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
     25c:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
     264:	84 e8       	ldi	r24, 0x84	; 132
     266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     26a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     26e:	88 23       	and	r24, r24
     270:	e4 f7       	brge	.-8      	; 0x26a <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
     272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     276:	88 7f       	andi	r24, 0xF8	; 248
     278:	88 35       	cpi	r24, 0x58	; 88
     27a:	49 f0       	breq	.+18     	; 0x28e <read_from_slave+0x70>
     27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     280:	88 7f       	andi	r24, 0xF8	; 248
     282:	80 35       	cpi	r24, 0x50	; 80
     284:	21 f0       	breq	.+8      	; 0x28e <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
     286:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error en la recepción
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
     28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     292:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
     294:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
	return 0; // Éxito
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     29c:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
     29e:	08 95       	ret

000002a0 <send_to_slave>:

void send_to_slave(uint8_t slave_address, uint8_t data) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	d8 2f       	mov	r29, r24
     2a6:	c6 2f       	mov	r28, r22
	// Inicia la comunicación I2C
	I2C_Master_Start();
     2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>

	// Envía la dirección del esclavo con el bit de escritura
	I2C_Master_Write(slave_address << 1);
     2ac:	8d 2f       	mov	r24, r29
     2ae:	88 0f       	add	r24, r24
     2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Envía el dato
	I2C_Master_Write(data);
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     2ba:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
     2c4:	80 ff       	sbrs	r24, 0
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_port+0xc>
     2c8:	9b b1       	in	r25, 0x0b	; 11
     2ca:	94 60       	ori	r25, 0x04	; 4
     2cc:	9b b9       	out	0x0b, r25	; 11
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_port+0x12>
     2d0:	9b b1       	in	r25, 0x0b	; 11
     2d2:	9b 7f       	andi	r25, 0xFB	; 251
     2d4:	9b b9       	out	0x0b, r25	; 11
     2d6:	81 ff       	sbrs	r24, 1
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_port+0x1e>
     2da:	9b b1       	in	r25, 0x0b	; 11
     2dc:	98 60       	ori	r25, 0x08	; 8
     2de:	9b b9       	out	0x0b, r25	; 11
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_port+0x24>
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	97 7f       	andi	r25, 0xF7	; 247
     2e6:	9b b9       	out	0x0b, r25	; 11
     2e8:	82 ff       	sbrs	r24, 2
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCD_port+0x30>
     2ec:	9b b1       	in	r25, 0x0b	; 11
     2ee:	90 61       	ori	r25, 0x10	; 16
     2f0:	9b b9       	out	0x0b, r25	; 11
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_port+0x36>
     2f4:	9b b1       	in	r25, 0x0b	; 11
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	9b b9       	out	0x0b, r25	; 11
     2fa:	83 ff       	sbrs	r24, 3
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <LCD_port+0x42>
     2fe:	9b b1       	in	r25, 0x0b	; 11
     300:	90 62       	ori	r25, 0x20	; 32
     302:	9b b9       	out	0x0b, r25	; 11
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_port+0x48>
     306:	9b b1       	in	r25, 0x0b	; 11
     308:	9f 7d       	andi	r25, 0xDF	; 223
     30a:	9b b9       	out	0x0b, r25	; 11
     30c:	84 ff       	sbrs	r24, 4
     30e:	04 c0       	rjmp	.+8      	; 0x318 <LCD_port+0x54>
     310:	9b b1       	in	r25, 0x0b	; 11
     312:	90 64       	ori	r25, 0x40	; 64
     314:	9b b9       	out	0x0b, r25	; 11
     316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_port+0x5a>
     318:	9b b1       	in	r25, 0x0b	; 11
     31a:	9f 7b       	andi	r25, 0xBF	; 191
     31c:	9b b9       	out	0x0b, r25	; 11
     31e:	85 ff       	sbrs	r24, 5
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_port+0x66>
     322:	9b b1       	in	r25, 0x0b	; 11
     324:	90 68       	ori	r25, 0x80	; 128
     326:	9b b9       	out	0x0b, r25	; 11
     328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_port+0x6c>
     32a:	9b b1       	in	r25, 0x0b	; 11
     32c:	9f 77       	andi	r25, 0x7F	; 127
     32e:	9b b9       	out	0x0b, r25	; 11
     330:	86 ff       	sbrs	r24, 6
     332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_port+0x78>
     334:	95 b1       	in	r25, 0x05	; 5
     336:	91 60       	ori	r25, 0x01	; 1
     338:	95 b9       	out	0x05, r25	; 5
     33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_port+0x7e>
     33c:	95 b1       	in	r25, 0x05	; 5
     33e:	9e 7f       	andi	r25, 0xFE	; 254
     340:	95 b9       	out	0x05, r25	; 5
     342:	88 23       	and	r24, r24
     344:	24 f4       	brge	.+8      	; 0x34e <LCD_port+0x8a>
     346:	85 b1       	in	r24, 0x05	; 5
     348:	82 60       	ori	r24, 0x02	; 2
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	08 95       	ret
     34e:	85 b1       	in	r24, 0x05	; 5
     350:	8d 7f       	andi	r24, 0xFD	; 253
     352:	85 b9       	out	0x05, r24	; 5
     354:	08 95       	ret

00000356 <LCD_CMD>:
     356:	95 b1       	in	r25, 0x05	; 5
     358:	9b 7f       	andi	r25, 0xFB	; 251
     35a:	95 b9       	out	0x05, r25	; 5
     35c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     360:	85 b1       	in	r24, 0x05	; 5
     362:	88 60       	ori	r24, 0x08	; 8
     364:	85 b9       	out	0x05, r24	; 5
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_CMD+0x12>
     36c:	00 00       	nop
     36e:	85 b1       	in	r24, 0x05	; 5
     370:	87 7f       	andi	r24, 0xF7	; 247
     372:	85 b9       	out	0x05, r24	; 5
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	9f e1       	ldi	r25, 0x1F	; 31
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_CMD+0x22>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_CMD+0x28>
     37e:	00 00       	nop
     380:	08 95       	ret

00000382 <initLCD8bits>:
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	8c 6f       	ori	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
     388:	1b b8       	out	0x0b, r1	; 11
     38a:	84 b1       	in	r24, 0x04	; 4
     38c:	8f 60       	ori	r24, 0x0F	; 15
     38e:	84 b9       	out	0x04, r24	; 4
     390:	15 b8       	out	0x05, r1	; 5
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	89 ef       	ldi	r24, 0xF9	; 249
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <initLCD8bits+0x16>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <initLCD8bits+0x20>
     3a2:	00 00       	nop
     3a4:	88 e3       	ldi	r24, 0x38	; 56
     3a6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3aa:	8f e1       	ldi	r24, 0x1F	; 31
     3ac:	9e e4       	ldi	r25, 0x4E	; 78
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8bits+0x2c>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8bits+0x32>
     3b4:	00 00       	nop
     3b6:	88 e3       	ldi	r24, 0x38	; 56
     3b8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <initLCD8bits+0x3e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <initLCD8bits+0x44>
     3c6:	00 00       	nop
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ce:	8f e9       	ldi	r24, 0x9F	; 159
     3d0:	9f e0       	ldi	r25, 0x0F	; 15
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <initLCD8bits+0x50>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <initLCD8bits+0x56>
     3d8:	00 00       	nop
     3da:	88 e3       	ldi	r24, 0x38	; 56
     3dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	9f e1       	ldi	r25, 0x1F	; 31
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD8bits+0x6e>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <initLCD8bits+0x74>
     3f6:	00 00       	nop
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3fe:	08 95       	ret

00000400 <LCD_WriteCaracter>:
     400:	95 b1       	in	r25, 0x05	; 5
     402:	94 60       	ori	r25, 0x04	; 4
     404:	95 b9       	out	0x05, r25	; 5
     406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	85 b9       	out	0x05, r24	; 5
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	8a 95       	dec	r24
     414:	f1 f7       	brne	.-4      	; 0x412 <LCD_WriteCaracter+0x12>
     416:	00 00       	nop
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	87 7f       	andi	r24, 0xF7	; 247
     41c:	85 b9       	out	0x05, r24	; 5
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	9f e1       	ldi	r25, 0x1F	; 31
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <LCD_WriteCaracter+0x22>
     426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_WriteCaracter+0x28>
     428:	00 00       	nop
     42a:	08 95       	ret

0000042c <LCD_Write_String>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
     43c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteCaracter>
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	f8 01       	movw	r30, r16
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	80 81       	ld	r24, Z
     44a:	81 11       	cpse	r24, r1
     44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
     458:	cf 93       	push	r28
	char temp;
	if (f == 1) {
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	31 f4       	brne	.+12     	; 0x46a <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
     45e:	cf e7       	ldi	r28, 0x7F	; 127
     460:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     468:	07 c0       	rjmp	.+14     	; 0x478 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
     46a:	62 30       	cpi	r22, 0x02	; 2
     46c:	29 f4       	brne	.+10     	; 0x478 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
     46e:	cf eb       	ldi	r28, 0xBF	; 191
     470:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     472:	8c 2f       	mov	r24, r28
     474:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
	}
	LCD_CMD(temp);
     478:	8c 2f       	mov	r24, r28
     47a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
}
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <portonUltra>:
void portonUltra();



void portonUltra() {
	uint8_t result = read_from_slave(SLAVE1, &abierto);
     482:	6d e5       	ldi	r22, 0x5D	; 93
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
	int abierto2 = (int)(abierto);
     48c:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <abierto>
	if (result == 0) {
     490:	81 11       	cpse	r24, r1
     492:	16 c0       	rjmp	.+44     	; 0x4c0 <portonUltra+0x3e>
		if (abierto2 == 1) {
     494:	91 30       	cpi	r25, 0x01	; 1
     496:	51 f4       	brne	.+20     	; 0x4ac <portonUltra+0x2a>
			strcpy(buffer2, "open");
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	e0 e0       	ldi	r30, 0x00	; 0
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	ac e4       	ldi	r26, 0x4C	; 76
     4a0:	b2 e0       	ldi	r27, 0x02	; 2
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <portonUltra+0x20>
     4aa:	08 95       	ret
			} else {
			strcpy(buffer2, "close");
     4ac:	86 e0       	ldi	r24, 0x06	; 6
     4ae:	e5 e0       	ldi	r30, 0x05	; 5
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	ac e4       	ldi	r26, 0x4C	; 76
     4b4:	b2 e0       	ldi	r27, 0x02	; 2
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	8a 95       	dec	r24
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <portonUltra+0x34>
     4be:	08 95       	ret
		}
		} else {
		strcpy(buffer2, "error");
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	eb e0       	ldi	r30, 0x0B	; 11
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	ac e4       	ldi	r26, 0x4C	; 76
     4c8:	b2 e0       	ldi	r27, 0x02	; 2
     4ca:	01 90       	ld	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	8a 95       	dec	r24
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <portonUltra+0x48>
     4d2:	08 95       	ret

000004d4 <diax>:
	}
}

void diax(){
	uint8_t result = read_from_slave(SLAVE2, &day);
     4d4:	6e e5       	ldi	r22, 0x5E	; 94
     4d6:	73 e0       	ldi	r23, 0x03	; 3
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
	int day2 = (int)(day);
     4de:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <day>
	if (result == 0) {
     4e2:	81 11       	cpse	r24, r1
     4e4:	15 c0       	rjmp	.+42     	; 0x510 <diax+0x3c>
		if (day2 == 1) {
     4e6:	91 30       	cpi	r25, 0x01	; 1
     4e8:	41 f4       	brne	.+16     	; 0x4fa <diax+0x26>
			strcpy(buffer1, "on");
     4ea:	ef e5       	ldi	r30, 0x5F	; 95
     4ec:	f3 e0       	ldi	r31, 0x03	; 3
     4ee:	8f e6       	ldi	r24, 0x6F	; 111
     4f0:	9e e6       	ldi	r25, 0x6E	; 110
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	80 83       	st	Z, r24
     4f6:	12 82       	std	Z+2, r1	; 0x02
     4f8:	08 95       	ret
			} else {
			strcpy(buffer1, "off");
     4fa:	ef e5       	ldi	r30, 0x5F	; 95
     4fc:	f3 e0       	ldi	r31, 0x03	; 3
     4fe:	8f e6       	ldi	r24, 0x6F	; 111
     500:	96 e6       	ldi	r25, 0x66	; 102
     502:	91 83       	std	Z+1, r25	; 0x01
     504:	80 83       	st	Z, r24
     506:	86 e6       	ldi	r24, 0x66	; 102
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	93 83       	std	Z+3, r25	; 0x03
     50c:	82 83       	std	Z+2, r24	; 0x02
     50e:	08 95       	ret
		}
		} else {
		strcpy(buffer1, "error");
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	eb e0       	ldi	r30, 0x0B	; 11
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	af e5       	ldi	r26, 0x5F	; 95
     518:	b3 e0       	ldi	r27, 0x03	; 3
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	8a 95       	dec	r24
     520:	e1 f7       	brne	.-8      	; 0x51a <diax+0x46>
     522:	08 95       	ret

00000524 <read_temperature>:

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
     52e:	8b 01       	movw	r16, r22
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     530:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     534:	81 11       	cpse	r24, r1
     536:	22 c0       	rjmp	.+68     	; 0x57c <read_temperature+0x58>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     538:	80 e9       	ldi	r24, 0x90	; 144
     53a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     53e:	81 11       	cpse	r24, r1
     540:	1f c0       	rjmp	.+62     	; 0x580 <read_temperature+0x5c>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     542:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     546:	81 11       	cpse	r24, r1
     548:	1d c0       	rjmp	.+58     	; 0x584 <read_temperature+0x60>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     54a:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     54e:	81 11       	cpse	r24, r1
     550:	1b c0       	rjmp	.+54     	; 0x588 <read_temperature+0x64>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     552:	81 e9       	ldi	r24, 0x91	; 145
     554:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     558:	81 11       	cpse	r24, r1
     55a:	18 c0       	rjmp	.+48     	; 0x58c <read_temperature+0x68>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	ce 01       	movw	r24, r28
     560:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     564:	81 11       	cpse	r24, r1
     566:	14 c0       	rjmp	.+40     	; 0x590 <read_temperature+0x6c>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     570:	c8 2f       	mov	r28, r24
     572:	81 11       	cpse	r24, r1
     574:	0f c0       	rjmp	.+30     	; 0x594 <read_temperature+0x70>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     576:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

	return 0; // Éxito
     57a:	0d c0       	rjmp	.+26     	; 0x596 <read_temperature+0x72>
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     57c:	c1 e0       	ldi	r28, 0x01	; 1
     57e:	0b c0       	rjmp	.+22     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     580:	c1 e0       	ldi	r28, 0x01	; 1
     582:	09 c0       	rjmp	.+18     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     584:	c1 e0       	ldi	r28, 0x01	; 1
     586:	07 c0       	rjmp	.+14     	; 0x596 <read_temperature+0x72>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     588:	c1 e0       	ldi	r28, 0x01	; 1
     58a:	05 c0       	rjmp	.+10     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     58c:	c1 e0       	ldi	r28, 0x01	; 1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <read_temperature+0x72>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     590:	c1 e0       	ldi	r28, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <read_temperature+0x72>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     594:	c1 e0       	ldi	r28, 0x01	; 1

	// Detiene la comunicación I2C
	I2C_Master_Stop();

	return 0; // Éxito
}
     596:	8c 2f       	mov	r24, r28
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret

000005a2 <sensorTemp>:
		} else {
		strcpy(buffer1, "error");
	}
}
	
void sensorTemp() {
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <sensorTemp+0x6>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_high = 0;
     5ac:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp_low = 0;
     5ae:	1a 82       	std	Y+2, r1	; 0x02

	// Lee la temperatura del sensor LM75
	if (read_temperature(&temp_high, &temp_low) == 0) {
     5b0:	be 01       	movw	r22, r28
     5b2:	6e 5f       	subi	r22, 0xFE	; 254
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	0e 94 92 02 	call	0x524	; 0x524 <read_temperature>
     5be:	81 11       	cpse	r24, r1
     5c0:	3a c0       	rjmp	.+116    	; 0x636 <sensorTemp+0x94>
		// Convierte los datos del sensor a una cadena de texto
		temp_value = (temp_high << 8) | temp_low;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	98 2f       	mov	r25, r24
     5c8:	88 27       	eor	r24, r24
     5ca:	2a 81       	ldd	r18, Y+2	; 0x02
     5cc:	82 2b       	or	r24, r18
     5ce:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <temp_value+0x1>
     5d2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <temp_value>
		snprintf(buffer, sizeof(buffer), "Temperature: %d C \n\r", temp_value / 256);
     5d6:	9c 01       	movw	r18, r24
     5d8:	33 23       	and	r19, r19
     5da:	14 f4       	brge	.+4      	; 0x5e0 <sensorTemp+0x3e>
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	83 2f       	mov	r24, r19
     5e2:	88 0f       	add	r24, r24
     5e4:	88 0b       	sbc	r24, r24
     5e6:	8f 93       	push	r24
     5e8:	3f 93       	push	r19
     5ea:	81 e1       	ldi	r24, 0x11	; 17
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1f 92       	push	r1
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	8f 93       	push	r24
     5f8:	8d ed       	ldi	r24, 0xDD	; 221
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <snprintf>

		// Convierte la temperatura a grados Celsius
		int temp2 = (int)(temp_value / 256);
     604:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <temp_value>
     608:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <temp_value+0x1>

		// Corrige la comparación para verificar si la temperatura es mayor a 20
		if (temp2 > 20 ) {
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	81 15       	cp	r24, r1
     618:	95 41       	sbci	r25, 0x15	; 21
     61a:	3c f0       	brlt	.+14     	; 0x62a <sensorTemp+0x88>
			PORTC |= (1 << PORTC2); // Enciende el LED si la temperatura es mayor a 20
     61c:	88 b1       	in	r24, 0x08	; 8
     61e:	84 60       	ori	r24, 0x04	; 4
     620:	88 b9       	out	0x08, r24	; 8
			ventilador = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <ventilador>
     628:	0f c0       	rjmp	.+30     	; 0x648 <sensorTemp+0xa6>
			} else {
			PORTC &= ~(1 << PORTC2); // Apaga el LED si la temperatura es 20 o menor
     62a:	88 b1       	in	r24, 0x08	; 8
     62c:	8b 7f       	andi	r24, 0xFB	; 251
     62e:	88 b9       	out	0x08, r24	; 8
			ventilador =0;
     630:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <ventilador>
     634:	09 c0       	rjmp	.+18     	; 0x648 <sensorTemp+0xa6>
		}
		} else {
		// Si hubo un error en la lectura, formatea un mensaje de error
		snprintf(buffer, sizeof(buffer), "Error reading temperature");
     636:	8a e1       	ldi	r24, 0x1A	; 26
     638:	e6 e2       	ldi	r30, 0x26	; 38
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	ad ed       	ldi	r26, 0xDD	; 221
     63e:	b2 e0       	ldi	r27, 0x02	; 2
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <sensorTemp+0x9e>
	}

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <LCDcasa>:
	return 0; // Éxito
}

void LCDcasa() {
	// Muestra la temperatura
	snprintf(buffer, sizeof(buffer), "%d C", temp_value / 256);
     652:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <temp_value>
     656:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <temp_value+0x1>
     65a:	99 23       	and	r25, r25
     65c:	14 f4       	brge	.+4      	; 0x662 <LCDcasa+0x10>
     65e:	81 50       	subi	r24, 0x01	; 1
     660:	9f 4f       	sbci	r25, 0xFF	; 255
     662:	89 2f       	mov	r24, r25
     664:	88 0f       	add	r24, r24
     666:	88 0b       	sbc	r24, r24
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	80 e4       	ldi	r24, 0x40	; 64
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	1f 92       	push	r1
     676:	80 e8       	ldi	r24, 0x80	; 128
     678:	8f 93       	push	r24
     67a:	8d ed       	ldi	r24, 0xDD	; 221
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <snprintf>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("      "); // Limpia la línea
     68e:	8d e4       	ldi	r24, 0x4D	; 77
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer); // Muestra el valor
     69e:	8d ed       	ldi	r24, 0xDD	; 221
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 1); // Posiciona el cursor nuevamente
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("temp:"); // Muestra la etiqueta
     6ae:	85 e4       	ldi	r24, 0x45	; 69
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

	// Muestra el estado del portón
	LCD_Set_Cursor(7, 2); // Posiciona el cursor en la segunda línea del LCD
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	87 e0       	ldi	r24, 0x07	; 7
     6ba:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     6be:	8b e4       	ldi	r24, 0x4B	; 75
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 2); // Posiciona el cursor nuevamente
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	87 e0       	ldi	r24, 0x07	; 7
     6ca:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer2); // Muestra el estado del portón
     6ce:	8c e4       	ldi	r24, 0x4C	; 76
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 1); // Posiciona el cursor nuevamente
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Gate:"); // Muestra la etiqueta
     6de:	84 e5       	ldi	r24, 0x54	; 84
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
	// Muestra el estado del dia
	LCD_Set_Cursor(13, 2); // Posiciona el cursor en la segunda línea del LCD
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	8d e0       	ldi	r24, 0x0D	; 13
     6ea:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     6ee:	8b e4       	ldi	r24, 0x4B	; 75
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(13, 2); // Posiciona el cursor nuevamente
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	8d e0       	ldi	r24, 0x0D	; 13
     6fa:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer1); // Muestra el estado del portón
     6fe:	8f e5       	ldi	r24, 0x5F	; 95
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(13, 1); // Posiciona el cursor nuevamente
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	8d e0       	ldi	r24, 0x0D	; 13
     70a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Day:"); // Muestra la etiqueta
     70e:	8a e5       	ldi	r24, 0x5A	; 90
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
}
     716:	8d b7       	in	r24, 0x3d	; 61
     718:	9e b7       	in	r25, 0x3e	; 62
     71a:	08 96       	adiw	r24, 0x08	; 8
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	9e bf       	out	0x3e, r25	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	8d bf       	out	0x3d, r24	; 61
     726:	08 95       	ret

00000728 <uartCasa>:

void uartCasa() {
     728:	cf 93       	push	r28
	if (UART_available()) {
     72a:	0e 94 99 05 	call	0xb32	; 0xb32 <UART_available>
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <uartCasa+0xc>
     732:	5b c0       	rjmp	.+182    	; 0x7ea <uartCasa+0xc2>
		char comando = UART_receive();
     734:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_receive>
     738:	c8 2f       	mov	r28, r24
		UART_send(comando);
     73a:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_send>
		UART_send_string("\r\n");
     73e:	83 ea       	ldi	r24, 0xA3	; 163
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>

		if (estadoVent == 1 && comando == 'm') {
     746:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <estadoVent>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	a1 f4       	brne	.+40     	; 0x776 <uartCasa+0x4e>
     74e:	cd 36       	cpi	r28, 0x6D	; 109
     750:	91 f4       	brne	.+36     	; 0x776 <uartCasa+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	81 ee       	ldi	r24, 0xE1	; 225
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	21 50       	subi	r18, 0x01	; 1
     75a:	80 40       	sbci	r24, 0x00	; 0
     75c:	90 40       	sbci	r25, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <uartCasa+0x30>
     760:	00 c0       	rjmp	.+0      	; 0x762 <uartCasa+0x3a>
     762:	00 00       	nop
			_delay_ms(100);
			UART_send_string("\nCambiando el estado del portón...\r\n");
     764:	8f e5       	ldi	r24, 0x5F	; 95
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			send_to_slave(SLAVE1, 'm');
     76c:	6d e6       	ldi	r22, 0x6D	; 109
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     774:	3a c0       	rjmp	.+116    	; 0x7ea <uartCasa+0xc2>
		}
		else if (estadoVent == 1 && comando == 'n') {
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	59 f4       	brne	.+22     	; 0x790 <uartCasa+0x68>
     77a:	ce 36       	cpi	r28, 0x6E	; 110
     77c:	49 f4       	brne	.+18     	; 0x790 <uartCasa+0x68>
			UART_send_string("\nCambiando el estado del día...\r\n");
     77e:	84 e8       	ldi	r24, 0x84	; 132
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			send_to_slave(SLAVE2, 'n');
     786:	6e e6       	ldi	r22, 0x6E	; 110
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     78e:	2d c0       	rjmp	.+90     	; 0x7ea <uartCasa+0xc2>
		}
		else if (estadoVent == 1 && comando == 'o') {
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	b9 f4       	brne	.+46     	; 0x7c2 <uartCasa+0x9a>
     794:	cf 36       	cpi	r28, 0x6F	; 111
     796:	a9 f4       	brne	.+42     	; 0x7c2 <uartCasa+0x9a>
			UART_send_string("\nCambiando el estado del ventilador...\r\n");
     798:	86 ea       	ldi	r24, 0xA6	; 166
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			ventilador = !ventilador;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <ventilador>
     7a6:	91 11       	cpse	r25, r1
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <ventilador>
			if (ventilador) {
     7ae:	88 23       	and	r24, r24
     7b0:	21 f0       	breq	.+8      	; 0x7ba <uartCasa+0x92>
				PORTC |= (1 << PORTC2); // Enciende el LED si el ventilador está encendido
     7b2:	88 b1       	in	r24, 0x08	; 8
     7b4:	84 60       	ori	r24, 0x04	; 4
     7b6:	88 b9       	out	0x08, r24	; 8
     7b8:	18 c0       	rjmp	.+48     	; 0x7ea <uartCasa+0xc2>
				} else {
				PORTC &= ~(1 << PORTC2); // Apaga el LED si el ventilador está apagado
     7ba:	88 b1       	in	r24, 0x08	; 8
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	88 b9       	out	0x08, r24	; 8
     7c0:	14 c0       	rjmp	.+40     	; 0x7ea <uartCasa+0xc2>
			}
		}
		else if (comando == 'x') {
     7c2:	c8 37       	cpi	r28, 0x78	; 120
     7c4:	71 f4       	brne	.+28     	; 0x7e2 <uartCasa+0xba>
			// Cambia al estado automático (0), manual (1);
			estadoVent = !estadoVent;
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <estadoVent>
			send_to_slave(SLAVE1,'x');
     7d0:	68 e7       	ldi	r22, 0x78	; 120
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			send_to_slave(SLAVE2,'x');
     7d8:	68 e7       	ldi	r22, 0x78	; 120
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <uartCasa+0xc2>
			
		}
		else {
			UART_send_string("\nEl comando ingresado no se reconoce\n");
     7e2:	8f ec       	ldi	r24, 0xCF	; 207
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
		}
	}
	else {
		// UART_send_string("No data available.\r\n");
	}
}
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <setup>:

/*****************************************************************/
void setup(){
	// Configura PC2 como salida para el ventilador
	DDRC |= (1 << DDC2);
     7ee:	87 b1       	in	r24, 0x07	; 7
     7f0:	84 60       	ori	r24, 0x04	; 4
     7f2:	87 b9       	out	0x07, r24	; 7
	// Configurar PB5, PC0, PC1, PC3 como entradas
	DDRB &= ~(1 << DDB4);
     7f4:	84 b1       	in	r24, 0x04	; 4
     7f6:	8f 7e       	andi	r24, 0xEF	; 239
     7f8:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC3));
     7fa:	87 b1       	in	r24, 0x07	; 7
     7fc:	84 7f       	andi	r24, 0xF4	; 244
     7fe:	87 b9       	out	0x07, r24	; 7
	// Habilitar pull-ups internos para PB5, PC0, PC1, PC3
	PORTB |= (1 << PORTB4);
     800:	85 b1       	in	r24, 0x05	; 5
     802:	80 61       	ori	r24, 0x10	; 16
     804:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC3);
     806:	88 b1       	in	r24, 0x08	; 8
     808:	8b 60       	ori	r24, 0x0B	; 11
     80a:	88 b9       	out	0x08, r24	; 8
     80c:	08 95       	ret

0000080e <initPCint1>:
}
void initPCint1(void) {
	// Habilitar interrupciones en los botones PB5, PC0, PC1, y PC3
	
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT11); // Habilitar PCINT en PC0, PC1, y PC3
     80e:	ec e6       	ldi	r30, 0x6C	; 108
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	8b 60       	ori	r24, 0x0B	; 11
     816:	80 83       	st	Z, r24
	PCICR |=  (1 << PCIE1); // Habilitar las interrupciones de los pines de PCINT[7:0] y PCINT[14:8]
     818:	e8 e6       	ldi	r30, 0x68	; 104
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	80 83       	st	Z, r24
     822:	08 95       	ret

00000824 <initPCint0>:
}
void initPCint0(void){
	PCMSK0 |= (1 << PCINT4); // Habilitar PCINT en PB5
     824:	eb e6       	ldi	r30, 0x6B	; 107
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	80 61       	ori	r24, 0x10	; 16
     82c:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0) ;
     82e:	e8 e6       	ldi	r30, 0x68	; 104
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	81 60       	ori	r24, 0x01	; 1
     836:	80 83       	st	Z, r24
     838:	08 95       	ret

0000083a <timer1_init>:
volatile uint16_t debounce_counter_PC1 = 0;
volatile uint16_t debounce_counter_PC3 = 0;

void timer1_init() {
	// Configurar Timer1 en modo CTC (Clear Timer on Compare Match)
	TCCR1A = 0;            // Modo CTC (no PWM)
     83a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
     83e:	8a e0       	ldi	r24, 0x0A	; 10
     840:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 19999;         // Valor de comparación para generar una interrupción cada 10 ms
     844:	8f e1       	ldi	r24, 0x1F	; 31
     846:	9e e4       	ldi	r25, 0x4E	; 78
     848:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     84c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar la interrupción por comparación de Timer1
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); // Habilitar interrupciones globales
     856:	78 94       	sei
     858:	08 95       	ret

0000085a <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
	// Incrementa los contadores de antirrebote si es necesario
	if (debounce_counter_PB4 < 1000) {
     86a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <debounce_counter_PB4>
     86e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <debounce_counter_PB4+0x1>
     872:	88 3e       	cpi	r24, 0xE8	; 232
     874:	93 40       	sbci	r25, 0x03	; 3
     876:	48 f4       	brcc	.+18     	; 0x88a <__vector_11+0x30>
		debounce_counter_PB4++;
     878:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <debounce_counter_PB4>
     87c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <debounce_counter_PB4+0x1>
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <debounce_counter_PB4+0x1>
     886:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <debounce_counter_PB4>
	}
	if (debounce_counter_PC0 < 1000) {
     88a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <debounce_counter_PC0>
     88e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <debounce_counter_PC0+0x1>
     892:	88 3e       	cpi	r24, 0xE8	; 232
     894:	93 40       	sbci	r25, 0x03	; 3
     896:	48 f4       	brcc	.+18     	; 0x8aa <__vector_11+0x50>
		debounce_counter_PC0++;
     898:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <debounce_counter_PC0>
     89c:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <debounce_counter_PC0+0x1>
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <debounce_counter_PC0+0x1>
     8a6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <debounce_counter_PC0>
	}
	if (debounce_counter_PC1 < 1000) {
     8aa:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <debounce_counter_PC1>
     8ae:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <debounce_counter_PC1+0x1>
     8b2:	88 3e       	cpi	r24, 0xE8	; 232
     8b4:	93 40       	sbci	r25, 0x03	; 3
     8b6:	48 f4       	brcc	.+18     	; 0x8ca <__vector_11+0x70>
		debounce_counter_PC1++;
     8b8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <debounce_counter_PC1>
     8bc:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <debounce_counter_PC1+0x1>
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <debounce_counter_PC1+0x1>
     8c6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <debounce_counter_PC1>
	}
	if (debounce_counter_PC3 < 1000) {
     8ca:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     8ce:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
     8d2:	88 3e       	cpi	r24, 0xE8	; 232
     8d4:	93 40       	sbci	r25, 0x03	; 3
     8d6:	48 f4       	brcc	.+18     	; 0x8ea <__vector_11+0x90>
		debounce_counter_PC3++;
     8d8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     8dc:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
     8e6:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
	}
}
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_3>:

ISR(PCINT0_vect) {
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	// Verificar cuál pin causó la interrupción para PB4
	if (!(PINB & (1 << PINB4))) {
     91c:	1c 99       	sbic	0x03, 4	; 3
     91e:	1d c0       	rjmp	.+58     	; 0x95a <__stack+0x5b>
		if (debounce_counter_PB4 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     920:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <debounce_counter_PB4>
     924:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <debounce_counter_PB4+0x1>
     928:	c2 97       	sbiw	r24, 0x32	; 50
     92a:	b8 f0       	brcs	.+46     	; 0x95a <__stack+0x5b>
			debounce_counter_PB4 = 0; // Reinicia el contador
     92c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <debounce_counter_PB4+0x1>
     930:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <debounce_counter_PB4>
			UART_send_string("PB4 presionado.\r\n");
     934:	85 ef       	ldi	r24, 0xF5	; 245
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			estadoVent = !estadoVent;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <estadoVent>
     942:	91 11       	cpse	r25, r1
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <estadoVent>
			send_to_slave(SLAVE1, 'x');
     94a:	68 e7       	ldi	r22, 0x78	; 120
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			send_to_slave(SLAVE2, 'x');
     952:	68 e7       	ldi	r22, 0x78	; 120
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			//LCD_Write_String("cambiando estado");
		}
	}
}
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <__vector_4>:

ISR(PCINT1_vect) {
     97c:	1f 92       	push	r1
     97e:	0f 92       	push	r0
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	2f 93       	push	r18
     988:	3f 93       	push	r19
     98a:	4f 93       	push	r20
     98c:	5f 93       	push	r21
     98e:	6f 93       	push	r22
     990:	7f 93       	push	r23
     992:	8f 93       	push	r24
     994:	9f 93       	push	r25
     996:	af 93       	push	r26
     998:	bf 93       	push	r27
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
	// Verificar cuál pin causó la interrupción para PC0, PC1, y PC3
	if (!(PINC & (1 << PINC0))) {
     99e:	30 99       	sbic	0x06, 0	; 6
     9a0:	16 c0       	rjmp	.+44     	; 0x9ce <__vector_4+0x52>
		if (debounce_counter_PC0 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     9a2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <debounce_counter_PC0>
     9a6:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <debounce_counter_PC0+0x1>
     9aa:	c2 97       	sbiw	r24, 0x32	; 50
     9ac:	80 f0       	brcs	.+32     	; 0x9ce <__vector_4+0x52>
			debounce_counter_PC0 = 0; // Reinicia el contador
     9ae:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <debounce_counter_PC0+0x1>
     9b2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <debounce_counter_PC0>
			if (estadoVent == 1) {
     9b6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <estadoVent>
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	41 f4       	brne	.+16     	; 0x9ce <__vector_4+0x52>
				send_to_slave(SLAVE1, 'm');
     9be:	6d e6       	ldi	r22, 0x6D	; 109
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				//LCD_Write_String("cambiando estado");
				UART_send_string("PC0 presionado.\r\n");
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			}
		}
	}
	if (!(PINC & (1 << PINC1))) {
     9ce:	31 99       	sbic	0x06, 1	; 6
     9d0:	16 c0       	rjmp	.+44     	; 0x9fe <__vector_4+0x82>
		if (debounce_counter_PC1 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     9d2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <debounce_counter_PC1>
     9d6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <debounce_counter_PC1+0x1>
     9da:	c2 97       	sbiw	r24, 0x32	; 50
     9dc:	80 f0       	brcs	.+32     	; 0x9fe <__vector_4+0x82>
			debounce_counter_PC1 = 0; // Reinicia el contador
     9de:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <debounce_counter_PC1+0x1>
     9e2:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <debounce_counter_PC1>
			if (estadoVent == 1) {
     9e6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <estadoVent>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	41 f4       	brne	.+16     	; 0x9fe <__vector_4+0x82>
				send_to_slave(SLAVE2, 'n');
     9ee:	6e e6       	ldi	r22, 0x6E	; 110
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				//LCD_Write_String("cambiando estado");
				UART_send_string("PC1 presionado.\r\n");
     9f6:	89 e1       	ldi	r24, 0x19	; 25
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
			}
		}
	}
	if (!(PINC & (1 << PINC3))) {
     9fe:	33 99       	sbic	0x06, 3	; 6
     a00:	22 c0       	rjmp	.+68     	; 0xa46 <__vector_4+0xca>
		if (debounce_counter_PC3 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     a02:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     a06:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x1>
     a0a:	c2 97       	sbiw	r24, 0x32	; 50
     a0c:	e0 f0       	brcs	.+56     	; 0xa46 <__vector_4+0xca>
			debounce_counter_PC3 = 0; // Reinicia el contador
     a0e:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__data_end+0x1>
     a12:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
			ventilador = !ventilador;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <ventilador>
     a1c:	91 11       	cpse	r25, r1
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <ventilador>
			if (ventilador && estadoVent == 1) {
     a24:	88 23       	and	r24, r24
     a26:	41 f0       	breq	.+16     	; 0xa38 <__vector_4+0xbc>
     a28:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <estadoVent>
     a2c:	81 30       	cpi	r24, 0x01	; 1
     a2e:	21 f4       	brne	.+8      	; 0xa38 <__vector_4+0xbc>
				PORTC |= (1 << PORTC2); // Enciende el ventilador si está activado
     a30:	88 b1       	in	r24, 0x08	; 8
     a32:	84 60       	ori	r24, 0x04	; 4
     a34:	88 b9       	out	0x08, r24	; 8
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <__vector_4+0xc2>
				} else {
				PORTC &= ~(1 << PORTC2); // Apaga el ventilador si está desactivado
     a38:	88 b1       	in	r24, 0x08	; 8
     a3a:	8b 7f       	andi	r24, 0xFB	; 251
     a3c:	88 b9       	out	0x08, r24	; 8
			}
			UART_send_string("PC3 presionado.\r\n");
     a3e:	8b e2       	ldi	r24, 0x2B	; 43
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 8c 05 	call	0xb18	; 0xb18 <UART_send_string>
		}
	}
}
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	bf 91       	pop	r27
     a4c:	af 91       	pop	r26
     a4e:	9f 91       	pop	r25
     a50:	8f 91       	pop	r24
     a52:	7f 91       	pop	r23
     a54:	6f 91       	pop	r22
     a56:	5f 91       	pop	r21
     a58:	4f 91       	pop	r20
     a5a:	3f 91       	pop	r19
     a5c:	2f 91       	pop	r18
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	0f 90       	pop	r0
     a64:	1f 90       	pop	r1
     a66:	18 95       	reti

00000a68 <main>:


int main(void) {
	UART_init(9600);
     a68:	80 e8       	ldi	r24, 0x80	; 128
     a6a:	95 e2       	ldi	r25, 0x25	; 37
     a6c:	0e 94 5e 05 	call	0xabc	; 0xabc <UART_init>
	initLCD8bits();
     a70:	0e 94 c1 01 	call	0x382	; 0x382 <initLCD8bits>
	I2C_Master_Init(100000, 1);
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	60 ea       	ldi	r22, 0xA0	; 160
     a78:	76 e8       	ldi	r23, 0x86	; 134
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	setup();
     a82:	0e 94 f7 03 	call	0x7ee	; 0x7ee <setup>
	initPCint0();
     a86:	0e 94 12 04 	call	0x824	; 0x824 <initPCint0>
	initPCint1();
     a8a:	0e 94 07 04 	call	0x80e	; 0x80e <initPCint1>
	timer1_init();
     a8e:	0e 94 1d 04 	call	0x83a	; 0x83a <timer1_init>

	sei();
     a92:	78 94       	sei

	while (1) {
		uartCasa();
     a94:	0e 94 94 03 	call	0x728	; 0x728 <uartCasa>
		sensorTemp();
     a98:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <sensorTemp>
		portonUltra();
     a9c:	0e 94 41 02 	call	0x482	; 0x482 <portonUltra>
		diax();
     aa0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <diax>
		LCDcasa();
     aa4:	0e 94 29 03 	call	0x652	; 0x652 <LCDcasa>
     aa8:	2f ef       	ldi	r18, 0xFF	; 255
     aaa:	85 ea       	ldi	r24, 0xA5	; 165
     aac:	9e e0       	ldi	r25, 0x0E	; 14
     aae:	21 50       	subi	r18, 0x01	; 1
     ab0:	80 40       	sbci	r24, 0x00	; 0
     ab2:	90 40       	sbci	r25, 0x00	; 0
     ab4:	e1 f7       	brne	.-8      	; 0xaae <main+0x46>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <main+0x50>
     ab8:	00 00       	nop
     aba:	ec cf       	rjmp	.-40     	; 0xa94 <main+0x2c>

00000abc <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
     abc:	a0 e0       	ldi	r26, 0x00	; 0
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	aa 1f       	adc	r26, r26
     ace:	bb 1f       	adc	r27, r27
     ad0:	9c 01       	movw	r18, r24
     ad2:	ad 01       	movw	r20, r26
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	44 1f       	adc	r20, r20
     ada:	55 1f       	adc	r21, r21
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	44 1f       	adc	r20, r20
     ae2:	55 1f       	adc	r21, r21
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	74 e2       	ldi	r23, 0x24	; 36
     ae8:	84 ef       	ldi	r24, 0xF4	; 244
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodsi4>
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	31 09       	sbc	r19, r1
     af4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     af8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     afc:	88 e9       	ldi	r24, 0x98	; 152
     afe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b02:	86 e0       	ldi	r24, 0x06	; 6
     b04:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b08:	08 95       	ret

00000b0a <UART_send>:
     b0a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b0e:	95 ff       	sbrs	r25, 5
     b10:	fc cf       	rjmp	.-8      	; 0xb0a <UART_send>
     b12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b16:	08 95       	ret

00000b18 <UART_send_string>:
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <UART_send_string+0xe>
     b20:	21 96       	adiw	r28, 0x01	; 1
     b22:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_send>
     b26:	88 81       	ld	r24, Y
     b28:	81 11       	cpse	r24, r1
     b2a:	fa cf       	rjmp	.-12     	; 0xb20 <UART_send_string+0x8>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <UART_available>:
     b32:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <uart_head>
     b36:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <uart_tail>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	29 13       	cpse	r18, r25
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <UART_available+0x10>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	08 95       	ret

00000b46 <UART_receive>:
     b46:	0e 94 99 05 	call	0xb32	; 0xb32 <UART_available>
     b4a:	89 2b       	or	r24, r25
     b4c:	69 f0       	breq	.+26     	; 0xb68 <UART_receive+0x22>
     b4e:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <uart_tail>
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	e4 5a       	subi	r30, 0xA4	; 164
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
     b58:	80 81       	ld	r24, Z
     b5a:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <uart_tail>
     b5e:	9f 5f       	subi	r25, 0xFF	; 255
     b60:	9f 77       	andi	r25, 0x7F	; 127
     b62:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <uart_tail>
     b66:	08 95       	ret
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	08 95       	ret

00000b6c <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
	uint8_t next_head = (uart_head + 1) % sizeof(uart_buffer);
     b7e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <uart_head>
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	8f 77       	andi	r24, 0x7F	; 127

	if (next_head != uart_tail) { // Solo avanzar si el buffer no está lleno
     b86:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <uart_tail>
     b8a:	89 17       	cp	r24, r25
     b8c:	51 f0       	breq	.+20     	; 0xba2 <__vector_18+0x36>
		uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
     b8e:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <uart_head>
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b98:	e4 5a       	subi	r30, 0xA4	; 164
     b9a:	fd 4f       	sbci	r31, 0xFD	; 253
     b9c:	90 83       	st	Z, r25
		uart_head = next_head; // Actualizar el índice de la cabeza del buffer
     b9e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <uart_head>
	}
}
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__udivmodsi4>:
     bb4:	a1 e2       	ldi	r26, 0x21	; 33
     bb6:	1a 2e       	mov	r1, r26
     bb8:	aa 1b       	sub	r26, r26
     bba:	bb 1b       	sub	r27, r27
     bbc:	fd 01       	movw	r30, r26
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <__udivmodsi4_ep>

00000bc0 <__udivmodsi4_loop>:
     bc0:	aa 1f       	adc	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	ee 1f       	adc	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	a2 17       	cp	r26, r18
     bca:	b3 07       	cpc	r27, r19
     bcc:	e4 07       	cpc	r30, r20
     bce:	f5 07       	cpc	r31, r21
     bd0:	20 f0       	brcs	.+8      	; 0xbda <__udivmodsi4_ep>
     bd2:	a2 1b       	sub	r26, r18
     bd4:	b3 0b       	sbc	r27, r19
     bd6:	e4 0b       	sbc	r30, r20
     bd8:	f5 0b       	sbc	r31, r21

00000bda <__udivmodsi4_ep>:
     bda:	66 1f       	adc	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	88 1f       	adc	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	1a 94       	dec	r1
     be4:	69 f7       	brne	.-38     	; 0xbc0 <__udivmodsi4_loop>
     be6:	60 95       	com	r22
     be8:	70 95       	com	r23
     bea:	80 95       	com	r24
     bec:	90 95       	com	r25
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	bd 01       	movw	r22, r26
     bf4:	cf 01       	movw	r24, r30
     bf6:	08 95       	ret

00000bf8 <snprintf>:
     bf8:	ae e0       	ldi	r26, 0x0E	; 14
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e2 e0       	ldi	r30, 0x02	; 2
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__prologue_saves__+0x1c>
     c04:	0d 89       	ldd	r16, Y+21	; 0x15
     c06:	1e 89       	ldd	r17, Y+22	; 0x16
     c08:	8f 89       	ldd	r24, Y+23	; 0x17
     c0a:	98 8d       	ldd	r25, Y+24	; 0x18
     c0c:	26 e0       	ldi	r18, 0x06	; 6
     c0e:	2c 83       	std	Y+4, r18	; 0x04
     c10:	1a 83       	std	Y+2, r17	; 0x02
     c12:	09 83       	std	Y+1, r16	; 0x01
     c14:	97 ff       	sbrs	r25, 7
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <snprintf+0x24>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e8       	ldi	r25, 0x80	; 128
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	ae 01       	movw	r20, r28
     c24:	45 5e       	subi	r20, 0xE5	; 229
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	69 8d       	ldd	r22, Y+25	; 0x19
     c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	0e 94 2c 06 	call	0xc58	; 0xc58 <vfprintf>
     c34:	4d 81       	ldd	r20, Y+5	; 0x05
     c36:	5e 81       	ldd	r21, Y+6	; 0x06
     c38:	57 fd       	sbrc	r21, 7
     c3a:	0a c0       	rjmp	.+20     	; 0xc50 <snprintf+0x58>
     c3c:	2f 81       	ldd	r18, Y+7	; 0x07
     c3e:	38 85       	ldd	r19, Y+8	; 0x08
     c40:	42 17       	cp	r20, r18
     c42:	53 07       	cpc	r21, r19
     c44:	0c f4       	brge	.+2      	; 0xc48 <snprintf+0x50>
     c46:	9a 01       	movw	r18, r20
     c48:	f8 01       	movw	r30, r16
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	10 82       	st	Z, r1
     c50:	2e 96       	adiw	r28, 0x0e	; 14
     c52:	e4 e0       	ldi	r30, 0x04	; 4
     c54:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__epilogue_restores__+0x1c>

00000c58 <vfprintf>:
     c58:	ab e0       	ldi	r26, 0x0B	; 11
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e2 e3       	ldi	r30, 0x32	; 50
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__prologue_saves__>
     c64:	6c 01       	movw	r12, r24
     c66:	7b 01       	movw	r14, r22
     c68:	8a 01       	movw	r16, r20
     c6a:	fc 01       	movw	r30, r24
     c6c:	17 82       	std	Z+7, r1	; 0x07
     c6e:	16 82       	std	Z+6, r1	; 0x06
     c70:	83 81       	ldd	r24, Z+3	; 0x03
     c72:	81 ff       	sbrs	r24, 1
     c74:	cc c1       	rjmp	.+920    	; 0x100e <vfprintf+0x3b6>
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	3c 01       	movw	r6, r24
     c7c:	f6 01       	movw	r30, r12
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	f7 01       	movw	r30, r14
     c82:	93 fd       	sbrc	r25, 3
     c84:	85 91       	lpm	r24, Z+
     c86:	93 ff       	sbrs	r25, 3
     c88:	81 91       	ld	r24, Z+
     c8a:	7f 01       	movw	r14, r30
     c8c:	88 23       	and	r24, r24
     c8e:	09 f4       	brne	.+2      	; 0xc92 <vfprintf+0x3a>
     c90:	ba c1       	rjmp	.+884    	; 0x1006 <vfprintf+0x3ae>
     c92:	85 32       	cpi	r24, 0x25	; 37
     c94:	39 f4       	brne	.+14     	; 0xca4 <vfprintf+0x4c>
     c96:	93 fd       	sbrc	r25, 3
     c98:	85 91       	lpm	r24, Z+
     c9a:	93 ff       	sbrs	r25, 3
     c9c:	81 91       	ld	r24, Z+
     c9e:	7f 01       	movw	r14, r30
     ca0:	85 32       	cpi	r24, 0x25	; 37
     ca2:	29 f4       	brne	.+10     	; 0xcae <vfprintf+0x56>
     ca4:	b6 01       	movw	r22, r12
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     cac:	e7 cf       	rjmp	.-50     	; 0xc7c <vfprintf+0x24>
     cae:	91 2c       	mov	r9, r1
     cb0:	21 2c       	mov	r2, r1
     cb2:	31 2c       	mov	r3, r1
     cb4:	ff e1       	ldi	r31, 0x1F	; 31
     cb6:	f3 15       	cp	r31, r3
     cb8:	d8 f0       	brcs	.+54     	; 0xcf0 <vfprintf+0x98>
     cba:	8b 32       	cpi	r24, 0x2B	; 43
     cbc:	79 f0       	breq	.+30     	; 0xcdc <vfprintf+0x84>
     cbe:	38 f4       	brcc	.+14     	; 0xcce <vfprintf+0x76>
     cc0:	80 32       	cpi	r24, 0x20	; 32
     cc2:	79 f0       	breq	.+30     	; 0xce2 <vfprintf+0x8a>
     cc4:	83 32       	cpi	r24, 0x23	; 35
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <vfprintf+0x98>
     cc8:	23 2d       	mov	r18, r3
     cca:	20 61       	ori	r18, 0x10	; 16
     ccc:	1d c0       	rjmp	.+58     	; 0xd08 <vfprintf+0xb0>
     cce:	8d 32       	cpi	r24, 0x2D	; 45
     cd0:	61 f0       	breq	.+24     	; 0xcea <vfprintf+0x92>
     cd2:	80 33       	cpi	r24, 0x30	; 48
     cd4:	69 f4       	brne	.+26     	; 0xcf0 <vfprintf+0x98>
     cd6:	23 2d       	mov	r18, r3
     cd8:	21 60       	ori	r18, 0x01	; 1
     cda:	16 c0       	rjmp	.+44     	; 0xd08 <vfprintf+0xb0>
     cdc:	83 2d       	mov	r24, r3
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	38 2e       	mov	r3, r24
     ce2:	e3 2d       	mov	r30, r3
     ce4:	e4 60       	ori	r30, 0x04	; 4
     ce6:	3e 2e       	mov	r3, r30
     ce8:	2a c0       	rjmp	.+84     	; 0xd3e <vfprintf+0xe6>
     cea:	f3 2d       	mov	r31, r3
     cec:	f8 60       	ori	r31, 0x08	; 8
     cee:	1d c0       	rjmp	.+58     	; 0xd2a <vfprintf+0xd2>
     cf0:	37 fc       	sbrc	r3, 7
     cf2:	2d c0       	rjmp	.+90     	; 0xd4e <vfprintf+0xf6>
     cf4:	20 ed       	ldi	r18, 0xD0	; 208
     cf6:	28 0f       	add	r18, r24
     cf8:	2a 30       	cpi	r18, 0x0A	; 10
     cfa:	40 f0       	brcs	.+16     	; 0xd0c <vfprintf+0xb4>
     cfc:	8e 32       	cpi	r24, 0x2E	; 46
     cfe:	b9 f4       	brne	.+46     	; 0xd2e <vfprintf+0xd6>
     d00:	36 fc       	sbrc	r3, 6
     d02:	81 c1       	rjmp	.+770    	; 0x1006 <vfprintf+0x3ae>
     d04:	23 2d       	mov	r18, r3
     d06:	20 64       	ori	r18, 0x40	; 64
     d08:	32 2e       	mov	r3, r18
     d0a:	19 c0       	rjmp	.+50     	; 0xd3e <vfprintf+0xe6>
     d0c:	36 fe       	sbrs	r3, 6
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0xc4>
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	98 9e       	mul	r9, r24
     d14:	20 0d       	add	r18, r0
     d16:	11 24       	eor	r1, r1
     d18:	92 2e       	mov	r9, r18
     d1a:	11 c0       	rjmp	.+34     	; 0xd3e <vfprintf+0xe6>
     d1c:	ea e0       	ldi	r30, 0x0A	; 10
     d1e:	2e 9e       	mul	r2, r30
     d20:	20 0d       	add	r18, r0
     d22:	11 24       	eor	r1, r1
     d24:	22 2e       	mov	r2, r18
     d26:	f3 2d       	mov	r31, r3
     d28:	f0 62       	ori	r31, 0x20	; 32
     d2a:	3f 2e       	mov	r3, r31
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <vfprintf+0xe6>
     d2e:	8c 36       	cpi	r24, 0x6C	; 108
     d30:	21 f4       	brne	.+8      	; 0xd3a <vfprintf+0xe2>
     d32:	83 2d       	mov	r24, r3
     d34:	80 68       	ori	r24, 0x80	; 128
     d36:	38 2e       	mov	r3, r24
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0xe6>
     d3a:	88 36       	cpi	r24, 0x68	; 104
     d3c:	41 f4       	brne	.+16     	; 0xd4e <vfprintf+0xf6>
     d3e:	f7 01       	movw	r30, r14
     d40:	93 fd       	sbrc	r25, 3
     d42:	85 91       	lpm	r24, Z+
     d44:	93 ff       	sbrs	r25, 3
     d46:	81 91       	ld	r24, Z+
     d48:	7f 01       	movw	r14, r30
     d4a:	81 11       	cpse	r24, r1
     d4c:	b3 cf       	rjmp	.-154    	; 0xcb4 <vfprintf+0x5c>
     d4e:	98 2f       	mov	r25, r24
     d50:	9f 7d       	andi	r25, 0xDF	; 223
     d52:	95 54       	subi	r25, 0x45	; 69
     d54:	93 30       	cpi	r25, 0x03	; 3
     d56:	28 f4       	brcc	.+10     	; 0xd62 <vfprintf+0x10a>
     d58:	0c 5f       	subi	r16, 0xFC	; 252
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	9f e3       	ldi	r25, 0x3F	; 63
     d5e:	99 83       	std	Y+1, r25	; 0x01
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <vfprintf+0x124>
     d62:	83 36       	cpi	r24, 0x63	; 99
     d64:	31 f0       	breq	.+12     	; 0xd72 <vfprintf+0x11a>
     d66:	83 37       	cpi	r24, 0x73	; 115
     d68:	71 f0       	breq	.+28     	; 0xd86 <vfprintf+0x12e>
     d6a:	83 35       	cpi	r24, 0x53	; 83
     d6c:	09 f0       	breq	.+2      	; 0xd70 <vfprintf+0x118>
     d6e:	59 c0       	rjmp	.+178    	; 0xe22 <vfprintf+0x1ca>
     d70:	21 c0       	rjmp	.+66     	; 0xdb4 <vfprintf+0x15c>
     d72:	f8 01       	movw	r30, r16
     d74:	80 81       	ld	r24, Z
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	0e 5f       	subi	r16, 0xFE	; 254
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	88 24       	eor	r8, r8
     d7e:	83 94       	inc	r8
     d80:	91 2c       	mov	r9, r1
     d82:	53 01       	movw	r10, r6
     d84:	13 c0       	rjmp	.+38     	; 0xdac <vfprintf+0x154>
     d86:	28 01       	movw	r4, r16
     d88:	f2 e0       	ldi	r31, 0x02	; 2
     d8a:	4f 0e       	add	r4, r31
     d8c:	51 1c       	adc	r5, r1
     d8e:	f8 01       	movw	r30, r16
     d90:	a0 80       	ld	r10, Z
     d92:	b1 80       	ldd	r11, Z+1	; 0x01
     d94:	36 fe       	sbrs	r3, 6
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <vfprintf+0x146>
     d98:	69 2d       	mov	r22, r9
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x14a>
     d9e:	6f ef       	ldi	r22, 0xFF	; 255
     da0:	7f ef       	ldi	r23, 0xFF	; 255
     da2:	c5 01       	movw	r24, r10
     da4:	0e 94 18 08 	call	0x1030	; 0x1030 <strnlen>
     da8:	4c 01       	movw	r8, r24
     daa:	82 01       	movw	r16, r4
     dac:	f3 2d       	mov	r31, r3
     dae:	ff 77       	andi	r31, 0x7F	; 127
     db0:	3f 2e       	mov	r3, r31
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <vfprintf+0x188>
     db4:	28 01       	movw	r4, r16
     db6:	22 e0       	ldi	r18, 0x02	; 2
     db8:	42 0e       	add	r4, r18
     dba:	51 1c       	adc	r5, r1
     dbc:	f8 01       	movw	r30, r16
     dbe:	a0 80       	ld	r10, Z
     dc0:	b1 80       	ldd	r11, Z+1	; 0x01
     dc2:	36 fe       	sbrs	r3, 6
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x174>
     dc6:	69 2d       	mov	r22, r9
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x178>
     dcc:	6f ef       	ldi	r22, 0xFF	; 255
     dce:	7f ef       	ldi	r23, 0xFF	; 255
     dd0:	c5 01       	movw	r24, r10
     dd2:	0e 94 0d 08 	call	0x101a	; 0x101a <strnlen_P>
     dd6:	4c 01       	movw	r8, r24
     dd8:	f3 2d       	mov	r31, r3
     dda:	f0 68       	ori	r31, 0x80	; 128
     ddc:	3f 2e       	mov	r3, r31
     dde:	82 01       	movw	r16, r4
     de0:	33 fc       	sbrc	r3, 3
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <vfprintf+0x1c2>
     de4:	82 2d       	mov	r24, r2
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	88 16       	cp	r8, r24
     dea:	99 06       	cpc	r9, r25
     dec:	b0 f4       	brcc	.+44     	; 0xe1a <vfprintf+0x1c2>
     dee:	b6 01       	movw	r22, r12
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     df8:	2a 94       	dec	r2
     dfa:	f4 cf       	rjmp	.-24     	; 0xde4 <vfprintf+0x18c>
     dfc:	f5 01       	movw	r30, r10
     dfe:	37 fc       	sbrc	r3, 7
     e00:	85 91       	lpm	r24, Z+
     e02:	37 fe       	sbrs	r3, 7
     e04:	81 91       	ld	r24, Z+
     e06:	5f 01       	movw	r10, r30
     e08:	b6 01       	movw	r22, r12
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     e10:	21 10       	cpse	r2, r1
     e12:	2a 94       	dec	r2
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	82 1a       	sub	r8, r18
     e18:	91 08       	sbc	r9, r1
     e1a:	81 14       	cp	r8, r1
     e1c:	91 04       	cpc	r9, r1
     e1e:	71 f7       	brne	.-36     	; 0xdfc <vfprintf+0x1a4>
     e20:	e8 c0       	rjmp	.+464    	; 0xff2 <vfprintf+0x39a>
     e22:	84 36       	cpi	r24, 0x64	; 100
     e24:	11 f0       	breq	.+4      	; 0xe2a <vfprintf+0x1d2>
     e26:	89 36       	cpi	r24, 0x69	; 105
     e28:	41 f5       	brne	.+80     	; 0xe7a <vfprintf+0x222>
     e2a:	f8 01       	movw	r30, r16
     e2c:	37 fe       	sbrs	r3, 7
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <vfprintf+0x1e6>
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	0c 5f       	subi	r16, 0xFC	; 252
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <vfprintf+0x1f6>
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	07 2e       	mov	r0, r23
     e44:	00 0c       	add	r0, r0
     e46:	88 0b       	sbc	r24, r24
     e48:	99 0b       	sbc	r25, r25
     e4a:	0e 5f       	subi	r16, 0xFE	; 254
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	f3 2d       	mov	r31, r3
     e50:	ff 76       	andi	r31, 0x6F	; 111
     e52:	3f 2e       	mov	r3, r31
     e54:	97 ff       	sbrs	r25, 7
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <vfprintf+0x212>
     e58:	90 95       	com	r25
     e5a:	80 95       	com	r24
     e5c:	70 95       	com	r23
     e5e:	61 95       	neg	r22
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8f 4f       	sbci	r24, 0xFF	; 255
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	f0 68       	ori	r31, 0x80	; 128
     e68:	3f 2e       	mov	r3, r31
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a3 01       	movw	r20, r6
     e70:	0e 94 5f 08 	call	0x10be	; 0x10be <__ultoa_invert>
     e74:	88 2e       	mov	r8, r24
     e76:	86 18       	sub	r8, r6
     e78:	45 c0       	rjmp	.+138    	; 0xf04 <vfprintf+0x2ac>
     e7a:	85 37       	cpi	r24, 0x75	; 117
     e7c:	31 f4       	brne	.+12     	; 0xe8a <vfprintf+0x232>
     e7e:	23 2d       	mov	r18, r3
     e80:	2f 7e       	andi	r18, 0xEF	; 239
     e82:	b2 2e       	mov	r11, r18
     e84:	2a e0       	ldi	r18, 0x0A	; 10
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	25 c0       	rjmp	.+74     	; 0xed4 <vfprintf+0x27c>
     e8a:	93 2d       	mov	r25, r3
     e8c:	99 7f       	andi	r25, 0xF9	; 249
     e8e:	b9 2e       	mov	r11, r25
     e90:	8f 36       	cpi	r24, 0x6F	; 111
     e92:	c1 f0       	breq	.+48     	; 0xec4 <vfprintf+0x26c>
     e94:	18 f4       	brcc	.+6      	; 0xe9c <vfprintf+0x244>
     e96:	88 35       	cpi	r24, 0x58	; 88
     e98:	79 f0       	breq	.+30     	; 0xeb8 <vfprintf+0x260>
     e9a:	b5 c0       	rjmp	.+362    	; 0x1006 <vfprintf+0x3ae>
     e9c:	80 37       	cpi	r24, 0x70	; 112
     e9e:	19 f0       	breq	.+6      	; 0xea6 <vfprintf+0x24e>
     ea0:	88 37       	cpi	r24, 0x78	; 120
     ea2:	21 f0       	breq	.+8      	; 0xeac <vfprintf+0x254>
     ea4:	b0 c0       	rjmp	.+352    	; 0x1006 <vfprintf+0x3ae>
     ea6:	e9 2f       	mov	r30, r25
     ea8:	e0 61       	ori	r30, 0x10	; 16
     eaa:	be 2e       	mov	r11, r30
     eac:	b4 fe       	sbrs	r11, 4
     eae:	0d c0       	rjmp	.+26     	; 0xeca <vfprintf+0x272>
     eb0:	fb 2d       	mov	r31, r11
     eb2:	f4 60       	ori	r31, 0x04	; 4
     eb4:	bf 2e       	mov	r11, r31
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x272>
     eb8:	34 fe       	sbrs	r3, 4
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <vfprintf+0x278>
     ebc:	29 2f       	mov	r18, r25
     ebe:	26 60       	ori	r18, 0x06	; 6
     ec0:	b2 2e       	mov	r11, r18
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0x278>
     ec4:	28 e0       	ldi	r18, 0x08	; 8
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <vfprintf+0x27c>
     eca:	20 e1       	ldi	r18, 0x10	; 16
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x27c>
     ed0:	20 e1       	ldi	r18, 0x10	; 16
     ed2:	32 e0       	ldi	r19, 0x02	; 2
     ed4:	f8 01       	movw	r30, r16
     ed6:	b7 fe       	sbrs	r11, 7
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <vfprintf+0x290>
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	0c 5f       	subi	r16, 0xFC	; 252
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0x29c>
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 5f       	subi	r16, 0xFE	; 254
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	a3 01       	movw	r20, r6
     ef6:	0e 94 5f 08 	call	0x10be	; 0x10be <__ultoa_invert>
     efa:	88 2e       	mov	r8, r24
     efc:	86 18       	sub	r8, r6
     efe:	fb 2d       	mov	r31, r11
     f00:	ff 77       	andi	r31, 0x7F	; 127
     f02:	3f 2e       	mov	r3, r31
     f04:	36 fe       	sbrs	r3, 6
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <vfprintf+0x2ca>
     f08:	23 2d       	mov	r18, r3
     f0a:	2e 7f       	andi	r18, 0xFE	; 254
     f0c:	a2 2e       	mov	r10, r18
     f0e:	89 14       	cp	r8, r9
     f10:	58 f4       	brcc	.+22     	; 0xf28 <vfprintf+0x2d0>
     f12:	34 fe       	sbrs	r3, 4
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <vfprintf+0x2d4>
     f16:	32 fc       	sbrc	r3, 2
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <vfprintf+0x2d4>
     f1a:	83 2d       	mov	r24, r3
     f1c:	8e 7e       	andi	r24, 0xEE	; 238
     f1e:	a8 2e       	mov	r10, r24
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <vfprintf+0x2d4>
     f22:	b8 2c       	mov	r11, r8
     f24:	a3 2c       	mov	r10, r3
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <vfprintf+0x2d6>
     f28:	b8 2c       	mov	r11, r8
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <vfprintf+0x2d6>
     f2c:	b9 2c       	mov	r11, r9
     f2e:	a4 fe       	sbrs	r10, 4
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <vfprintf+0x2f8>
     f32:	fe 01       	movw	r30, r28
     f34:	e8 0d       	add	r30, r8
     f36:	f1 1d       	adc	r31, r1
     f38:	80 81       	ld	r24, Z
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	21 f4       	brne	.+8      	; 0xf46 <vfprintf+0x2ee>
     f3e:	9a 2d       	mov	r25, r10
     f40:	99 7e       	andi	r25, 0xE9	; 233
     f42:	a9 2e       	mov	r10, r25
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <vfprintf+0x300>
     f46:	a2 fe       	sbrs	r10, 2
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <vfprintf+0x2fe>
     f4a:	b3 94       	inc	r11
     f4c:	b3 94       	inc	r11
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <vfprintf+0x300>
     f50:	8a 2d       	mov	r24, r10
     f52:	86 78       	andi	r24, 0x86	; 134
     f54:	09 f0       	breq	.+2      	; 0xf58 <vfprintf+0x300>
     f56:	b3 94       	inc	r11
     f58:	a3 fc       	sbrc	r10, 3
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <vfprintf+0x326>
     f5c:	a0 fe       	sbrs	r10, 0
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0x314>
     f60:	b2 14       	cp	r11, r2
     f62:	88 f4       	brcc	.+34     	; 0xf86 <vfprintf+0x32e>
     f64:	28 0c       	add	r2, r8
     f66:	92 2c       	mov	r9, r2
     f68:	9b 18       	sub	r9, r11
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <vfprintf+0x330>
     f6c:	b2 14       	cp	r11, r2
     f6e:	60 f4       	brcc	.+24     	; 0xf88 <vfprintf+0x330>
     f70:	b6 01       	movw	r22, r12
     f72:	80 e2       	ldi	r24, 0x20	; 32
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     f7a:	b3 94       	inc	r11
     f7c:	f7 cf       	rjmp	.-18     	; 0xf6c <vfprintf+0x314>
     f7e:	b2 14       	cp	r11, r2
     f80:	18 f4       	brcc	.+6      	; 0xf88 <vfprintf+0x330>
     f82:	2b 18       	sub	r2, r11
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x332>
     f86:	98 2c       	mov	r9, r8
     f88:	21 2c       	mov	r2, r1
     f8a:	a4 fe       	sbrs	r10, 4
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <vfprintf+0x356>
     f8e:	b6 01       	movw	r22, r12
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     f98:	a2 fe       	sbrs	r10, 2
     f9a:	17 c0       	rjmp	.+46     	; 0xfca <vfprintf+0x372>
     f9c:	a1 fc       	sbrc	r10, 1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <vfprintf+0x34e>
     fa0:	88 e7       	ldi	r24, 0x78	; 120
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x352>
     fa6:	88 e5       	ldi	r24, 0x58	; 88
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	b6 01       	movw	r22, r12
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <vfprintf+0x36e>
     fae:	8a 2d       	mov	r24, r10
     fb0:	86 78       	andi	r24, 0x86	; 134
     fb2:	59 f0       	breq	.+22     	; 0xfca <vfprintf+0x372>
     fb4:	a1 fe       	sbrs	r10, 1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <vfprintf+0x364>
     fb8:	8b e2       	ldi	r24, 0x2B	; 43
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <vfprintf+0x366>
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	a7 fc       	sbrc	r10, 7
     fc0:	8d e2       	ldi	r24, 0x2D	; 45
     fc2:	b6 01       	movw	r22, r12
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     fca:	89 14       	cp	r8, r9
     fcc:	38 f4       	brcc	.+14     	; 0xfdc <vfprintf+0x384>
     fce:	b6 01       	movw	r22, r12
     fd0:	80 e3       	ldi	r24, 0x30	; 48
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     fd8:	9a 94       	dec	r9
     fda:	f7 cf       	rjmp	.-18     	; 0xfca <vfprintf+0x372>
     fdc:	8a 94       	dec	r8
     fde:	f3 01       	movw	r30, r6
     fe0:	e8 0d       	add	r30, r8
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	b6 01       	movw	r22, r12
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
     fee:	81 10       	cpse	r8, r1
     ff0:	f5 cf       	rjmp	.-22     	; 0xfdc <vfprintf+0x384>
     ff2:	22 20       	and	r2, r2
     ff4:	09 f4       	brne	.+2      	; 0xff8 <vfprintf+0x3a0>
     ff6:	42 ce       	rjmp	.-892    	; 0xc7c <vfprintf+0x24>
     ff8:	b6 01       	movw	r22, r12
     ffa:	80 e2       	ldi	r24, 0x20	; 32
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 23 08 	call	0x1046	; 0x1046 <fputc>
    1002:	2a 94       	dec	r2
    1004:	f6 cf       	rjmp	.-20     	; 0xff2 <vfprintf+0x39a>
    1006:	f6 01       	movw	r30, r12
    1008:	86 81       	ldd	r24, Z+6	; 0x06
    100a:	97 81       	ldd	r25, Z+7	; 0x07
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <vfprintf+0x3ba>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	2b 96       	adiw	r28, 0x0b	; 11
    1014:	e2 e1       	ldi	r30, 0x12	; 18
    1016:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__epilogue_restores__>

0000101a <strnlen_P>:
    101a:	fc 01       	movw	r30, r24
    101c:	05 90       	lpm	r0, Z+
    101e:	61 50       	subi	r22, 0x01	; 1
    1020:	70 40       	sbci	r23, 0x00	; 0
    1022:	01 10       	cpse	r0, r1
    1024:	d8 f7       	brcc	.-10     	; 0x101c <strnlen_P+0x2>
    1026:	80 95       	com	r24
    1028:	90 95       	com	r25
    102a:	8e 0f       	add	r24, r30
    102c:	9f 1f       	adc	r25, r31
    102e:	08 95       	ret

00001030 <strnlen>:
    1030:	fc 01       	movw	r30, r24
    1032:	61 50       	subi	r22, 0x01	; 1
    1034:	70 40       	sbci	r23, 0x00	; 0
    1036:	01 90       	ld	r0, Z+
    1038:	01 10       	cpse	r0, r1
    103a:	d8 f7       	brcc	.-10     	; 0x1032 <strnlen+0x2>
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	08 95       	ret

00001046 <fputc>:
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	fb 01       	movw	r30, r22
    1050:	23 81       	ldd	r18, Z+3	; 0x03
    1052:	21 fd       	sbrc	r18, 1
    1054:	03 c0       	rjmp	.+6      	; 0x105c <fputc+0x16>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	2c c0       	rjmp	.+88     	; 0x10b4 <fputc+0x6e>
    105c:	22 ff       	sbrs	r18, 2
    105e:	16 c0       	rjmp	.+44     	; 0x108c <fputc+0x46>
    1060:	46 81       	ldd	r20, Z+6	; 0x06
    1062:	57 81       	ldd	r21, Z+7	; 0x07
    1064:	24 81       	ldd	r18, Z+4	; 0x04
    1066:	35 81       	ldd	r19, Z+5	; 0x05
    1068:	42 17       	cp	r20, r18
    106a:	53 07       	cpc	r21, r19
    106c:	44 f4       	brge	.+16     	; 0x107e <fputc+0x38>
    106e:	a0 81       	ld	r26, Z
    1070:	b1 81       	ldd	r27, Z+1	; 0x01
    1072:	9d 01       	movw	r18, r26
    1074:	2f 5f       	subi	r18, 0xFF	; 255
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	31 83       	std	Z+1, r19	; 0x01
    107a:	20 83       	st	Z, r18
    107c:	8c 93       	st	X, r24
    107e:	26 81       	ldd	r18, Z+6	; 0x06
    1080:	37 81       	ldd	r19, Z+7	; 0x07
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	37 83       	std	Z+7, r19	; 0x07
    1088:	26 83       	std	Z+6, r18	; 0x06
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <fputc+0x6e>
    108c:	8b 01       	movw	r16, r22
    108e:	ec 01       	movw	r28, r24
    1090:	fb 01       	movw	r30, r22
    1092:	00 84       	ldd	r0, Z+8	; 0x08
    1094:	f1 85       	ldd	r31, Z+9	; 0x09
    1096:	e0 2d       	mov	r30, r0
    1098:	09 95       	icall
    109a:	89 2b       	or	r24, r25
    109c:	e1 f6       	brne	.-72     	; 0x1056 <fputc+0x10>
    109e:	d8 01       	movw	r26, r16
    10a0:	16 96       	adiw	r26, 0x06	; 6
    10a2:	8d 91       	ld	r24, X+
    10a4:	9c 91       	ld	r25, X
    10a6:	17 97       	sbiw	r26, 0x07	; 7
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	17 96       	adiw	r26, 0x07	; 7
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	16 97       	sbiw	r26, 0x06	; 6
    10b2:	ce 01       	movw	r24, r28
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <__ultoa_invert>:
    10be:	fa 01       	movw	r30, r20
    10c0:	aa 27       	eor	r26, r26
    10c2:	28 30       	cpi	r18, 0x08	; 8
    10c4:	51 f1       	breq	.+84     	; 0x111a <__ultoa_invert+0x5c>
    10c6:	20 31       	cpi	r18, 0x10	; 16
    10c8:	81 f1       	breq	.+96     	; 0x112a <__ultoa_invert+0x6c>
    10ca:	e8 94       	clt
    10cc:	6f 93       	push	r22
    10ce:	6e 7f       	andi	r22, 0xFE	; 254
    10d0:	6e 5f       	subi	r22, 0xFE	; 254
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	af 4f       	sbci	r26, 0xFF	; 255
    10da:	b1 e0       	ldi	r27, 0x01	; 1
    10dc:	3e d0       	rcall	.+124    	; 0x115a <__ultoa_invert+0x9c>
    10de:	b4 e0       	ldi	r27, 0x04	; 4
    10e0:	3c d0       	rcall	.+120    	; 0x115a <__ultoa_invert+0x9c>
    10e2:	67 0f       	add	r22, r23
    10e4:	78 1f       	adc	r23, r24
    10e6:	89 1f       	adc	r24, r25
    10e8:	9a 1f       	adc	r25, r26
    10ea:	a1 1d       	adc	r26, r1
    10ec:	68 0f       	add	r22, r24
    10ee:	79 1f       	adc	r23, r25
    10f0:	8a 1f       	adc	r24, r26
    10f2:	91 1d       	adc	r25, r1
    10f4:	a1 1d       	adc	r26, r1
    10f6:	6a 0f       	add	r22, r26
    10f8:	71 1d       	adc	r23, r1
    10fa:	81 1d       	adc	r24, r1
    10fc:	91 1d       	adc	r25, r1
    10fe:	a1 1d       	adc	r26, r1
    1100:	20 d0       	rcall	.+64     	; 0x1142 <__ultoa_invert+0x84>
    1102:	09 f4       	brne	.+2      	; 0x1106 <__ultoa_invert+0x48>
    1104:	68 94       	set
    1106:	3f 91       	pop	r19
    1108:	2a e0       	ldi	r18, 0x0A	; 10
    110a:	26 9f       	mul	r18, r22
    110c:	11 24       	eor	r1, r1
    110e:	30 19       	sub	r19, r0
    1110:	30 5d       	subi	r19, 0xD0	; 208
    1112:	31 93       	st	Z+, r19
    1114:	de f6       	brtc	.-74     	; 0x10cc <__ultoa_invert+0xe>
    1116:	cf 01       	movw	r24, r30
    1118:	08 95       	ret
    111a:	46 2f       	mov	r20, r22
    111c:	47 70       	andi	r20, 0x07	; 7
    111e:	40 5d       	subi	r20, 0xD0	; 208
    1120:	41 93       	st	Z+, r20
    1122:	b3 e0       	ldi	r27, 0x03	; 3
    1124:	0f d0       	rcall	.+30     	; 0x1144 <__ultoa_invert+0x86>
    1126:	c9 f7       	brne	.-14     	; 0x111a <__ultoa_invert+0x5c>
    1128:	f6 cf       	rjmp	.-20     	; 0x1116 <__ultoa_invert+0x58>
    112a:	46 2f       	mov	r20, r22
    112c:	4f 70       	andi	r20, 0x0F	; 15
    112e:	40 5d       	subi	r20, 0xD0	; 208
    1130:	4a 33       	cpi	r20, 0x3A	; 58
    1132:	18 f0       	brcs	.+6      	; 0x113a <__ultoa_invert+0x7c>
    1134:	49 5d       	subi	r20, 0xD9	; 217
    1136:	31 fd       	sbrc	r19, 1
    1138:	40 52       	subi	r20, 0x20	; 32
    113a:	41 93       	st	Z+, r20
    113c:	02 d0       	rcall	.+4      	; 0x1142 <__ultoa_invert+0x84>
    113e:	a9 f7       	brne	.-22     	; 0x112a <__ultoa_invert+0x6c>
    1140:	ea cf       	rjmp	.-44     	; 0x1116 <__ultoa_invert+0x58>
    1142:	b4 e0       	ldi	r27, 0x04	; 4
    1144:	a6 95       	lsr	r26
    1146:	97 95       	ror	r25
    1148:	87 95       	ror	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	ba 95       	dec	r27
    1150:	c9 f7       	brne	.-14     	; 0x1144 <__ultoa_invert+0x86>
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 05       	cpc	r22, r1
    1156:	71 05       	cpc	r23, r1
    1158:	08 95       	ret
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	0a 2e       	mov	r0, r26
    1160:	06 94       	lsr	r0
    1162:	57 95       	ror	r21
    1164:	47 95       	ror	r20
    1166:	37 95       	ror	r19
    1168:	27 95       	ror	r18
    116a:	ba 95       	dec	r27
    116c:	c9 f7       	brne	.-14     	; 0x1160 <__ultoa_invert+0xa2>
    116e:	62 0f       	add	r22, r18
    1170:	73 1f       	adc	r23, r19
    1172:	84 1f       	adc	r24, r20
    1174:	95 1f       	adc	r25, r21
    1176:	a0 1d       	adc	r26, r0
    1178:	08 95       	ret

0000117a <__prologue_saves__>:
    117a:	2f 92       	push	r2
    117c:	3f 92       	push	r3
    117e:	4f 92       	push	r4
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	ca 1b       	sub	r28, r26
    11a4:	db 0b       	sbc	r29, r27
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	09 94       	ijmp

000011b2 <__epilogue_restores__>:
    11b2:	2a 88       	ldd	r2, Y+18	; 0x12
    11b4:	39 88       	ldd	r3, Y+17	; 0x11
    11b6:	48 88       	ldd	r4, Y+16	; 0x10
    11b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    11ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    11bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    11be:	8c 84       	ldd	r8, Y+12	; 0x0c
    11c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11c4:	b9 84       	ldd	r11, Y+9	; 0x09
    11c6:	c8 84       	ldd	r12, Y+8	; 0x08
    11c8:	df 80       	ldd	r13, Y+7	; 0x07
    11ca:	ee 80       	ldd	r14, Y+6	; 0x06
    11cc:	fd 80       	ldd	r15, Y+5	; 0x05
    11ce:	0c 81       	ldd	r16, Y+4	; 0x04
    11d0:	1b 81       	ldd	r17, Y+3	; 0x03
    11d2:	aa 81       	ldd	r26, Y+2	; 0x02
    11d4:	b9 81       	ldd	r27, Y+1	; 0x01
    11d6:	ce 0f       	add	r28, r30
    11d8:	d1 1d       	adc	r29, r1
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	ed 01       	movw	r28, r26
    11e6:	08 95       	ret

000011e8 <_exit>:
    11e8:	f8 94       	cli

000011ea <__stop_program>:
    11ea:	ff cf       	rjmp	.-2      	; 0x11ea <__stop_program>
