
temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00000ef6  00000f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  008001fc  008001fc  00001086  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1f  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bce  00000000  00000000  00002fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eea  00000000  00000000  00003b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00004a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f1  00000000  00000000  00004e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000112f  00000000  00000000  00005509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ac ef       	ldi	r26, 0xFC	; 252
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 03 	call	0x76e	; 0x76e <main>
  9e:	0c 94 79 07 	jmp	0xef2	; 0xef2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
		break;
  d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
		break;
  ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
		break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodsi4>
 124:	ca 01       	movw	r24, r20
 126:	b9 01       	movw	r22, r18
 128:	60 51       	subi	r22, 0x10	; 16
 12a:	71 09       	sbc	r23, r1
 12c:	81 09       	sbc	r24, r1
 12e:	91 09       	sbc	r25, r1
 130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	23 70       	andi	r18, 0x03	; 3
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	fa 01       	movw	r30, r20
 13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
 146:	9f 01       	movw	r18, r30
 148:	03 2e       	mov	r0, r19
 14a:	00 0c       	add	r0, r0
 14c:	44 0b       	sbc	r20, r20
 14e:	55 0b       	sbc	r21, r21
 150:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodsi4>
 154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
}
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
 16c:	84 ea       	ldi	r24, 0xA4	; 164
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
 190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
 192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
 19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19e:	84 fd       	sbrc	r24, 4
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
 1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
 1bc:	88 31       	cpi	r24, 0x18	; 24
 1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
 1c0:	88 32       	cpi	r24, 0x28	; 40
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	80 e0       	ldi	r24, 0x00	; 0
}
 1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
 1d4:	dc 01       	movw	r26, r24
	if (ack) {
 1d6:	66 23       	and	r22, r22
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	90 64       	ori	r25, 0x40	; 64
 1e2:	90 83       	st	Z, r25
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	9f 7b       	andi	r25, 0xBF	; 191
 1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	90 68       	ori	r25, 0x80	; 128
 1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
 1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fe:	99 23       	and	r25, r25
 200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
 208:	98 35       	cpi	r25, 0x58	; 88
 20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
 20c:	90 35       	cpi	r25, 0x50	; 80
 20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
 210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
 21a:	89 2f       	mov	r24, r25
	}
}
 21c:	08 95       	ret

0000021e <read_from_slave>:

uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 21e:	94 ea       	ldi	r25, 0xA4	; 164
 220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	99 23       	and	r25, r25
 22a:	e4 f7       	brge	.-8      	; 0x224 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 22c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 230:	98 7f       	andi	r25, 0xF8	; 248
 232:	98 30       	cpi	r25, 0x08	; 8
 234:	99 f5       	brne	.+102    	; 0x29c <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24c:	88 23       	and	r24, r24
 24e:	e4 f7       	brge	.-8      	; 0x248 <read_from_slave+0x2a>
 250:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
 252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 34       	cpi	r24, 0x40	; 64
 25a:	21 f0       	breq	.+8      	; 0x264 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
 25c:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 26a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26e:	88 23       	and	r24, r24
 270:	e4 f7       	brge	.-8      	; 0x26a <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	88 35       	cpi	r24, 0x58	; 88
 27a:	49 f0       	breq	.+18     	; 0x28e <read_from_slave+0x70>
 27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 280:	88 7f       	andi	r24, 0xF8	; 248
 282:	80 35       	cpi	r24, 0x50	; 80
 284:	21 f0       	breq	.+8      	; 0x28e <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
 286:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error en la recepción
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
 28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 292:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
 294:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
	return 0; // Éxito
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 29c:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
 29e:	08 95       	ret

000002a0 <send_to_slave>:

void send_to_slave(uint8_t slave_address, uint8_t data) {
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	d8 2f       	mov	r29, r24
 2a6:	c6 2f       	mov	r28, r22
	// Inicia la comunicación I2C
	I2C_Master_Start();
 2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>

	// Envía la dirección del esclavo con el bit de escritura
	I2C_Master_Write(slave_address << 1);
 2ac:	8d 2f       	mov	r24, r29
 2ae:	88 0f       	add	r24, r24
 2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Envía el dato
	I2C_Master_Write(data);
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
 2ba:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
 2c4:	80 ff       	sbrs	r24, 0
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_port+0xc>
 2c8:	9b b1       	in	r25, 0x0b	; 11
 2ca:	94 60       	ori	r25, 0x04	; 4
 2cc:	9b b9       	out	0x0b, r25	; 11
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_port+0x12>
 2d0:	9b b1       	in	r25, 0x0b	; 11
 2d2:	9b 7f       	andi	r25, 0xFB	; 251
 2d4:	9b b9       	out	0x0b, r25	; 11
 2d6:	81 ff       	sbrs	r24, 1
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_port+0x1e>
 2da:	9b b1       	in	r25, 0x0b	; 11
 2dc:	98 60       	ori	r25, 0x08	; 8
 2de:	9b b9       	out	0x0b, r25	; 11
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_port+0x24>
 2e2:	9b b1       	in	r25, 0x0b	; 11
 2e4:	97 7f       	andi	r25, 0xF7	; 247
 2e6:	9b b9       	out	0x0b, r25	; 11
 2e8:	82 ff       	sbrs	r24, 2
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCD_port+0x30>
 2ec:	9b b1       	in	r25, 0x0b	; 11
 2ee:	90 61       	ori	r25, 0x10	; 16
 2f0:	9b b9       	out	0x0b, r25	; 11
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_port+0x36>
 2f4:	9b b1       	in	r25, 0x0b	; 11
 2f6:	9f 7e       	andi	r25, 0xEF	; 239
 2f8:	9b b9       	out	0x0b, r25	; 11
 2fa:	83 ff       	sbrs	r24, 3
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <LCD_port+0x42>
 2fe:	9b b1       	in	r25, 0x0b	; 11
 300:	90 62       	ori	r25, 0x20	; 32
 302:	9b b9       	out	0x0b, r25	; 11
 304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_port+0x48>
 306:	9b b1       	in	r25, 0x0b	; 11
 308:	9f 7d       	andi	r25, 0xDF	; 223
 30a:	9b b9       	out	0x0b, r25	; 11
 30c:	84 ff       	sbrs	r24, 4
 30e:	04 c0       	rjmp	.+8      	; 0x318 <LCD_port+0x54>
 310:	9b b1       	in	r25, 0x0b	; 11
 312:	90 64       	ori	r25, 0x40	; 64
 314:	9b b9       	out	0x0b, r25	; 11
 316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_port+0x5a>
 318:	9b b1       	in	r25, 0x0b	; 11
 31a:	9f 7b       	andi	r25, 0xBF	; 191
 31c:	9b b9       	out	0x0b, r25	; 11
 31e:	85 ff       	sbrs	r24, 5
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_port+0x66>
 322:	9b b1       	in	r25, 0x0b	; 11
 324:	90 68       	ori	r25, 0x80	; 128
 326:	9b b9       	out	0x0b, r25	; 11
 328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_port+0x6c>
 32a:	9b b1       	in	r25, 0x0b	; 11
 32c:	9f 77       	andi	r25, 0x7F	; 127
 32e:	9b b9       	out	0x0b, r25	; 11
 330:	86 ff       	sbrs	r24, 6
 332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_port+0x78>
 334:	95 b1       	in	r25, 0x05	; 5
 336:	91 60       	ori	r25, 0x01	; 1
 338:	95 b9       	out	0x05, r25	; 5
 33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_port+0x7e>
 33c:	95 b1       	in	r25, 0x05	; 5
 33e:	9e 7f       	andi	r25, 0xFE	; 254
 340:	95 b9       	out	0x05, r25	; 5
 342:	88 23       	and	r24, r24
 344:	24 f4       	brge	.+8      	; 0x34e <LCD_port+0x8a>
 346:	85 b1       	in	r24, 0x05	; 5
 348:	82 60       	ori	r24, 0x02	; 2
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	08 95       	ret
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	85 b9       	out	0x05, r24	; 5
 354:	08 95       	ret

00000356 <LCD_CMD>:
 356:	95 b1       	in	r25, 0x05	; 5
 358:	9b 7f       	andi	r25, 0xFB	; 251
 35a:	95 b9       	out	0x05, r25	; 5
 35c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
 360:	85 b1       	in	r24, 0x05	; 5
 362:	88 60       	ori	r24, 0x08	; 8
 364:	85 b9       	out	0x05, r24	; 5
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_CMD+0x12>
 36c:	00 00       	nop
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	85 b9       	out	0x05, r24	; 5
 374:	8f e3       	ldi	r24, 0x3F	; 63
 376:	9f e1       	ldi	r25, 0x1F	; 31
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_CMD+0x22>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_CMD+0x28>
 37e:	00 00       	nop
 380:	08 95       	ret

00000382 <initLCD8bits>:
 382:	8a b1       	in	r24, 0x0a	; 10
 384:	8c 6f       	ori	r24, 0xFC	; 252
 386:	8a b9       	out	0x0a, r24	; 10
 388:	1b b8       	out	0x0b, r1	; 11
 38a:	84 b1       	in	r24, 0x04	; 4
 38c:	8f 60       	ori	r24, 0x0F	; 15
 38e:	84 b9       	out	0x04, r24	; 4
 390:	15 b8       	out	0x05, r1	; 5
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	89 ef       	ldi	r24, 0xF9	; 249
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <initLCD8bits+0x16>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <initLCD8bits+0x20>
 3a2:	00 00       	nop
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	9e e4       	ldi	r25, 0x4E	; 78
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8bits+0x2c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8bits+0x32>
 3b4:	00 00       	nop
 3b6:	88 e3       	ldi	r24, 0x38	; 56
 3b8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <initLCD8bits+0x3e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <initLCD8bits+0x44>
 3c6:	00 00       	nop
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <initLCD8bits+0x50>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <initLCD8bits+0x56>
 3d8:	00 00       	nop
 3da:	88 e3       	ldi	r24, 0x38	; 56
 3dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	9f e1       	ldi	r25, 0x1F	; 31
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD8bits+0x6e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <initLCD8bits+0x74>
 3f6:	00 00       	nop
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3fe:	08 95       	ret

00000400 <LCD_WriteCaracter>:
 400:	95 b1       	in	r25, 0x05	; 5
 402:	94 60       	ori	r25, 0x04	; 4
 404:	95 b9       	out	0x05, r25	; 5
 406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
 40a:	85 b1       	in	r24, 0x05	; 5
 40c:	88 60       	ori	r24, 0x08	; 8
 40e:	85 b9       	out	0x05, r24	; 5
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	8a 95       	dec	r24
 414:	f1 f7       	brne	.-4      	; 0x412 <LCD_WriteCaracter+0x12>
 416:	00 00       	nop
 418:	85 b1       	in	r24, 0x05	; 5
 41a:	87 7f       	andi	r24, 0xF7	; 247
 41c:	85 b9       	out	0x05, r24	; 5
 41e:	8f e3       	ldi	r24, 0x3F	; 63
 420:	9f e1       	ldi	r25, 0x1F	; 31
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <LCD_WriteCaracter+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_WriteCaracter+0x28>
 428:	00 00       	nop
 42a:	08 95       	ret

0000042c <LCD_Write_String>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	8c 01       	movw	r16, r24
 436:	c0 e0       	ldi	r28, 0x00	; 0
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
 43c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteCaracter>
 440:	21 96       	adiw	r28, 0x01	; 1
 442:	f8 01       	movw	r30, r16
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	80 81       	ld	r24, Z
 44a:	81 11       	cpse	r24, r1
 44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
 458:	cf 93       	push	r28
	char temp;
	if (f == 1) {
 45a:	61 30       	cpi	r22, 0x01	; 1
 45c:	31 f4       	brne	.+12     	; 0x46a <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
 45e:	cf e7       	ldi	r28, 0x7F	; 127
 460:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 468:	07 c0       	rjmp	.+14     	; 0x478 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
 46a:	62 30       	cpi	r22, 0x02	; 2
 46c:	29 f4       	brne	.+10     	; 0x478 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
 46e:	cf eb       	ldi	r28, 0xBF	; 191
 470:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 472:	8c 2f       	mov	r24, r28
 474:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
	}
	LCD_CMD(temp);
 478:	8c 2f       	mov	r24, r28
 47a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
}
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <portonUltra>:
			strcpy(buffer1, "Día");
			} else {
			strcpy(buffer1, "noche");
		}
		} else {
		strcpy(buffer1, "error");
 482:	62 e1       	ldi	r22, 0x12	; 18
 484:	73 e0       	ldi	r23, 0x03	; 3
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
 48c:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <abierto>
 490:	81 11       	cpse	r24, r1
 492:	16 c0       	rjmp	.+44     	; 0x4c0 <portonUltra+0x3e>
 494:	91 30       	cpi	r25, 0x01	; 1
 496:	51 f4       	brne	.+20     	; 0x4ac <portonUltra+0x2a>
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	e0 e0       	ldi	r30, 0x00	; 0
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	a4 e1       	ldi	r26, 0x14	; 20
 4a0:	b3 e0       	ldi	r27, 0x03	; 3
 4a2:	01 90       	ld	r0, Z+
 4a4:	0d 92       	st	X+, r0
 4a6:	8a 95       	dec	r24
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <portonUltra+0x20>
 4aa:	08 95       	ret
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	e5 e0       	ldi	r30, 0x05	; 5
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	a4 e1       	ldi	r26, 0x14	; 20
 4b4:	b3 e0       	ldi	r27, 0x03	; 3
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <portonUltra+0x34>
 4be:	08 95       	ret
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	eb e0       	ldi	r30, 0x0B	; 11
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	a4 e1       	ldi	r26, 0x14	; 20
 4c8:	b3 e0       	ldi	r27, 0x03	; 3
 4ca:	01 90       	ld	r0, Z+
 4cc:	0d 92       	st	X+, r0
 4ce:	8a 95       	dec	r24
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <portonUltra+0x48>
 4d2:	08 95       	ret

000004d4 <read_temperature>:

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	ec 01       	movw	r28, r24
 4de:	8b 01       	movw	r16, r22
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
 4e0:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
 4e4:	81 11       	cpse	r24, r1
 4e6:	22 c0       	rjmp	.+68     	; 0x52c <read_temperature+0x58>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
 4e8:	80 e9       	ldi	r24, 0x90	; 144
 4ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 4ee:	81 11       	cpse	r24, r1
 4f0:	1f c0       	rjmp	.+62     	; 0x530 <read_temperature+0x5c>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
 4f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 4f6:	81 11       	cpse	r24, r1
 4f8:	1d c0       	rjmp	.+58     	; 0x534 <read_temperature+0x60>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
 4fa:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
 4fe:	81 11       	cpse	r24, r1
 500:	1b c0       	rjmp	.+54     	; 0x538 <read_temperature+0x64>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
 502:	81 e9       	ldi	r24, 0x91	; 145
 504:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 508:	81 11       	cpse	r24, r1
 50a:	18 c0       	rjmp	.+48     	; 0x53c <read_temperature+0x68>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	ce 01       	movw	r24, r28
 510:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
 514:	81 11       	cpse	r24, r1
 516:	14 c0       	rjmp	.+40     	; 0x540 <read_temperature+0x6c>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	c8 01       	movw	r24, r16
 51c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
 520:	c8 2f       	mov	r28, r24
 522:	81 11       	cpse	r24, r1
 524:	0f c0       	rjmp	.+30     	; 0x544 <read_temperature+0x70>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
 526:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

	return 0; // Éxito
 52a:	0d c0       	rjmp	.+26     	; 0x546 <read_temperature+0x72>
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
 52c:	c1 e0       	ldi	r28, 0x01	; 1
 52e:	0b c0       	rjmp	.+22     	; 0x546 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
 530:	c1 e0       	ldi	r28, 0x01	; 1
 532:	09 c0       	rjmp	.+18     	; 0x546 <read_temperature+0x72>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
 534:	c1 e0       	ldi	r28, 0x01	; 1
 536:	07 c0       	rjmp	.+14     	; 0x546 <read_temperature+0x72>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
 538:	c1 e0       	ldi	r28, 0x01	; 1
 53a:	05 c0       	rjmp	.+10     	; 0x546 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
 53c:	c1 e0       	ldi	r28, 0x01	; 1
 53e:	03 c0       	rjmp	.+6      	; 0x546 <read_temperature+0x72>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
 540:	c1 e0       	ldi	r28, 0x01	; 1
 542:	01 c0       	rjmp	.+2      	; 0x546 <read_temperature+0x72>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
 544:	c1 e0       	ldi	r28, 0x01	; 1

	// Detiene la comunicación I2C
	I2C_Master_Stop();

	return 0; // Éxito
}
 546:	8c 2f       	mov	r24, r28
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <sensorTemp>:
		} else {
		strcpy(buffer1, "error");
	}
}
	
void sensorTemp() {
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	00 d0       	rcall	.+0      	; 0x558 <sensorTemp+0x6>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_high = 0;
 55c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp_low = 0;
 55e:	1a 82       	std	Y+2, r1	; 0x02

	// Lee la temperatura del sensor LM75
	if (read_temperature(&temp_high, &temp_low) == 0) {
 560:	be 01       	movw	r22, r28
 562:	6e 5f       	subi	r22, 0xFE	; 254
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_temperature>
 56e:	81 11       	cpse	r24, r1
 570:	3a c0       	rjmp	.+116    	; 0x5e6 <sensorTemp+0x94>
		// Convierte los datos del sensor a una cadena de texto
		temp_value = (temp_high << 8) | temp_low;
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	98 2f       	mov	r25, r24
 578:	88 27       	eor	r24, r24
 57a:	2a 81       	ldd	r18, Y+2	; 0x02
 57c:	82 2b       	or	r24, r18
 57e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <temp_value+0x1>
 582:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <temp_value>
		snprintf(buffer, sizeof(buffer), "Temperature: %d C \n\r", temp_value / 256);
 586:	9c 01       	movw	r18, r24
 588:	33 23       	and	r19, r19
 58a:	14 f4       	brge	.+4      	; 0x590 <sensorTemp+0x3e>
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	83 2f       	mov	r24, r19
 592:	88 0f       	add	r24, r24
 594:	88 0b       	sbc	r24, r24
 596:	8f 93       	push	r24
 598:	3f 93       	push	r19
 59a:	87 e1       	ldi	r24, 0x17	; 23
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	9f 93       	push	r25
 5a0:	8f 93       	push	r24
 5a2:	1f 92       	push	r1
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	8f 93       	push	r24
 5a8:	82 e9       	ldi	r24, 0x92	; 146
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	9f 93       	push	r25
 5ae:	8f 93       	push	r24
 5b0:	0e 94 81 04 	call	0x902	; 0x902 <snprintf>

		// Convierte la temperatura a grados Celsius
		int temp2 = (int)(temp_value / 256);
 5b4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <temp_value>
 5b8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <temp_value+0x1>

		// Corrige la comparación para verificar si la temperatura es mayor a 20
		if (temp2 > 20 ) {
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	81 15       	cp	r24, r1
 5c8:	95 41       	sbci	r25, 0x15	; 21
 5ca:	3c f0       	brlt	.+14     	; 0x5da <sensorTemp+0x88>
			PORTC |= (1 << PORTC2); // Enciende el LED si la temperatura es mayor a 20
 5cc:	88 b1       	in	r24, 0x08	; 8
 5ce:	84 60       	ori	r24, 0x04	; 4
 5d0:	88 b9       	out	0x08, r24	; 8
			ventilador = 1;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <ventilador>
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <sensorTemp+0xa6>
			} else {
			PORTC &= ~(1 << PORTC2); // Apaga el LED si la temperatura es 20 o menor
 5da:	88 b1       	in	r24, 0x08	; 8
 5dc:	8b 7f       	andi	r24, 0xFB	; 251
 5de:	88 b9       	out	0x08, r24	; 8
			ventilador =0;
 5e0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <ventilador>
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <sensorTemp+0xa6>
		}
		} else {
		// Si hubo un error en la lectura, formatea un mensaje de error
		snprintf(buffer, sizeof(buffer), "Error reading temperature");
 5e6:	8a e1       	ldi	r24, 0x1A	; 26
 5e8:	ec e2       	ldi	r30, 0x2C	; 44
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	a2 e9       	ldi	r26, 0x92	; 146
 5ee:	b2 e0       	ldi	r27, 0x02	; 2
 5f0:	01 90       	ld	r0, Z+
 5f2:	0d 92       	st	X+, r0
 5f4:	8a 95       	dec	r24
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <sensorTemp+0x9e>
	}

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <LCDcasa>:
	return 0; // Éxito
}

void LCDcasa() {
	// Muestra la temperatura
	snprintf(buffer, sizeof(buffer), "%d C", temp_value / 256);
 602:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <temp_value>
 606:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <temp_value+0x1>
 60a:	99 23       	and	r25, r25
 60c:	14 f4       	brge	.+4      	; 0x612 <LCDcasa+0x10>
 60e:	81 50       	subi	r24, 0x01	; 1
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	89 2f       	mov	r24, r25
 614:	88 0f       	add	r24, r24
 616:	88 0b       	sbc	r24, r24
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	86 e4       	ldi	r24, 0x46	; 70
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	9f 93       	push	r25
 622:	8f 93       	push	r24
 624:	1f 92       	push	r1
 626:	80 e8       	ldi	r24, 0x80	; 128
 628:	8f 93       	push	r24
 62a:	82 e9       	ldi	r24, 0x92	; 146
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	9f 93       	push	r25
 630:	8f 93       	push	r24
 632:	0e 94 81 04 	call	0x902	; 0x902 <snprintf>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("      "); // Limpia la línea
 63e:	83 e5       	ldi	r24, 0x53	; 83
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
 646:	62 e0       	ldi	r22, 0x02	; 2
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer); // Muestra el valor
 64e:	82 e9       	ldi	r24, 0x92	; 146
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 1); // Posiciona el cursor nuevamente
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("temp:"); // Muestra la etiqueta
 65e:	8b e4       	ldi	r24, 0x4B	; 75
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

	// Muestra el estado del portón
	LCD_Set_Cursor(7, 2); // Posiciona el cursor en la segunda línea del LCD
 666:	62 e0       	ldi	r22, 0x02	; 2
 668:	87 e0       	ldi	r24, 0x07	; 7
 66a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
 66e:	81 e5       	ldi	r24, 0x51	; 81
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 2); // Posiciona el cursor nuevamente
 676:	62 e0       	ldi	r22, 0x02	; 2
 678:	87 e0       	ldi	r24, 0x07	; 7
 67a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer1); // Muestra el estado del portón
 67e:	84 e1       	ldi	r24, 0x14	; 20
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 1); // Posiciona el cursor nuevamente
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	87 e0       	ldi	r24, 0x07	; 7
 68a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Gate:"); // Muestra la etiqueta
 68e:	8a e5       	ldi	r24, 0x5A	; 90
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
	// Muestra el estado del dia
	LCD_Set_Cursor(10, 2); // Posiciona el cursor en la segunda línea del LCD
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
 69e:	81 e5       	ldi	r24, 0x51	; 81
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(10, 2); // Posiciona el cursor nuevamente
 6a6:	62 e0       	ldi	r22, 0x02	; 2
 6a8:	8a e0       	ldi	r24, 0x0A	; 10
 6aa:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer2); // Muestra el estado del portón
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	92 e0       	ldi	r25, 0x02	; 2
 6b2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(10, 1); // Posiciona el cursor nuevamente
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	8a e0       	ldi	r24, 0x0A	; 10
 6ba:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Day:"); // Muestra la etiqueta
 6be:	80 e6       	ldi	r24, 0x60	; 96
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
}
 6c6:	8d b7       	in	r24, 0x3d	; 61
 6c8:	9e b7       	in	r25, 0x3e	; 62
 6ca:	08 96       	adiw	r24, 0x08	; 8
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	9e bf       	out	0x3e, r25	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	8d bf       	out	0x3d, r24	; 61
 6d6:	08 95       	ret

000006d8 <uartCasa>:

void uartCasa() {
 6d8:	cf 93       	push	r28
	if (UART_available()) {
 6da:	0e 94 1e 04 	call	0x83c	; 0x83c <UART_available>
 6de:	89 2b       	or	r24, r25
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <uartCasa+0xc>
 6e2:	43 c0       	rjmp	.+134    	; 0x76a <uartCasa+0x92>
		char comando = UART_receive();
 6e4:	0e 94 28 04 	call	0x850	; 0x850 <UART_receive>
 6e8:	c8 2f       	mov	r28, r24
		UART_send(comando);
 6ea:	0e 94 0a 04 	call	0x814	; 0x814 <UART_send>
		UART_send_string("\r\n");
 6ee:	89 ea       	ldi	r24, 0xA9	; 169
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 11 04 	call	0x822	; 0x822 <UART_send_string>

		switch (comando) {
 6f6:	ce 36       	cpi	r28, 0x6E	; 110
 6f8:	b1 f0       	breq	.+44     	; 0x726 <uartCasa+0x4e>
 6fa:	cf 36       	cpi	r28, 0x6F	; 111
 6fc:	e9 f0       	breq	.+58     	; 0x738 <uartCasa+0x60>
 6fe:	cd 36       	cpi	r28, 0x6D	; 109
 700:	81 f5       	brne	.+96     	; 0x762 <uartCasa+0x8a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	81 ee       	ldi	r24, 0xE1	; 225
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <uartCasa+0x30>
 710:	00 c0       	rjmp	.+0      	; 0x712 <uartCasa+0x3a>
 712:	00 00       	nop
			case 'm':
			_delay_ms(100);
			UART_send_string("\nCambiando el estado del portón...\r\n");
 714:	85 e6       	ldi	r24, 0x65	; 101
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 11 04 	call	0x822	; 0x822 <UART_send_string>
			send_to_slave(SLAVE1, 'm');
 71c:	6d e6       	ldi	r22, 0x6D	; 109
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			break;
 724:	22 c0       	rjmp	.+68     	; 0x76a <uartCasa+0x92>
			case 'n':
			UART_send_string("\nCambiando el estado del dia...\r\n");
 726:	8a e8       	ldi	r24, 0x8A	; 138
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 11 04 	call	0x822	; 0x822 <UART_send_string>
			send_to_slave(SLAVE2, 'n');
 72e:	6e e6       	ldi	r22, 0x6E	; 110
 730:	84 e0       	ldi	r24, 0x04	; 4
 732:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			break;
 736:	19 c0       	rjmp	.+50     	; 0x76a <uartCasa+0x92>
			case 'o':
			UART_send_string("\nCambiando el estado del ventilador...\r\n");
 738:	8c ea       	ldi	r24, 0xAC	; 172
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 11 04 	call	0x822	; 0x822 <UART_send_string>
			ventilador = !ventilador;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <ventilador>
 746:	91 11       	cpse	r25, r1
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <ventilador>
			if (ventilador) {
 74e:	88 23       	and	r24, r24
 750:	21 f0       	breq	.+8      	; 0x75a <uartCasa+0x82>
				PORTC |= (1 << PORTC2); // Enciende el LED si el ventilador está encendido
 752:	88 b1       	in	r24, 0x08	; 8
 754:	84 60       	ori	r24, 0x04	; 4
 756:	88 b9       	out	0x08, r24	; 8
 758:	08 c0       	rjmp	.+16     	; 0x76a <uartCasa+0x92>
				} else {
				PORTC &= ~(1 << PORTC2); // Apaga el LED si el ventilador está apagado
 75a:	88 b1       	in	r24, 0x08	; 8
 75c:	8b 7f       	andi	r24, 0xFB	; 251
 75e:	88 b9       	out	0x08, r24	; 8
 760:	04 c0       	rjmp	.+8      	; 0x76a <uartCasa+0x92>
			}
			break;
			default:
			UART_send_string("\nEl comando ingresado no se reconoce\n");
 762:	85 ed       	ldi	r24, 0xD5	; 213
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	0e 94 11 04 	call	0x822	; 0x822 <UART_send_string>
			break;
		}
		} else {
		//UART_send_string("No data available.\r\n");
	}
}
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <main>:



int main(void) {
	// Inicializa UART con baud rate 9600
	UART_init(9600);
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	95 e2       	ldi	r25, 0x25	; 37
 772:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <UART_init>
	// Inicialización del LCD
	initLCD8bits();
 776:	0e 94 c1 01 	call	0x382	; 0x382 <initLCD8bits>
	// Inicializa I2C a 100 kHz con prescaler 1
	I2C_Master_Init(100000, 1);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	60 ea       	ldi	r22, 0xA0	; 160
 77e:	76 e8       	ldi	r23, 0x86	; 134
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	// Configura LED_PIN como salida
	DDRC |= (1 << DDC2);
 788:	87 b1       	in	r24, 0x07	; 7
 78a:	84 60       	ori	r24, 0x04	; 4
 78c:	87 b9       	out	0x07, r24	; 7
	sei();
 78e:	78 94       	sei
 790:	2f ef       	ldi	r18, 0xFF	; 255
 792:	89 e6       	ldi	r24, 0x69	; 105
 794:	98 e1       	ldi	r25, 0x18	; 24
 796:	21 50       	subi	r18, 0x01	; 1
 798:	80 40       	sbci	r24, 0x00	; 0
 79a:	90 40       	sbci	r25, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x28>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x32>
 7a0:	00 00       	nop

	while (1) {
		//UART_send_string("Hello from ATmega328P!\r\n");
		_delay_ms(500);
		uartCasa();
 7a2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uartCasa>
		sensorTemp();
 7a6:	0e 94 a9 02 	call	0x552	; 0x552 <sensorTemp>
		portonUltra();
 7aa:	0e 94 41 02 	call	0x482	; 0x482 <portonUltra>
		LCDcasa();
 7ae:	0e 94 01 03 	call	0x602	; 0x602 <LCDcasa>
 7b2:	2f ef       	ldi	r18, 0xFF	; 255
 7b4:	85 ea       	ldi	r24, 0xA5	; 165
 7b6:	9e e0       	ldi	r25, 0x0E	; 14
 7b8:	21 50       	subi	r18, 0x01	; 1
 7ba:	80 40       	sbci	r24, 0x00	; 0
 7bc:	90 40       	sbci	r25, 0x00	; 0
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <main+0x4a>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <main+0x54>
 7c2:	00 00       	nop
 7c4:	e5 cf       	rjmp	.-54     	; 0x790 <main+0x22>

000007c6 <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
 7c6:	a0 e0       	ldi	r26, 0x00	; 0
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	aa 1f       	adc	r26, r26
 7d0:	bb 1f       	adc	r27, r27
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	aa 1f       	adc	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	9c 01       	movw	r18, r24
 7dc:	ad 01       	movw	r20, r26
 7de:	22 0f       	add	r18, r18
 7e0:	33 1f       	adc	r19, r19
 7e2:	44 1f       	adc	r20, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	22 0f       	add	r18, r18
 7e8:	33 1f       	adc	r19, r19
 7ea:	44 1f       	adc	r20, r20
 7ec:	55 1f       	adc	r21, r21
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	74 e2       	ldi	r23, 0x24	; 36
 7f2:	84 ef       	ldi	r24, 0xF4	; 244
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodsi4>
 7fa:	21 50       	subi	r18, 0x01	; 1
 7fc:	31 09       	sbc	r19, r1
 7fe:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 802:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 806:	88 e9       	ldi	r24, 0x98	; 152
 808:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 80c:	86 e0       	ldi	r24, 0x06	; 6
 80e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 812:	08 95       	ret

00000814 <UART_send>:
 814:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 818:	95 ff       	sbrs	r25, 5
 81a:	fc cf       	rjmp	.-8      	; 0x814 <UART_send>
 81c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 820:	08 95       	ret

00000822 <UART_send_string>:
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ec 01       	movw	r28, r24
 828:	03 c0       	rjmp	.+6      	; 0x830 <UART_send_string+0xe>
 82a:	21 96       	adiw	r28, 0x01	; 1
 82c:	0e 94 0a 04 	call	0x814	; 0x814 <UART_send>
 830:	88 81       	ld	r24, Y
 832:	81 11       	cpse	r24, r1
 834:	fa cf       	rjmp	.-12     	; 0x82a <UART_send_string+0x8>
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <UART_available>:
 83c:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <uart_head>
 840:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <__data_end>
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	29 13       	cpse	r18, r25
 848:	01 c0       	rjmp	.+2      	; 0x84c <UART_available+0x10>
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	08 95       	ret

00000850 <UART_receive>:
 850:	0e 94 1e 04 	call	0x83c	; 0x83c <UART_available>
 854:	89 2b       	or	r24, r25
 856:	69 f0       	breq	.+26     	; 0x872 <UART_receive+0x22>
 858:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <__data_end>
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	ef 5e       	subi	r30, 0xEF	; 239
 860:	fd 4f       	sbci	r31, 0xFD	; 253
 862:	80 81       	ld	r24, Z
 864:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <__data_end>
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	9f 77       	andi	r25, 0x7F	; 127
 86c:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <__data_end>
 870:	08 95       	ret
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	08 95       	ret

00000876 <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	8f 93       	push	r24
 882:	9f 93       	push	r25
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
	uint8_t next_head = (uart_head + 1) % sizeof(uart_buffer);
 888:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <uart_head>
 88c:	8f 5f       	subi	r24, 0xFF	; 255
 88e:	8f 77       	andi	r24, 0x7F	; 127

	if (next_head != uart_tail) { // Solo avanzar si el buffer no está lleno
 890:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <__data_end>
 894:	89 17       	cp	r24, r25
 896:	51 f0       	breq	.+20     	; 0x8ac <__vector_18+0x36>
		uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 898:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <uart_head>
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 8a2:	ef 5e       	subi	r30, 0xEF	; 239
 8a4:	fd 4f       	sbci	r31, 0xFD	; 253
 8a6:	90 83       	st	Z, r25
		uart_head = next_head; // Actualizar el índice de la cabeza del buffer
 8a8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <uart_head>
	}
}
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	9f 91       	pop	r25
 8b2:	8f 91       	pop	r24
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__udivmodsi4>:
 8be:	a1 e2       	ldi	r26, 0x21	; 33
 8c0:	1a 2e       	mov	r1, r26
 8c2:	aa 1b       	sub	r26, r26
 8c4:	bb 1b       	sub	r27, r27
 8c6:	fd 01       	movw	r30, r26
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__udivmodsi4_ep>

000008ca <__udivmodsi4_loop>:
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	ee 1f       	adc	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	a2 17       	cp	r26, r18
 8d4:	b3 07       	cpc	r27, r19
 8d6:	e4 07       	cpc	r30, r20
 8d8:	f5 07       	cpc	r31, r21
 8da:	20 f0       	brcs	.+8      	; 0x8e4 <__udivmodsi4_ep>
 8dc:	a2 1b       	sub	r26, r18
 8de:	b3 0b       	sbc	r27, r19
 8e0:	e4 0b       	sbc	r30, r20
 8e2:	f5 0b       	sbc	r31, r21

000008e4 <__udivmodsi4_ep>:
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	1a 94       	dec	r1
 8ee:	69 f7       	brne	.-38     	; 0x8ca <__udivmodsi4_loop>
 8f0:	60 95       	com	r22
 8f2:	70 95       	com	r23
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	bd 01       	movw	r22, r26
 8fe:	cf 01       	movw	r24, r30
 900:	08 95       	ret

00000902 <snprintf>:
 902:	ae e0       	ldi	r26, 0x0E	; 14
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	e7 e8       	ldi	r30, 0x87	; 135
 908:	f4 e0       	ldi	r31, 0x04	; 4
 90a:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__prologue_saves__+0x1c>
 90e:	0d 89       	ldd	r16, Y+21	; 0x15
 910:	1e 89       	ldd	r17, Y+22	; 0x16
 912:	8f 89       	ldd	r24, Y+23	; 0x17
 914:	98 8d       	ldd	r25, Y+24	; 0x18
 916:	26 e0       	ldi	r18, 0x06	; 6
 918:	2c 83       	std	Y+4, r18	; 0x04
 91a:	1a 83       	std	Y+2, r17	; 0x02
 91c:	09 83       	std	Y+1, r16	; 0x01
 91e:	97 ff       	sbrs	r25, 7
 920:	02 c0       	rjmp	.+4      	; 0x926 <snprintf+0x24>
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	90 e8       	ldi	r25, 0x80	; 128
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	9e 83       	std	Y+6, r25	; 0x06
 92a:	8d 83       	std	Y+5, r24	; 0x05
 92c:	ae 01       	movw	r20, r28
 92e:	45 5e       	subi	r20, 0xE5	; 229
 930:	5f 4f       	sbci	r21, 0xFF	; 255
 932:	69 8d       	ldd	r22, Y+25	; 0x19
 934:	7a 8d       	ldd	r23, Y+26	; 0x1a
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	0e 94 b1 04 	call	0x962	; 0x962 <vfprintf>
 93e:	4d 81       	ldd	r20, Y+5	; 0x05
 940:	5e 81       	ldd	r21, Y+6	; 0x06
 942:	57 fd       	sbrc	r21, 7
 944:	0a c0       	rjmp	.+20     	; 0x95a <snprintf+0x58>
 946:	2f 81       	ldd	r18, Y+7	; 0x07
 948:	38 85       	ldd	r19, Y+8	; 0x08
 94a:	42 17       	cp	r20, r18
 94c:	53 07       	cpc	r21, r19
 94e:	0c f4       	brge	.+2      	; 0x952 <snprintf+0x50>
 950:	9a 01       	movw	r18, r20
 952:	f8 01       	movw	r30, r16
 954:	e2 0f       	add	r30, r18
 956:	f3 1f       	adc	r31, r19
 958:	10 82       	st	Z, r1
 95a:	2e 96       	adiw	r28, 0x0e	; 14
 95c:	e4 e0       	ldi	r30, 0x04	; 4
 95e:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__epilogue_restores__+0x1c>

00000962 <vfprintf>:
 962:	ab e0       	ldi	r26, 0x0B	; 11
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	e7 eb       	ldi	r30, 0xB7	; 183
 968:	f4 e0       	ldi	r31, 0x04	; 4
 96a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__prologue_saves__>
 96e:	6c 01       	movw	r12, r24
 970:	7b 01       	movw	r14, r22
 972:	8a 01       	movw	r16, r20
 974:	fc 01       	movw	r30, r24
 976:	17 82       	std	Z+7, r1	; 0x07
 978:	16 82       	std	Z+6, r1	; 0x06
 97a:	83 81       	ldd	r24, Z+3	; 0x03
 97c:	81 ff       	sbrs	r24, 1
 97e:	cc c1       	rjmp	.+920    	; 0xd18 <vfprintf+0x3b6>
 980:	ce 01       	movw	r24, r28
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	3c 01       	movw	r6, r24
 986:	f6 01       	movw	r30, r12
 988:	93 81       	ldd	r25, Z+3	; 0x03
 98a:	f7 01       	movw	r30, r14
 98c:	93 fd       	sbrc	r25, 3
 98e:	85 91       	lpm	r24, Z+
 990:	93 ff       	sbrs	r25, 3
 992:	81 91       	ld	r24, Z+
 994:	7f 01       	movw	r14, r30
 996:	88 23       	and	r24, r24
 998:	09 f4       	brne	.+2      	; 0x99c <vfprintf+0x3a>
 99a:	ba c1       	rjmp	.+884    	; 0xd10 <vfprintf+0x3ae>
 99c:	85 32       	cpi	r24, 0x25	; 37
 99e:	39 f4       	brne	.+14     	; 0x9ae <vfprintf+0x4c>
 9a0:	93 fd       	sbrc	r25, 3
 9a2:	85 91       	lpm	r24, Z+
 9a4:	93 ff       	sbrs	r25, 3
 9a6:	81 91       	ld	r24, Z+
 9a8:	7f 01       	movw	r14, r30
 9aa:	85 32       	cpi	r24, 0x25	; 37
 9ac:	29 f4       	brne	.+10     	; 0x9b8 <vfprintf+0x56>
 9ae:	b6 01       	movw	r22, r12
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 9b6:	e7 cf       	rjmp	.-50     	; 0x986 <vfprintf+0x24>
 9b8:	91 2c       	mov	r9, r1
 9ba:	21 2c       	mov	r2, r1
 9bc:	31 2c       	mov	r3, r1
 9be:	ff e1       	ldi	r31, 0x1F	; 31
 9c0:	f3 15       	cp	r31, r3
 9c2:	d8 f0       	brcs	.+54     	; 0x9fa <vfprintf+0x98>
 9c4:	8b 32       	cpi	r24, 0x2B	; 43
 9c6:	79 f0       	breq	.+30     	; 0x9e6 <vfprintf+0x84>
 9c8:	38 f4       	brcc	.+14     	; 0x9d8 <vfprintf+0x76>
 9ca:	80 32       	cpi	r24, 0x20	; 32
 9cc:	79 f0       	breq	.+30     	; 0x9ec <vfprintf+0x8a>
 9ce:	83 32       	cpi	r24, 0x23	; 35
 9d0:	a1 f4       	brne	.+40     	; 0x9fa <vfprintf+0x98>
 9d2:	23 2d       	mov	r18, r3
 9d4:	20 61       	ori	r18, 0x10	; 16
 9d6:	1d c0       	rjmp	.+58     	; 0xa12 <vfprintf+0xb0>
 9d8:	8d 32       	cpi	r24, 0x2D	; 45
 9da:	61 f0       	breq	.+24     	; 0x9f4 <vfprintf+0x92>
 9dc:	80 33       	cpi	r24, 0x30	; 48
 9de:	69 f4       	brne	.+26     	; 0x9fa <vfprintf+0x98>
 9e0:	23 2d       	mov	r18, r3
 9e2:	21 60       	ori	r18, 0x01	; 1
 9e4:	16 c0       	rjmp	.+44     	; 0xa12 <vfprintf+0xb0>
 9e6:	83 2d       	mov	r24, r3
 9e8:	82 60       	ori	r24, 0x02	; 2
 9ea:	38 2e       	mov	r3, r24
 9ec:	e3 2d       	mov	r30, r3
 9ee:	e4 60       	ori	r30, 0x04	; 4
 9f0:	3e 2e       	mov	r3, r30
 9f2:	2a c0       	rjmp	.+84     	; 0xa48 <vfprintf+0xe6>
 9f4:	f3 2d       	mov	r31, r3
 9f6:	f8 60       	ori	r31, 0x08	; 8
 9f8:	1d c0       	rjmp	.+58     	; 0xa34 <vfprintf+0xd2>
 9fa:	37 fc       	sbrc	r3, 7
 9fc:	2d c0       	rjmp	.+90     	; 0xa58 <vfprintf+0xf6>
 9fe:	20 ed       	ldi	r18, 0xD0	; 208
 a00:	28 0f       	add	r18, r24
 a02:	2a 30       	cpi	r18, 0x0A	; 10
 a04:	40 f0       	brcs	.+16     	; 0xa16 <vfprintf+0xb4>
 a06:	8e 32       	cpi	r24, 0x2E	; 46
 a08:	b9 f4       	brne	.+46     	; 0xa38 <vfprintf+0xd6>
 a0a:	36 fc       	sbrc	r3, 6
 a0c:	81 c1       	rjmp	.+770    	; 0xd10 <vfprintf+0x3ae>
 a0e:	23 2d       	mov	r18, r3
 a10:	20 64       	ori	r18, 0x40	; 64
 a12:	32 2e       	mov	r3, r18
 a14:	19 c0       	rjmp	.+50     	; 0xa48 <vfprintf+0xe6>
 a16:	36 fe       	sbrs	r3, 6
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <vfprintf+0xc4>
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
 a1c:	98 9e       	mul	r9, r24
 a1e:	20 0d       	add	r18, r0
 a20:	11 24       	eor	r1, r1
 a22:	92 2e       	mov	r9, r18
 a24:	11 c0       	rjmp	.+34     	; 0xa48 <vfprintf+0xe6>
 a26:	ea e0       	ldi	r30, 0x0A	; 10
 a28:	2e 9e       	mul	r2, r30
 a2a:	20 0d       	add	r18, r0
 a2c:	11 24       	eor	r1, r1
 a2e:	22 2e       	mov	r2, r18
 a30:	f3 2d       	mov	r31, r3
 a32:	f0 62       	ori	r31, 0x20	; 32
 a34:	3f 2e       	mov	r3, r31
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0xe6>
 a38:	8c 36       	cpi	r24, 0x6C	; 108
 a3a:	21 f4       	brne	.+8      	; 0xa44 <vfprintf+0xe2>
 a3c:	83 2d       	mov	r24, r3
 a3e:	80 68       	ori	r24, 0x80	; 128
 a40:	38 2e       	mov	r3, r24
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <vfprintf+0xe6>
 a44:	88 36       	cpi	r24, 0x68	; 104
 a46:	41 f4       	brne	.+16     	; 0xa58 <vfprintf+0xf6>
 a48:	f7 01       	movw	r30, r14
 a4a:	93 fd       	sbrc	r25, 3
 a4c:	85 91       	lpm	r24, Z+
 a4e:	93 ff       	sbrs	r25, 3
 a50:	81 91       	ld	r24, Z+
 a52:	7f 01       	movw	r14, r30
 a54:	81 11       	cpse	r24, r1
 a56:	b3 cf       	rjmp	.-154    	; 0x9be <vfprintf+0x5c>
 a58:	98 2f       	mov	r25, r24
 a5a:	9f 7d       	andi	r25, 0xDF	; 223
 a5c:	95 54       	subi	r25, 0x45	; 69
 a5e:	93 30       	cpi	r25, 0x03	; 3
 a60:	28 f4       	brcc	.+10     	; 0xa6c <vfprintf+0x10a>
 a62:	0c 5f       	subi	r16, 0xFC	; 252
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	9f e3       	ldi	r25, 0x3F	; 63
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <vfprintf+0x124>
 a6c:	83 36       	cpi	r24, 0x63	; 99
 a6e:	31 f0       	breq	.+12     	; 0xa7c <vfprintf+0x11a>
 a70:	83 37       	cpi	r24, 0x73	; 115
 a72:	71 f0       	breq	.+28     	; 0xa90 <vfprintf+0x12e>
 a74:	83 35       	cpi	r24, 0x53	; 83
 a76:	09 f0       	breq	.+2      	; 0xa7a <vfprintf+0x118>
 a78:	59 c0       	rjmp	.+178    	; 0xb2c <vfprintf+0x1ca>
 a7a:	21 c0       	rjmp	.+66     	; 0xabe <vfprintf+0x15c>
 a7c:	f8 01       	movw	r30, r16
 a7e:	80 81       	ld	r24, Z
 a80:	89 83       	std	Y+1, r24	; 0x01
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	88 24       	eor	r8, r8
 a88:	83 94       	inc	r8
 a8a:	91 2c       	mov	r9, r1
 a8c:	53 01       	movw	r10, r6
 a8e:	13 c0       	rjmp	.+38     	; 0xab6 <vfprintf+0x154>
 a90:	28 01       	movw	r4, r16
 a92:	f2 e0       	ldi	r31, 0x02	; 2
 a94:	4f 0e       	add	r4, r31
 a96:	51 1c       	adc	r5, r1
 a98:	f8 01       	movw	r30, r16
 a9a:	a0 80       	ld	r10, Z
 a9c:	b1 80       	ldd	r11, Z+1	; 0x01
 a9e:	36 fe       	sbrs	r3, 6
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x146>
 aa2:	69 2d       	mov	r22, r9
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x14a>
 aa8:	6f ef       	ldi	r22, 0xFF	; 255
 aaa:	7f ef       	ldi	r23, 0xFF	; 255
 aac:	c5 01       	movw	r24, r10
 aae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <strnlen>
 ab2:	4c 01       	movw	r8, r24
 ab4:	82 01       	movw	r16, r4
 ab6:	f3 2d       	mov	r31, r3
 ab8:	ff 77       	andi	r31, 0x7F	; 127
 aba:	3f 2e       	mov	r3, r31
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0x188>
 abe:	28 01       	movw	r4, r16
 ac0:	22 e0       	ldi	r18, 0x02	; 2
 ac2:	42 0e       	add	r4, r18
 ac4:	51 1c       	adc	r5, r1
 ac6:	f8 01       	movw	r30, r16
 ac8:	a0 80       	ld	r10, Z
 aca:	b1 80       	ldd	r11, Z+1	; 0x01
 acc:	36 fe       	sbrs	r3, 6
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <vfprintf+0x174>
 ad0:	69 2d       	mov	r22, r9
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0x178>
 ad6:	6f ef       	ldi	r22, 0xFF	; 255
 ad8:	7f ef       	ldi	r23, 0xFF	; 255
 ada:	c5 01       	movw	r24, r10
 adc:	0e 94 92 06 	call	0xd24	; 0xd24 <strnlen_P>
 ae0:	4c 01       	movw	r8, r24
 ae2:	f3 2d       	mov	r31, r3
 ae4:	f0 68       	ori	r31, 0x80	; 128
 ae6:	3f 2e       	mov	r3, r31
 ae8:	82 01       	movw	r16, r4
 aea:	33 fc       	sbrc	r3, 3
 aec:	1b c0       	rjmp	.+54     	; 0xb24 <vfprintf+0x1c2>
 aee:	82 2d       	mov	r24, r2
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	88 16       	cp	r8, r24
 af4:	99 06       	cpc	r9, r25
 af6:	b0 f4       	brcc	.+44     	; 0xb24 <vfprintf+0x1c2>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e2       	ldi	r24, 0x20	; 32
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 b02:	2a 94       	dec	r2
 b04:	f4 cf       	rjmp	.-24     	; 0xaee <vfprintf+0x18c>
 b06:	f5 01       	movw	r30, r10
 b08:	37 fc       	sbrc	r3, 7
 b0a:	85 91       	lpm	r24, Z+
 b0c:	37 fe       	sbrs	r3, 7
 b0e:	81 91       	ld	r24, Z+
 b10:	5f 01       	movw	r10, r30
 b12:	b6 01       	movw	r22, r12
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 b1a:	21 10       	cpse	r2, r1
 b1c:	2a 94       	dec	r2
 b1e:	21 e0       	ldi	r18, 0x01	; 1
 b20:	82 1a       	sub	r8, r18
 b22:	91 08       	sbc	r9, r1
 b24:	81 14       	cp	r8, r1
 b26:	91 04       	cpc	r9, r1
 b28:	71 f7       	brne	.-36     	; 0xb06 <vfprintf+0x1a4>
 b2a:	e8 c0       	rjmp	.+464    	; 0xcfc <vfprintf+0x39a>
 b2c:	84 36       	cpi	r24, 0x64	; 100
 b2e:	11 f0       	breq	.+4      	; 0xb34 <vfprintf+0x1d2>
 b30:	89 36       	cpi	r24, 0x69	; 105
 b32:	41 f5       	brne	.+80     	; 0xb84 <vfprintf+0x222>
 b34:	f8 01       	movw	r30, r16
 b36:	37 fe       	sbrs	r3, 7
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <vfprintf+0x1e6>
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	0c 5f       	subi	r16, 0xFC	; 252
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x1f6>
 b48:	60 81       	ld	r22, Z
 b4a:	71 81       	ldd	r23, Z+1	; 0x01
 b4c:	07 2e       	mov	r0, r23
 b4e:	00 0c       	add	r0, r0
 b50:	88 0b       	sbc	r24, r24
 b52:	99 0b       	sbc	r25, r25
 b54:	0e 5f       	subi	r16, 0xFE	; 254
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	f3 2d       	mov	r31, r3
 b5a:	ff 76       	andi	r31, 0x6F	; 111
 b5c:	3f 2e       	mov	r3, r31
 b5e:	97 ff       	sbrs	r25, 7
 b60:	09 c0       	rjmp	.+18     	; 0xb74 <vfprintf+0x212>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	f0 68       	ori	r31, 0x80	; 128
 b72:	3f 2e       	mov	r3, r31
 b74:	2a e0       	ldi	r18, 0x0A	; 10
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	a3 01       	movw	r20, r6
 b7a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__ultoa_invert>
 b7e:	88 2e       	mov	r8, r24
 b80:	86 18       	sub	r8, r6
 b82:	45 c0       	rjmp	.+138    	; 0xc0e <vfprintf+0x2ac>
 b84:	85 37       	cpi	r24, 0x75	; 117
 b86:	31 f4       	brne	.+12     	; 0xb94 <vfprintf+0x232>
 b88:	23 2d       	mov	r18, r3
 b8a:	2f 7e       	andi	r18, 0xEF	; 239
 b8c:	b2 2e       	mov	r11, r18
 b8e:	2a e0       	ldi	r18, 0x0A	; 10
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	25 c0       	rjmp	.+74     	; 0xbde <vfprintf+0x27c>
 b94:	93 2d       	mov	r25, r3
 b96:	99 7f       	andi	r25, 0xF9	; 249
 b98:	b9 2e       	mov	r11, r25
 b9a:	8f 36       	cpi	r24, 0x6F	; 111
 b9c:	c1 f0       	breq	.+48     	; 0xbce <vfprintf+0x26c>
 b9e:	18 f4       	brcc	.+6      	; 0xba6 <vfprintf+0x244>
 ba0:	88 35       	cpi	r24, 0x58	; 88
 ba2:	79 f0       	breq	.+30     	; 0xbc2 <vfprintf+0x260>
 ba4:	b5 c0       	rjmp	.+362    	; 0xd10 <vfprintf+0x3ae>
 ba6:	80 37       	cpi	r24, 0x70	; 112
 ba8:	19 f0       	breq	.+6      	; 0xbb0 <vfprintf+0x24e>
 baa:	88 37       	cpi	r24, 0x78	; 120
 bac:	21 f0       	breq	.+8      	; 0xbb6 <vfprintf+0x254>
 bae:	b0 c0       	rjmp	.+352    	; 0xd10 <vfprintf+0x3ae>
 bb0:	e9 2f       	mov	r30, r25
 bb2:	e0 61       	ori	r30, 0x10	; 16
 bb4:	be 2e       	mov	r11, r30
 bb6:	b4 fe       	sbrs	r11, 4
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x272>
 bba:	fb 2d       	mov	r31, r11
 bbc:	f4 60       	ori	r31, 0x04	; 4
 bbe:	bf 2e       	mov	r11, r31
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x272>
 bc2:	34 fe       	sbrs	r3, 4
 bc4:	0a c0       	rjmp	.+20     	; 0xbda <vfprintf+0x278>
 bc6:	29 2f       	mov	r18, r25
 bc8:	26 60       	ori	r18, 0x06	; 6
 bca:	b2 2e       	mov	r11, r18
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x278>
 bce:	28 e0       	ldi	r18, 0x08	; 8
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x27c>
 bd4:	20 e1       	ldi	r18, 0x10	; 16
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <vfprintf+0x27c>
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	32 e0       	ldi	r19, 0x02	; 2
 bde:	f8 01       	movw	r30, r16
 be0:	b7 fe       	sbrs	r11, 7
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <vfprintf+0x290>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	82 81       	ldd	r24, Z+2	; 0x02
 bea:	93 81       	ldd	r25, Z+3	; 0x03
 bec:	0c 5f       	subi	r16, 0xFC	; 252
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0x29c>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 5f       	subi	r16, 0xFE	; 254
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	a3 01       	movw	r20, r6
 c00:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__ultoa_invert>
 c04:	88 2e       	mov	r8, r24
 c06:	86 18       	sub	r8, r6
 c08:	fb 2d       	mov	r31, r11
 c0a:	ff 77       	andi	r31, 0x7F	; 127
 c0c:	3f 2e       	mov	r3, r31
 c0e:	36 fe       	sbrs	r3, 6
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <vfprintf+0x2ca>
 c12:	23 2d       	mov	r18, r3
 c14:	2e 7f       	andi	r18, 0xFE	; 254
 c16:	a2 2e       	mov	r10, r18
 c18:	89 14       	cp	r8, r9
 c1a:	58 f4       	brcc	.+22     	; 0xc32 <vfprintf+0x2d0>
 c1c:	34 fe       	sbrs	r3, 4
 c1e:	0b c0       	rjmp	.+22     	; 0xc36 <vfprintf+0x2d4>
 c20:	32 fc       	sbrc	r3, 2
 c22:	09 c0       	rjmp	.+18     	; 0xc36 <vfprintf+0x2d4>
 c24:	83 2d       	mov	r24, r3
 c26:	8e 7e       	andi	r24, 0xEE	; 238
 c28:	a8 2e       	mov	r10, r24
 c2a:	05 c0       	rjmp	.+10     	; 0xc36 <vfprintf+0x2d4>
 c2c:	b8 2c       	mov	r11, r8
 c2e:	a3 2c       	mov	r10, r3
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x2d6>
 c32:	b8 2c       	mov	r11, r8
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <vfprintf+0x2d6>
 c36:	b9 2c       	mov	r11, r9
 c38:	a4 fe       	sbrs	r10, 4
 c3a:	0f c0       	rjmp	.+30     	; 0xc5a <vfprintf+0x2f8>
 c3c:	fe 01       	movw	r30, r28
 c3e:	e8 0d       	add	r30, r8
 c40:	f1 1d       	adc	r31, r1
 c42:	80 81       	ld	r24, Z
 c44:	80 33       	cpi	r24, 0x30	; 48
 c46:	21 f4       	brne	.+8      	; 0xc50 <vfprintf+0x2ee>
 c48:	9a 2d       	mov	r25, r10
 c4a:	99 7e       	andi	r25, 0xE9	; 233
 c4c:	a9 2e       	mov	r10, r25
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x300>
 c50:	a2 fe       	sbrs	r10, 2
 c52:	06 c0       	rjmp	.+12     	; 0xc60 <vfprintf+0x2fe>
 c54:	b3 94       	inc	r11
 c56:	b3 94       	inc	r11
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <vfprintf+0x300>
 c5a:	8a 2d       	mov	r24, r10
 c5c:	86 78       	andi	r24, 0x86	; 134
 c5e:	09 f0       	breq	.+2      	; 0xc62 <vfprintf+0x300>
 c60:	b3 94       	inc	r11
 c62:	a3 fc       	sbrc	r10, 3
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <vfprintf+0x326>
 c66:	a0 fe       	sbrs	r10, 0
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <vfprintf+0x314>
 c6a:	b2 14       	cp	r11, r2
 c6c:	88 f4       	brcc	.+34     	; 0xc90 <vfprintf+0x32e>
 c6e:	28 0c       	add	r2, r8
 c70:	92 2c       	mov	r9, r2
 c72:	9b 18       	sub	r9, r11
 c74:	0e c0       	rjmp	.+28     	; 0xc92 <vfprintf+0x330>
 c76:	b2 14       	cp	r11, r2
 c78:	60 f4       	brcc	.+24     	; 0xc92 <vfprintf+0x330>
 c7a:	b6 01       	movw	r22, r12
 c7c:	80 e2       	ldi	r24, 0x20	; 32
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 c84:	b3 94       	inc	r11
 c86:	f7 cf       	rjmp	.-18     	; 0xc76 <vfprintf+0x314>
 c88:	b2 14       	cp	r11, r2
 c8a:	18 f4       	brcc	.+6      	; 0xc92 <vfprintf+0x330>
 c8c:	2b 18       	sub	r2, r11
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x332>
 c90:	98 2c       	mov	r9, r8
 c92:	21 2c       	mov	r2, r1
 c94:	a4 fe       	sbrs	r10, 4
 c96:	10 c0       	rjmp	.+32     	; 0xcb8 <vfprintf+0x356>
 c98:	b6 01       	movw	r22, r12
 c9a:	80 e3       	ldi	r24, 0x30	; 48
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 ca2:	a2 fe       	sbrs	r10, 2
 ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <vfprintf+0x372>
 ca6:	a1 fc       	sbrc	r10, 1
 ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x34e>
 caa:	88 e7       	ldi	r24, 0x78	; 120
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x352>
 cb0:	88 e5       	ldi	r24, 0x58	; 88
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	b6 01       	movw	r22, r12
 cb6:	0c c0       	rjmp	.+24     	; 0xcd0 <vfprintf+0x36e>
 cb8:	8a 2d       	mov	r24, r10
 cba:	86 78       	andi	r24, 0x86	; 134
 cbc:	59 f0       	breq	.+22     	; 0xcd4 <vfprintf+0x372>
 cbe:	a1 fe       	sbrs	r10, 1
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x364>
 cc2:	8b e2       	ldi	r24, 0x2B	; 43
 cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x366>
 cc6:	80 e2       	ldi	r24, 0x20	; 32
 cc8:	a7 fc       	sbrc	r10, 7
 cca:	8d e2       	ldi	r24, 0x2D	; 45
 ccc:	b6 01       	movw	r22, r12
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 cd4:	89 14       	cp	r8, r9
 cd6:	38 f4       	brcc	.+14     	; 0xce6 <vfprintf+0x384>
 cd8:	b6 01       	movw	r22, r12
 cda:	80 e3       	ldi	r24, 0x30	; 48
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 ce2:	9a 94       	dec	r9
 ce4:	f7 cf       	rjmp	.-18     	; 0xcd4 <vfprintf+0x372>
 ce6:	8a 94       	dec	r8
 ce8:	f3 01       	movw	r30, r6
 cea:	e8 0d       	add	r30, r8
 cec:	f1 1d       	adc	r31, r1
 cee:	80 81       	ld	r24, Z
 cf0:	b6 01       	movw	r22, r12
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 cf8:	81 10       	cpse	r8, r1
 cfa:	f5 cf       	rjmp	.-22     	; 0xce6 <vfprintf+0x384>
 cfc:	22 20       	and	r2, r2
 cfe:	09 f4       	brne	.+2      	; 0xd02 <vfprintf+0x3a0>
 d00:	42 ce       	rjmp	.-892    	; 0x986 <vfprintf+0x24>
 d02:	b6 01       	movw	r22, r12
 d04:	80 e2       	ldi	r24, 0x20	; 32
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 d0c:	2a 94       	dec	r2
 d0e:	f6 cf       	rjmp	.-20     	; 0xcfc <vfprintf+0x39a>
 d10:	f6 01       	movw	r30, r12
 d12:	86 81       	ldd	r24, Z+6	; 0x06
 d14:	97 81       	ldd	r25, Z+7	; 0x07
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x3ba>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	9f ef       	ldi	r25, 0xFF	; 255
 d1c:	2b 96       	adiw	r28, 0x0b	; 11
 d1e:	e2 e1       	ldi	r30, 0x12	; 18
 d20:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__epilogue_restores__>

00000d24 <strnlen_P>:
 d24:	fc 01       	movw	r30, r24
 d26:	05 90       	lpm	r0, Z+
 d28:	61 50       	subi	r22, 0x01	; 1
 d2a:	70 40       	sbci	r23, 0x00	; 0
 d2c:	01 10       	cpse	r0, r1
 d2e:	d8 f7       	brcc	.-10     	; 0xd26 <strnlen_P+0x2>
 d30:	80 95       	com	r24
 d32:	90 95       	com	r25
 d34:	8e 0f       	add	r24, r30
 d36:	9f 1f       	adc	r25, r31
 d38:	08 95       	ret

00000d3a <strnlen>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	61 50       	subi	r22, 0x01	; 1
 d3e:	70 40       	sbci	r23, 0x00	; 0
 d40:	01 90       	ld	r0, Z+
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <fputc>:
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	fb 01       	movw	r30, r22
 d5a:	23 81       	ldd	r18, Z+3	; 0x03
 d5c:	21 fd       	sbrc	r18, 1
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <fputc+0x16>
 d60:	8f ef       	ldi	r24, 0xFF	; 255
 d62:	9f ef       	ldi	r25, 0xFF	; 255
 d64:	2c c0       	rjmp	.+88     	; 0xdbe <fputc+0x6e>
 d66:	22 ff       	sbrs	r18, 2
 d68:	16 c0       	rjmp	.+44     	; 0xd96 <fputc+0x46>
 d6a:	46 81       	ldd	r20, Z+6	; 0x06
 d6c:	57 81       	ldd	r21, Z+7	; 0x07
 d6e:	24 81       	ldd	r18, Z+4	; 0x04
 d70:	35 81       	ldd	r19, Z+5	; 0x05
 d72:	42 17       	cp	r20, r18
 d74:	53 07       	cpc	r21, r19
 d76:	44 f4       	brge	.+16     	; 0xd88 <fputc+0x38>
 d78:	a0 81       	ld	r26, Z
 d7a:	b1 81       	ldd	r27, Z+1	; 0x01
 d7c:	9d 01       	movw	r18, r26
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	31 83       	std	Z+1, r19	; 0x01
 d84:	20 83       	st	Z, r18
 d86:	8c 93       	st	X, r24
 d88:	26 81       	ldd	r18, Z+6	; 0x06
 d8a:	37 81       	ldd	r19, Z+7	; 0x07
 d8c:	2f 5f       	subi	r18, 0xFF	; 255
 d8e:	3f 4f       	sbci	r19, 0xFF	; 255
 d90:	37 83       	std	Z+7, r19	; 0x07
 d92:	26 83       	std	Z+6, r18	; 0x06
 d94:	14 c0       	rjmp	.+40     	; 0xdbe <fputc+0x6e>
 d96:	8b 01       	movw	r16, r22
 d98:	ec 01       	movw	r28, r24
 d9a:	fb 01       	movw	r30, r22
 d9c:	00 84       	ldd	r0, Z+8	; 0x08
 d9e:	f1 85       	ldd	r31, Z+9	; 0x09
 da0:	e0 2d       	mov	r30, r0
 da2:	09 95       	icall
 da4:	89 2b       	or	r24, r25
 da6:	e1 f6       	brne	.-72     	; 0xd60 <fputc+0x10>
 da8:	d8 01       	movw	r26, r16
 daa:	16 96       	adiw	r26, 0x06	; 6
 dac:	8d 91       	ld	r24, X+
 dae:	9c 91       	ld	r25, X
 db0:	17 97       	sbiw	r26, 0x07	; 7
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	17 96       	adiw	r26, 0x07	; 7
 db6:	9c 93       	st	X, r25
 db8:	8e 93       	st	-X, r24
 dba:	16 97       	sbiw	r26, 0x06	; 6
 dbc:	ce 01       	movw	r24, r28
 dbe:	df 91       	pop	r29
 dc0:	cf 91       	pop	r28
 dc2:	1f 91       	pop	r17
 dc4:	0f 91       	pop	r16
 dc6:	08 95       	ret

00000dc8 <__ultoa_invert>:
 dc8:	fa 01       	movw	r30, r20
 dca:	aa 27       	eor	r26, r26
 dcc:	28 30       	cpi	r18, 0x08	; 8
 dce:	51 f1       	breq	.+84     	; 0xe24 <__ultoa_invert+0x5c>
 dd0:	20 31       	cpi	r18, 0x10	; 16
 dd2:	81 f1       	breq	.+96     	; 0xe34 <__ultoa_invert+0x6c>
 dd4:	e8 94       	clt
 dd6:	6f 93       	push	r22
 dd8:	6e 7f       	andi	r22, 0xFE	; 254
 dda:	6e 5f       	subi	r22, 0xFE	; 254
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	af 4f       	sbci	r26, 0xFF	; 255
 de4:	b1 e0       	ldi	r27, 0x01	; 1
 de6:	3e d0       	rcall	.+124    	; 0xe64 <__ultoa_invert+0x9c>
 de8:	b4 e0       	ldi	r27, 0x04	; 4
 dea:	3c d0       	rcall	.+120    	; 0xe64 <__ultoa_invert+0x9c>
 dec:	67 0f       	add	r22, r23
 dee:	78 1f       	adc	r23, r24
 df0:	89 1f       	adc	r24, r25
 df2:	9a 1f       	adc	r25, r26
 df4:	a1 1d       	adc	r26, r1
 df6:	68 0f       	add	r22, r24
 df8:	79 1f       	adc	r23, r25
 dfa:	8a 1f       	adc	r24, r26
 dfc:	91 1d       	adc	r25, r1
 dfe:	a1 1d       	adc	r26, r1
 e00:	6a 0f       	add	r22, r26
 e02:	71 1d       	adc	r23, r1
 e04:	81 1d       	adc	r24, r1
 e06:	91 1d       	adc	r25, r1
 e08:	a1 1d       	adc	r26, r1
 e0a:	20 d0       	rcall	.+64     	; 0xe4c <__ultoa_invert+0x84>
 e0c:	09 f4       	brne	.+2      	; 0xe10 <__ultoa_invert+0x48>
 e0e:	68 94       	set
 e10:	3f 91       	pop	r19
 e12:	2a e0       	ldi	r18, 0x0A	; 10
 e14:	26 9f       	mul	r18, r22
 e16:	11 24       	eor	r1, r1
 e18:	30 19       	sub	r19, r0
 e1a:	30 5d       	subi	r19, 0xD0	; 208
 e1c:	31 93       	st	Z+, r19
 e1e:	de f6       	brtc	.-74     	; 0xdd6 <__ultoa_invert+0xe>
 e20:	cf 01       	movw	r24, r30
 e22:	08 95       	ret
 e24:	46 2f       	mov	r20, r22
 e26:	47 70       	andi	r20, 0x07	; 7
 e28:	40 5d       	subi	r20, 0xD0	; 208
 e2a:	41 93       	st	Z+, r20
 e2c:	b3 e0       	ldi	r27, 0x03	; 3
 e2e:	0f d0       	rcall	.+30     	; 0xe4e <__ultoa_invert+0x86>
 e30:	c9 f7       	brne	.-14     	; 0xe24 <__ultoa_invert+0x5c>
 e32:	f6 cf       	rjmp	.-20     	; 0xe20 <__ultoa_invert+0x58>
 e34:	46 2f       	mov	r20, r22
 e36:	4f 70       	andi	r20, 0x0F	; 15
 e38:	40 5d       	subi	r20, 0xD0	; 208
 e3a:	4a 33       	cpi	r20, 0x3A	; 58
 e3c:	18 f0       	brcs	.+6      	; 0xe44 <__ultoa_invert+0x7c>
 e3e:	49 5d       	subi	r20, 0xD9	; 217
 e40:	31 fd       	sbrc	r19, 1
 e42:	40 52       	subi	r20, 0x20	; 32
 e44:	41 93       	st	Z+, r20
 e46:	02 d0       	rcall	.+4      	; 0xe4c <__ultoa_invert+0x84>
 e48:	a9 f7       	brne	.-22     	; 0xe34 <__ultoa_invert+0x6c>
 e4a:	ea cf       	rjmp	.-44     	; 0xe20 <__ultoa_invert+0x58>
 e4c:	b4 e0       	ldi	r27, 0x04	; 4
 e4e:	a6 95       	lsr	r26
 e50:	97 95       	ror	r25
 e52:	87 95       	ror	r24
 e54:	77 95       	ror	r23
 e56:	67 95       	ror	r22
 e58:	ba 95       	dec	r27
 e5a:	c9 f7       	brne	.-14     	; 0xe4e <__ultoa_invert+0x86>
 e5c:	00 97       	sbiw	r24, 0x00	; 0
 e5e:	61 05       	cpc	r22, r1
 e60:	71 05       	cpc	r23, r1
 e62:	08 95       	ret
 e64:	9b 01       	movw	r18, r22
 e66:	ac 01       	movw	r20, r24
 e68:	0a 2e       	mov	r0, r26
 e6a:	06 94       	lsr	r0
 e6c:	57 95       	ror	r21
 e6e:	47 95       	ror	r20
 e70:	37 95       	ror	r19
 e72:	27 95       	ror	r18
 e74:	ba 95       	dec	r27
 e76:	c9 f7       	brne	.-14     	; 0xe6a <__ultoa_invert+0xa2>
 e78:	62 0f       	add	r22, r18
 e7a:	73 1f       	adc	r23, r19
 e7c:	84 1f       	adc	r24, r20
 e7e:	95 1f       	adc	r25, r21
 e80:	a0 1d       	adc	r26, r0
 e82:	08 95       	ret

00000e84 <__prologue_saves__>:
 e84:	2f 92       	push	r2
 e86:	3f 92       	push	r3
 e88:	4f 92       	push	r4
 e8a:	5f 92       	push	r5
 e8c:	6f 92       	push	r6
 e8e:	7f 92       	push	r7
 e90:	8f 92       	push	r8
 e92:	9f 92       	push	r9
 e94:	af 92       	push	r10
 e96:	bf 92       	push	r11
 e98:	cf 92       	push	r12
 e9a:	df 92       	push	r13
 e9c:	ef 92       	push	r14
 e9e:	ff 92       	push	r15
 ea0:	0f 93       	push	r16
 ea2:	1f 93       	push	r17
 ea4:	cf 93       	push	r28
 ea6:	df 93       	push	r29
 ea8:	cd b7       	in	r28, 0x3d	; 61
 eaa:	de b7       	in	r29, 0x3e	; 62
 eac:	ca 1b       	sub	r28, r26
 eae:	db 0b       	sbc	r29, r27
 eb0:	0f b6       	in	r0, 0x3f	; 63
 eb2:	f8 94       	cli
 eb4:	de bf       	out	0x3e, r29	; 62
 eb6:	0f be       	out	0x3f, r0	; 63
 eb8:	cd bf       	out	0x3d, r28	; 61
 eba:	09 94       	ijmp

00000ebc <__epilogue_restores__>:
 ebc:	2a 88       	ldd	r2, Y+18	; 0x12
 ebe:	39 88       	ldd	r3, Y+17	; 0x11
 ec0:	48 88       	ldd	r4, Y+16	; 0x10
 ec2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec8:	8c 84       	ldd	r8, Y+12	; 0x0c
 eca:	9b 84       	ldd	r9, Y+11	; 0x0b
 ecc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ece:	b9 84       	ldd	r11, Y+9	; 0x09
 ed0:	c8 84       	ldd	r12, Y+8	; 0x08
 ed2:	df 80       	ldd	r13, Y+7	; 0x07
 ed4:	ee 80       	ldd	r14, Y+6	; 0x06
 ed6:	fd 80       	ldd	r15, Y+5	; 0x05
 ed8:	0c 81       	ldd	r16, Y+4	; 0x04
 eda:	1b 81       	ldd	r17, Y+3	; 0x03
 edc:	aa 81       	ldd	r26, Y+2	; 0x02
 ede:	b9 81       	ldd	r27, Y+1	; 0x01
 ee0:	ce 0f       	add	r28, r30
 ee2:	d1 1d       	adc	r29, r1
 ee4:	0f b6       	in	r0, 0x3f	; 63
 ee6:	f8 94       	cli
 ee8:	de bf       	out	0x3e, r29	; 62
 eea:	0f be       	out	0x3f, r0	; 63
 eec:	cd bf       	out	0x3d, r28	; 61
 eee:	ed 01       	movw	r28, r26
 ef0:	08 95       	ret

00000ef2 <_exit>:
 ef2:	f8 94       	cli

00000ef4 <__stop_program>:
 ef4:	ff cf       	rjmp	.-2      	; 0xef4 <__stop_program>
