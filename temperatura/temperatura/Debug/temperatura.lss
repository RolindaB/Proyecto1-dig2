
temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800130  00800130  00000b00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cb  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e0  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000576  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e7  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  9e:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
		break;
  d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
		break;
  ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
		break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodsi4>
 124:	ca 01       	movw	r24, r20
 126:	b9 01       	movw	r22, r18
 128:	60 51       	subi	r22, 0x10	; 16
 12a:	71 09       	sbc	r23, r1
 12c:	81 09       	sbc	r24, r1
 12e:	91 09       	sbc	r25, r1
 130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	23 70       	andi	r18, 0x03	; 3
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	fa 01       	movw	r30, r20
 13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
 146:	9f 01       	movw	r18, r30
 148:	03 2e       	mov	r0, r19
 14a:	00 0c       	add	r0, r0
 14c:	44 0b       	sbc	r20, r20
 14e:	55 0b       	sbc	r21, r21
 150:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodsi4>
 154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
}
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
 16c:	84 ea       	ldi	r24, 0xA4	; 164
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
 190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
 192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
 19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19e:	84 fd       	sbrc	r24, 4
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
 1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
 1bc:	88 31       	cpi	r24, 0x18	; 24
 1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
 1c0:	88 32       	cpi	r24, 0x28	; 40
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	80 e0       	ldi	r24, 0x00	; 0
}
 1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
 1d4:	dc 01       	movw	r26, r24
	if (ack) {
 1d6:	66 23       	and	r22, r22
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	90 64       	ori	r25, 0x40	; 64
 1e2:	90 83       	st	Z, r25
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	9f 7b       	andi	r25, 0xBF	; 191
 1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	90 68       	ori	r25, 0x80	; 128
 1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
 1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fe:	99 23       	and	r25, r25
 200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
 208:	98 35       	cpi	r25, 0x58	; 88
 20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
 20c:	90 35       	cpi	r25, 0x50	; 80
 20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
 210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
 21a:	89 2f       	mov	r24, r25
	}
}
 21c:	08 95       	ret

0000021e <read_temperature>:
		_delay_ms(3000);
	}
}

// Lee la temperatura del sensor LM75
uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	8b 01       	movw	r16, r22
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
 22a:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
 22e:	81 11       	cpse	r24, r1
 230:	22 c0       	rjmp	.+68     	; 0x276 <read_temperature+0x58>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
 232:	82 e9       	ldi	r24, 0x92	; 146
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 238:	81 11       	cpse	r24, r1
 23a:	1f c0       	rjmp	.+62     	; 0x27a <read_temperature+0x5c>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
 23c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 240:	81 11       	cpse	r24, r1
 242:	1d c0       	rjmp	.+58     	; 0x27e <read_temperature+0x60>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
 244:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
 248:	81 11       	cpse	r24, r1
 24a:	1b c0       	rjmp	.+54     	; 0x282 <read_temperature+0x64>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
 24c:	83 e9       	ldi	r24, 0x93	; 147
 24e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
 252:	81 11       	cpse	r24, r1
 254:	18 c0       	rjmp	.+48     	; 0x286 <read_temperature+0x68>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
 25e:	81 11       	cpse	r24, r1
 260:	14 c0       	rjmp	.+40     	; 0x28a <read_temperature+0x6c>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	c8 01       	movw	r24, r16
 266:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
 26a:	c8 2f       	mov	r28, r24
 26c:	81 11       	cpse	r24, r1
 26e:	0f c0       	rjmp	.+30     	; 0x28e <read_temperature+0x70>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
 270:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

	return 0; // Éxito
 274:	0d c0       	rjmp	.+26     	; 0x290 <read_temperature+0x72>
}

// Lee la temperatura del sensor LM75
uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
 276:	c1 e0       	ldi	r28, 0x01	; 1
 278:	0b c0       	rjmp	.+22     	; 0x290 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
 27a:	c1 e0       	ldi	r28, 0x01	; 1
 27c:	09 c0       	rjmp	.+18     	; 0x290 <read_temperature+0x72>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
 27e:	c1 e0       	ldi	r28, 0x01	; 1
 280:	07 c0       	rjmp	.+14     	; 0x290 <read_temperature+0x72>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
 282:	c1 e0       	ldi	r28, 0x01	; 1
 284:	05 c0       	rjmp	.+10     	; 0x290 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
 286:	c1 e0       	ldi	r28, 0x01	; 1
 288:	03 c0       	rjmp	.+6      	; 0x290 <read_temperature+0x72>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
 28a:	c1 e0       	ldi	r28, 0x01	; 1
 28c:	01 c0       	rjmp	.+2      	; 0x290 <read_temperature+0x72>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
 28e:	c1 e0       	ldi	r28, 0x01	; 1

	// Detiene la comunicación I2C
	I2C_Master_Stop();

	return 0; // Éxito
 290:	8c 2f       	mov	r24, r28
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <main>:
char buffer[128];

// Prototipos de funciones
uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte);

int main(void) {
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <main+0x6>
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	// Inicializa UART con baud rate 9600
	UART_init(9600);
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	95 e2       	ldi	r25, 0x25	; 37
 2aa:	0e 94 a3 01 	call	0x346	; 0x346 <UART_init>

	// Inicializa I2C a 100 kHz con prescaler 1
	I2C_Master_Init(100000, 1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	60 ea       	ldi	r22, 0xA0	; 160
 2b2:	76 e8       	ldi	r23, 0x86	; 134
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>

	while (1) {
		uint8_t temp_high = 0;
 2bc:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t temp_low = 0;
 2be:	19 82       	std	Y+1, r1	; 0x01

		// Lee la temperatura del sensor LM75
		if (read_temperature(&temp_high, &temp_low) == 0) {
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	02 96       	adiw	r24, 0x02	; 2
 2ca:	0e 94 0f 01 	call	0x21e	; 0x21e <read_temperature>
 2ce:	81 11       	cpse	r24, r1
 2d0:	23 c0       	rjmp	.+70     	; 0x318 <main+0x7c>
			// Convierte los datos del sensor a una cadena de texto
			int16_t temp_value = (temp_high << 8) | temp_low;
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 2f       	mov	r25, r24
 2d8:	88 27       	eor	r24, r24
 2da:	29 81       	ldd	r18, Y+1	; 0x01
 2dc:	82 2b       	or	r24, r18
			snprintf(buffer, sizeof(buffer), "Temperature: %d C \n\r", temp_value / 256);
 2de:	9c 01       	movw	r18, r24
 2e0:	33 23       	and	r19, r19
 2e2:	14 f4       	brge	.+4      	; 0x2e8 <main+0x4c>
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	83 2f       	mov	r24, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	88 0b       	sbc	r24, r24
 2ee:	8f 93       	push	r24
 2f0:	3f 93       	push	r19
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	1f 92       	push	r1
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	8f 93       	push	r24
 300:	81 eb       	ldi	r24, 0xB1	; 177
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	9f 93       	push	r25
 306:	8f 93       	push	r24
 308:	0e 94 24 02 	call	0x448	; 0x448 <snprintf>
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	09 c0       	rjmp	.+18     	; 0x32a <main+0x8e>
			} else {
			// Si hubo un error en la lectura, formatea un mensaje de error
			snprintf(buffer, sizeof(buffer), "Error reading temperature");
 318:	8a e1       	ldi	r24, 0x1A	; 26
 31a:	e5 e1       	ldi	r30, 0x15	; 21
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	a1 eb       	ldi	r26, 0xB1	; 177
 320:	b1 e0       	ldi	r27, 0x01	; 1
 322:	01 90       	ld	r0, Z+
 324:	0d 92       	st	X+, r0
 326:	8a 95       	dec	r24
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x86>
		}

		// Envía el mensaje por UART a la consola
		UART_send_string(buffer);
 32a:	81 eb       	ldi	r24, 0xB1	; 177
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <UART_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	9f eb       	ldi	r25, 0xBF	; 191
 334:	27 e2       	ldi	r18, 0x27	; 39
 336:	89 e0       	ldi	r24, 0x09	; 9
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x9c>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xa6>
 342:	00 00       	nop

		// Espera 300 ms antes de la siguiente lectura
		_delay_ms(3000);
	}
 344:	bb cf       	rjmp	.-138    	; 0x2bc <main+0x20>

00000346 <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	9c 01       	movw	r18, r24
 35c:	ad 01       	movw	r20, r26
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	44 1f       	adc	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	74 e2       	ldi	r23, 0x24	; 36
 372:	84 ef       	ldi	r24, 0xF4	; 244
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodsi4>
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	31 09       	sbc	r19, r1
 37e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 382:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 386:	88 e9       	ldi	r24, 0x98	; 152
 388:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 392:	08 95       	ret

00000394 <UART_send>:
 394:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 398:	95 ff       	sbrs	r25, 5
 39a:	fc cf       	rjmp	.-8      	; 0x394 <UART_send>
 39c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3a0:	08 95       	ret

000003a2 <UART_send_string>:
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <UART_send_string+0xe>
 3aa:	21 96       	adiw	r28, 0x01	; 1
 3ac:	0e 94 ca 01 	call	0x394	; 0x394 <UART_send>
 3b0:	88 81       	ld	r24, Y
 3b2:	81 11       	cpse	r24, r1
 3b4:	fa cf       	rjmp	.-12     	; 0x3aa <UART_send_string+0x8>
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
	uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 3cc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3d6:	ef 5c       	subi	r30, 0xCF	; 207
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % sizeof(uart_buffer); // Actualizar el índice de la cabeza del buffer
 3dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	8f 77       	andi	r24, 0x7F	; 127
 3e4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	uart_buffer[uart_head] = '\0'; // Terminador de cadena
 3e8:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ef 5c       	subi	r30, 0xCF	; 207
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	10 82       	st	Z, r1
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	8f 91       	pop	r24
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__udivmodsi4>:
 404:	a1 e2       	ldi	r26, 0x21	; 33
 406:	1a 2e       	mov	r1, r26
 408:	aa 1b       	sub	r26, r26
 40a:	bb 1b       	sub	r27, r27
 40c:	fd 01       	movw	r30, r26
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__udivmodsi4_ep>

00000410 <__udivmodsi4_loop>:
 410:	aa 1f       	adc	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	ee 1f       	adc	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	a2 17       	cp	r26, r18
 41a:	b3 07       	cpc	r27, r19
 41c:	e4 07       	cpc	r30, r20
 41e:	f5 07       	cpc	r31, r21
 420:	20 f0       	brcs	.+8      	; 0x42a <__udivmodsi4_ep>
 422:	a2 1b       	sub	r26, r18
 424:	b3 0b       	sbc	r27, r19
 426:	e4 0b       	sbc	r30, r20
 428:	f5 0b       	sbc	r31, r21

0000042a <__udivmodsi4_ep>:
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a 94       	dec	r1
 434:	69 f7       	brne	.-38     	; 0x410 <__udivmodsi4_loop>
 436:	60 95       	com	r22
 438:	70 95       	com	r23
 43a:	80 95       	com	r24
 43c:	90 95       	com	r25
 43e:	9b 01       	movw	r18, r22
 440:	ac 01       	movw	r20, r24
 442:	bd 01       	movw	r22, r26
 444:	cf 01       	movw	r24, r30
 446:	08 95       	ret

00000448 <snprintf>:
 448:	ae e0       	ldi	r26, 0x0E	; 14
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ea e2       	ldi	r30, 0x2A	; 42
 44e:	f2 e0       	ldi	r31, 0x02	; 2
 450:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__prologue_saves__+0x1c>
 454:	0d 89       	ldd	r16, Y+21	; 0x15
 456:	1e 89       	ldd	r17, Y+22	; 0x16
 458:	8f 89       	ldd	r24, Y+23	; 0x17
 45a:	98 8d       	ldd	r25, Y+24	; 0x18
 45c:	26 e0       	ldi	r18, 0x06	; 6
 45e:	2c 83       	std	Y+4, r18	; 0x04
 460:	1a 83       	std	Y+2, r17	; 0x02
 462:	09 83       	std	Y+1, r16	; 0x01
 464:	97 ff       	sbrs	r25, 7
 466:	02 c0       	rjmp	.+4      	; 0x46c <snprintf+0x24>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e8       	ldi	r25, 0x80	; 128
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	9e 83       	std	Y+6, r25	; 0x06
 470:	8d 83       	std	Y+5, r24	; 0x05
 472:	ae 01       	movw	r20, r28
 474:	45 5e       	subi	r20, 0xE5	; 229
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	69 8d       	ldd	r22, Y+25	; 0x19
 47a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 54 02 	call	0x4a8	; 0x4a8 <vfprintf>
 484:	4d 81       	ldd	r20, Y+5	; 0x05
 486:	5e 81       	ldd	r21, Y+6	; 0x06
 488:	57 fd       	sbrc	r21, 7
 48a:	0a c0       	rjmp	.+20     	; 0x4a0 <snprintf+0x58>
 48c:	2f 81       	ldd	r18, Y+7	; 0x07
 48e:	38 85       	ldd	r19, Y+8	; 0x08
 490:	42 17       	cp	r20, r18
 492:	53 07       	cpc	r21, r19
 494:	0c f4       	brge	.+2      	; 0x498 <snprintf+0x50>
 496:	9a 01       	movw	r18, r20
 498:	f8 01       	movw	r30, r16
 49a:	e2 0f       	add	r30, r18
 49c:	f3 1f       	adc	r31, r19
 49e:	10 82       	st	Z, r1
 4a0:	2e 96       	adiw	r28, 0x0e	; 14
 4a2:	e4 e0       	ldi	r30, 0x04	; 4
 4a4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__epilogue_restores__+0x1c>

000004a8 <vfprintf>:
 4a8:	ab e0       	ldi	r26, 0x0B	; 11
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	ea e5       	ldi	r30, 0x5A	; 90
 4ae:	f2 e0       	ldi	r31, 0x02	; 2
 4b0:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__prologue_saves__>
 4b4:	6c 01       	movw	r12, r24
 4b6:	7b 01       	movw	r14, r22
 4b8:	8a 01       	movw	r16, r20
 4ba:	fc 01       	movw	r30, r24
 4bc:	17 82       	std	Z+7, r1	; 0x07
 4be:	16 82       	std	Z+6, r1	; 0x06
 4c0:	83 81       	ldd	r24, Z+3	; 0x03
 4c2:	81 ff       	sbrs	r24, 1
 4c4:	cc c1       	rjmp	.+920    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	3c 01       	movw	r6, r24
 4cc:	f6 01       	movw	r30, r12
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	f7 01       	movw	r30, r14
 4d2:	93 fd       	sbrc	r25, 3
 4d4:	85 91       	lpm	r24, Z+
 4d6:	93 ff       	sbrs	r25, 3
 4d8:	81 91       	ld	r24, Z+
 4da:	7f 01       	movw	r14, r30
 4dc:	88 23       	and	r24, r24
 4de:	09 f4       	brne	.+2      	; 0x4e2 <vfprintf+0x3a>
 4e0:	ba c1       	rjmp	.+884    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 4e2:	85 32       	cpi	r24, 0x25	; 37
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <vfprintf+0x4c>
 4e6:	93 fd       	sbrc	r25, 3
 4e8:	85 91       	lpm	r24, Z+
 4ea:	93 ff       	sbrs	r25, 3
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	85 32       	cpi	r24, 0x25	; 37
 4f2:	29 f4       	brne	.+10     	; 0x4fe <vfprintf+0x56>
 4f4:	b6 01       	movw	r22, r12
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 4fc:	e7 cf       	rjmp	.-50     	; 0x4cc <vfprintf+0x24>
 4fe:	91 2c       	mov	r9, r1
 500:	21 2c       	mov	r2, r1
 502:	31 2c       	mov	r3, r1
 504:	ff e1       	ldi	r31, 0x1F	; 31
 506:	f3 15       	cp	r31, r3
 508:	d8 f0       	brcs	.+54     	; 0x540 <vfprintf+0x98>
 50a:	8b 32       	cpi	r24, 0x2B	; 43
 50c:	79 f0       	breq	.+30     	; 0x52c <vfprintf+0x84>
 50e:	38 f4       	brcc	.+14     	; 0x51e <vfprintf+0x76>
 510:	80 32       	cpi	r24, 0x20	; 32
 512:	79 f0       	breq	.+30     	; 0x532 <vfprintf+0x8a>
 514:	83 32       	cpi	r24, 0x23	; 35
 516:	a1 f4       	brne	.+40     	; 0x540 <vfprintf+0x98>
 518:	23 2d       	mov	r18, r3
 51a:	20 61       	ori	r18, 0x10	; 16
 51c:	1d c0       	rjmp	.+58     	; 0x558 <vfprintf+0xb0>
 51e:	8d 32       	cpi	r24, 0x2D	; 45
 520:	61 f0       	breq	.+24     	; 0x53a <vfprintf+0x92>
 522:	80 33       	cpi	r24, 0x30	; 48
 524:	69 f4       	brne	.+26     	; 0x540 <vfprintf+0x98>
 526:	23 2d       	mov	r18, r3
 528:	21 60       	ori	r18, 0x01	; 1
 52a:	16 c0       	rjmp	.+44     	; 0x558 <vfprintf+0xb0>
 52c:	83 2d       	mov	r24, r3
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	38 2e       	mov	r3, r24
 532:	e3 2d       	mov	r30, r3
 534:	e4 60       	ori	r30, 0x04	; 4
 536:	3e 2e       	mov	r3, r30
 538:	2a c0       	rjmp	.+84     	; 0x58e <vfprintf+0xe6>
 53a:	f3 2d       	mov	r31, r3
 53c:	f8 60       	ori	r31, 0x08	; 8
 53e:	1d c0       	rjmp	.+58     	; 0x57a <vfprintf+0xd2>
 540:	37 fc       	sbrc	r3, 7
 542:	2d c0       	rjmp	.+90     	; 0x59e <vfprintf+0xf6>
 544:	20 ed       	ldi	r18, 0xD0	; 208
 546:	28 0f       	add	r18, r24
 548:	2a 30       	cpi	r18, 0x0A	; 10
 54a:	40 f0       	brcs	.+16     	; 0x55c <vfprintf+0xb4>
 54c:	8e 32       	cpi	r24, 0x2E	; 46
 54e:	b9 f4       	brne	.+46     	; 0x57e <vfprintf+0xd6>
 550:	36 fc       	sbrc	r3, 6
 552:	81 c1       	rjmp	.+770    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 554:	23 2d       	mov	r18, r3
 556:	20 64       	ori	r18, 0x40	; 64
 558:	32 2e       	mov	r3, r18
 55a:	19 c0       	rjmp	.+50     	; 0x58e <vfprintf+0xe6>
 55c:	36 fe       	sbrs	r3, 6
 55e:	06 c0       	rjmp	.+12     	; 0x56c <vfprintf+0xc4>
 560:	8a e0       	ldi	r24, 0x0A	; 10
 562:	98 9e       	mul	r9, r24
 564:	20 0d       	add	r18, r0
 566:	11 24       	eor	r1, r1
 568:	92 2e       	mov	r9, r18
 56a:	11 c0       	rjmp	.+34     	; 0x58e <vfprintf+0xe6>
 56c:	ea e0       	ldi	r30, 0x0A	; 10
 56e:	2e 9e       	mul	r2, r30
 570:	20 0d       	add	r18, r0
 572:	11 24       	eor	r1, r1
 574:	22 2e       	mov	r2, r18
 576:	f3 2d       	mov	r31, r3
 578:	f0 62       	ori	r31, 0x20	; 32
 57a:	3f 2e       	mov	r3, r31
 57c:	08 c0       	rjmp	.+16     	; 0x58e <vfprintf+0xe6>
 57e:	8c 36       	cpi	r24, 0x6C	; 108
 580:	21 f4       	brne	.+8      	; 0x58a <vfprintf+0xe2>
 582:	83 2d       	mov	r24, r3
 584:	80 68       	ori	r24, 0x80	; 128
 586:	38 2e       	mov	r3, r24
 588:	02 c0       	rjmp	.+4      	; 0x58e <vfprintf+0xe6>
 58a:	88 36       	cpi	r24, 0x68	; 104
 58c:	41 f4       	brne	.+16     	; 0x59e <vfprintf+0xf6>
 58e:	f7 01       	movw	r30, r14
 590:	93 fd       	sbrc	r25, 3
 592:	85 91       	lpm	r24, Z+
 594:	93 ff       	sbrs	r25, 3
 596:	81 91       	ld	r24, Z+
 598:	7f 01       	movw	r14, r30
 59a:	81 11       	cpse	r24, r1
 59c:	b3 cf       	rjmp	.-154    	; 0x504 <vfprintf+0x5c>
 59e:	98 2f       	mov	r25, r24
 5a0:	9f 7d       	andi	r25, 0xDF	; 223
 5a2:	95 54       	subi	r25, 0x45	; 69
 5a4:	93 30       	cpi	r25, 0x03	; 3
 5a6:	28 f4       	brcc	.+10     	; 0x5b2 <vfprintf+0x10a>
 5a8:	0c 5f       	subi	r16, 0xFC	; 252
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	9f e3       	ldi	r25, 0x3F	; 63
 5ae:	99 83       	std	Y+1, r25	; 0x01
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <vfprintf+0x124>
 5b2:	83 36       	cpi	r24, 0x63	; 99
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <vfprintf+0x11a>
 5b6:	83 37       	cpi	r24, 0x73	; 115
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <vfprintf+0x12e>
 5ba:	83 35       	cpi	r24, 0x53	; 83
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <vfprintf+0x118>
 5be:	59 c0       	rjmp	.+178    	; 0x672 <vfprintf+0x1ca>
 5c0:	21 c0       	rjmp	.+66     	; 0x604 <vfprintf+0x15c>
 5c2:	f8 01       	movw	r30, r16
 5c4:	80 81       	ld	r24, Z
 5c6:	89 83       	std	Y+1, r24	; 0x01
 5c8:	0e 5f       	subi	r16, 0xFE	; 254
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	88 24       	eor	r8, r8
 5ce:	83 94       	inc	r8
 5d0:	91 2c       	mov	r9, r1
 5d2:	53 01       	movw	r10, r6
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <vfprintf+0x154>
 5d6:	28 01       	movw	r4, r16
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	4f 0e       	add	r4, r31
 5dc:	51 1c       	adc	r5, r1
 5de:	f8 01       	movw	r30, r16
 5e0:	a0 80       	ld	r10, Z
 5e2:	b1 80       	ldd	r11, Z+1	; 0x01
 5e4:	36 fe       	sbrs	r3, 6
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <vfprintf+0x146>
 5e8:	69 2d       	mov	r22, r9
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <vfprintf+0x14a>
 5ee:	6f ef       	ldi	r22, 0xFF	; 255
 5f0:	7f ef       	ldi	r23, 0xFF	; 255
 5f2:	c5 01       	movw	r24, r10
 5f4:	0e 94 40 04 	call	0x880	; 0x880 <strnlen>
 5f8:	4c 01       	movw	r8, r24
 5fa:	82 01       	movw	r16, r4
 5fc:	f3 2d       	mov	r31, r3
 5fe:	ff 77       	andi	r31, 0x7F	; 127
 600:	3f 2e       	mov	r3, r31
 602:	16 c0       	rjmp	.+44     	; 0x630 <vfprintf+0x188>
 604:	28 01       	movw	r4, r16
 606:	22 e0       	ldi	r18, 0x02	; 2
 608:	42 0e       	add	r4, r18
 60a:	51 1c       	adc	r5, r1
 60c:	f8 01       	movw	r30, r16
 60e:	a0 80       	ld	r10, Z
 610:	b1 80       	ldd	r11, Z+1	; 0x01
 612:	36 fe       	sbrs	r3, 6
 614:	03 c0       	rjmp	.+6      	; 0x61c <vfprintf+0x174>
 616:	69 2d       	mov	r22, r9
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0x178>
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	7f ef       	ldi	r23, 0xFF	; 255
 620:	c5 01       	movw	r24, r10
 622:	0e 94 35 04 	call	0x86a	; 0x86a <strnlen_P>
 626:	4c 01       	movw	r8, r24
 628:	f3 2d       	mov	r31, r3
 62a:	f0 68       	ori	r31, 0x80	; 128
 62c:	3f 2e       	mov	r3, r31
 62e:	82 01       	movw	r16, r4
 630:	33 fc       	sbrc	r3, 3
 632:	1b c0       	rjmp	.+54     	; 0x66a <vfprintf+0x1c2>
 634:	82 2d       	mov	r24, r2
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	88 16       	cp	r8, r24
 63a:	99 06       	cpc	r9, r25
 63c:	b0 f4       	brcc	.+44     	; 0x66a <vfprintf+0x1c2>
 63e:	b6 01       	movw	r22, r12
 640:	80 e2       	ldi	r24, 0x20	; 32
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 648:	2a 94       	dec	r2
 64a:	f4 cf       	rjmp	.-24     	; 0x634 <vfprintf+0x18c>
 64c:	f5 01       	movw	r30, r10
 64e:	37 fc       	sbrc	r3, 7
 650:	85 91       	lpm	r24, Z+
 652:	37 fe       	sbrs	r3, 7
 654:	81 91       	ld	r24, Z+
 656:	5f 01       	movw	r10, r30
 658:	b6 01       	movw	r22, r12
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 660:	21 10       	cpse	r2, r1
 662:	2a 94       	dec	r2
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	82 1a       	sub	r8, r18
 668:	91 08       	sbc	r9, r1
 66a:	81 14       	cp	r8, r1
 66c:	91 04       	cpc	r9, r1
 66e:	71 f7       	brne	.-36     	; 0x64c <vfprintf+0x1a4>
 670:	e8 c0       	rjmp	.+464    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 672:	84 36       	cpi	r24, 0x64	; 100
 674:	11 f0       	breq	.+4      	; 0x67a <vfprintf+0x1d2>
 676:	89 36       	cpi	r24, 0x69	; 105
 678:	41 f5       	brne	.+80     	; 0x6ca <vfprintf+0x222>
 67a:	f8 01       	movw	r30, r16
 67c:	37 fe       	sbrs	r3, 7
 67e:	07 c0       	rjmp	.+14     	; 0x68e <vfprintf+0x1e6>
 680:	60 81       	ld	r22, Z
 682:	71 81       	ldd	r23, Z+1	; 0x01
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	0c 5f       	subi	r16, 0xFC	; 252
 68a:	1f 4f       	sbci	r17, 0xFF	; 255
 68c:	08 c0       	rjmp	.+16     	; 0x69e <vfprintf+0x1f6>
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	07 2e       	mov	r0, r23
 694:	00 0c       	add	r0, r0
 696:	88 0b       	sbc	r24, r24
 698:	99 0b       	sbc	r25, r25
 69a:	0e 5f       	subi	r16, 0xFE	; 254
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	f3 2d       	mov	r31, r3
 6a0:	ff 76       	andi	r31, 0x6F	; 111
 6a2:	3f 2e       	mov	r3, r31
 6a4:	97 ff       	sbrs	r25, 7
 6a6:	09 c0       	rjmp	.+18     	; 0x6ba <vfprintf+0x212>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	f0 68       	ori	r31, 0x80	; 128
 6b8:	3f 2e       	mov	r3, r31
 6ba:	2a e0       	ldi	r18, 0x0A	; 10
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	a3 01       	movw	r20, r6
 6c0:	0e 94 87 04 	call	0x90e	; 0x90e <__ultoa_invert>
 6c4:	88 2e       	mov	r8, r24
 6c6:	86 18       	sub	r8, r6
 6c8:	45 c0       	rjmp	.+138    	; 0x754 <vfprintf+0x2ac>
 6ca:	85 37       	cpi	r24, 0x75	; 117
 6cc:	31 f4       	brne	.+12     	; 0x6da <vfprintf+0x232>
 6ce:	23 2d       	mov	r18, r3
 6d0:	2f 7e       	andi	r18, 0xEF	; 239
 6d2:	b2 2e       	mov	r11, r18
 6d4:	2a e0       	ldi	r18, 0x0A	; 10
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	25 c0       	rjmp	.+74     	; 0x724 <vfprintf+0x27c>
 6da:	93 2d       	mov	r25, r3
 6dc:	99 7f       	andi	r25, 0xF9	; 249
 6de:	b9 2e       	mov	r11, r25
 6e0:	8f 36       	cpi	r24, 0x6F	; 111
 6e2:	c1 f0       	breq	.+48     	; 0x714 <vfprintf+0x26c>
 6e4:	18 f4       	brcc	.+6      	; 0x6ec <vfprintf+0x244>
 6e6:	88 35       	cpi	r24, 0x58	; 88
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x260>
 6ea:	b5 c0       	rjmp	.+362    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 6ec:	80 37       	cpi	r24, 0x70	; 112
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <vfprintf+0x24e>
 6f0:	88 37       	cpi	r24, 0x78	; 120
 6f2:	21 f0       	breq	.+8      	; 0x6fc <vfprintf+0x254>
 6f4:	b0 c0       	rjmp	.+352    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 6f6:	e9 2f       	mov	r30, r25
 6f8:	e0 61       	ori	r30, 0x10	; 16
 6fa:	be 2e       	mov	r11, r30
 6fc:	b4 fe       	sbrs	r11, 4
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x272>
 700:	fb 2d       	mov	r31, r11
 702:	f4 60       	ori	r31, 0x04	; 4
 704:	bf 2e       	mov	r11, r31
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x272>
 708:	34 fe       	sbrs	r3, 4
 70a:	0a c0       	rjmp	.+20     	; 0x720 <vfprintf+0x278>
 70c:	29 2f       	mov	r18, r25
 70e:	26 60       	ori	r18, 0x06	; 6
 710:	b2 2e       	mov	r11, r18
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0x278>
 714:	28 e0       	ldi	r18, 0x08	; 8
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	05 c0       	rjmp	.+10     	; 0x724 <vfprintf+0x27c>
 71a:	20 e1       	ldi	r18, 0x10	; 16
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x27c>
 720:	20 e1       	ldi	r18, 0x10	; 16
 722:	32 e0       	ldi	r19, 0x02	; 2
 724:	f8 01       	movw	r30, r16
 726:	b7 fe       	sbrs	r11, 7
 728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x290>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	82 81       	ldd	r24, Z+2	; 0x02
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	0c 5f       	subi	r16, 0xFC	; 252
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x29c>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	a3 01       	movw	r20, r6
 746:	0e 94 87 04 	call	0x90e	; 0x90e <__ultoa_invert>
 74a:	88 2e       	mov	r8, r24
 74c:	86 18       	sub	r8, r6
 74e:	fb 2d       	mov	r31, r11
 750:	ff 77       	andi	r31, 0x7F	; 127
 752:	3f 2e       	mov	r3, r31
 754:	36 fe       	sbrs	r3, 6
 756:	0d c0       	rjmp	.+26     	; 0x772 <vfprintf+0x2ca>
 758:	23 2d       	mov	r18, r3
 75a:	2e 7f       	andi	r18, 0xFE	; 254
 75c:	a2 2e       	mov	r10, r18
 75e:	89 14       	cp	r8, r9
 760:	58 f4       	brcc	.+22     	; 0x778 <vfprintf+0x2d0>
 762:	34 fe       	sbrs	r3, 4
 764:	0b c0       	rjmp	.+22     	; 0x77c <vfprintf+0x2d4>
 766:	32 fc       	sbrc	r3, 2
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x2d4>
 76a:	83 2d       	mov	r24, r3
 76c:	8e 7e       	andi	r24, 0xEE	; 238
 76e:	a8 2e       	mov	r10, r24
 770:	05 c0       	rjmp	.+10     	; 0x77c <vfprintf+0x2d4>
 772:	b8 2c       	mov	r11, r8
 774:	a3 2c       	mov	r10, r3
 776:	03 c0       	rjmp	.+6      	; 0x77e <vfprintf+0x2d6>
 778:	b8 2c       	mov	r11, r8
 77a:	01 c0       	rjmp	.+2      	; 0x77e <vfprintf+0x2d6>
 77c:	b9 2c       	mov	r11, r9
 77e:	a4 fe       	sbrs	r10, 4
 780:	0f c0       	rjmp	.+30     	; 0x7a0 <vfprintf+0x2f8>
 782:	fe 01       	movw	r30, r28
 784:	e8 0d       	add	r30, r8
 786:	f1 1d       	adc	r31, r1
 788:	80 81       	ld	r24, Z
 78a:	80 33       	cpi	r24, 0x30	; 48
 78c:	21 f4       	brne	.+8      	; 0x796 <vfprintf+0x2ee>
 78e:	9a 2d       	mov	r25, r10
 790:	99 7e       	andi	r25, 0xE9	; 233
 792:	a9 2e       	mov	r10, r25
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <vfprintf+0x300>
 796:	a2 fe       	sbrs	r10, 2
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x2fe>
 79a:	b3 94       	inc	r11
 79c:	b3 94       	inc	r11
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <vfprintf+0x300>
 7a0:	8a 2d       	mov	r24, r10
 7a2:	86 78       	andi	r24, 0x86	; 134
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <vfprintf+0x300>
 7a6:	b3 94       	inc	r11
 7a8:	a3 fc       	sbrc	r10, 3
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <vfprintf+0x326>
 7ac:	a0 fe       	sbrs	r10, 0
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x314>
 7b0:	b2 14       	cp	r11, r2
 7b2:	88 f4       	brcc	.+34     	; 0x7d6 <vfprintf+0x32e>
 7b4:	28 0c       	add	r2, r8
 7b6:	92 2c       	mov	r9, r2
 7b8:	9b 18       	sub	r9, r11
 7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <vfprintf+0x330>
 7bc:	b2 14       	cp	r11, r2
 7be:	60 f4       	brcc	.+24     	; 0x7d8 <vfprintf+0x330>
 7c0:	b6 01       	movw	r22, r12
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 7ca:	b3 94       	inc	r11
 7cc:	f7 cf       	rjmp	.-18     	; 0x7bc <vfprintf+0x314>
 7ce:	b2 14       	cp	r11, r2
 7d0:	18 f4       	brcc	.+6      	; 0x7d8 <vfprintf+0x330>
 7d2:	2b 18       	sub	r2, r11
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0x332>
 7d6:	98 2c       	mov	r9, r8
 7d8:	21 2c       	mov	r2, r1
 7da:	a4 fe       	sbrs	r10, 4
 7dc:	10 c0       	rjmp	.+32     	; 0x7fe <vfprintf+0x356>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e3       	ldi	r24, 0x30	; 48
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 7e8:	a2 fe       	sbrs	r10, 2
 7ea:	17 c0       	rjmp	.+46     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ec:	a1 fc       	sbrc	r10, 1
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x34e>
 7f0:	88 e7       	ldi	r24, 0x78	; 120
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x352>
 7f6:	88 e5       	ldi	r24, 0x58	; 88
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b6 01       	movw	r22, r12
 7fc:	0c c0       	rjmp	.+24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fe:	8a 2d       	mov	r24, r10
 800:	86 78       	andi	r24, 0x86	; 134
 802:	59 f0       	breq	.+22     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 804:	a1 fe       	sbrs	r10, 1
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	8b e2       	ldi	r24, 0x2B	; 43
 80a:	01 c0       	rjmp	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	a7 fc       	sbrc	r10, 7
 810:	8d e2       	ldi	r24, 0x2D	; 45
 812:	b6 01       	movw	r22, r12
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 81a:	89 14       	cp	r8, r9
 81c:	38 f4       	brcc	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	b6 01       	movw	r22, r12
 820:	80 e3       	ldi	r24, 0x30	; 48
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 828:	9a 94       	dec	r9
 82a:	f7 cf       	rjmp	.-18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 82c:	8a 94       	dec	r8
 82e:	f3 01       	movw	r30, r6
 830:	e8 0d       	add	r30, r8
 832:	f1 1d       	adc	r31, r1
 834:	80 81       	ld	r24, Z
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 83e:	81 10       	cpse	r8, r1
 840:	f5 cf       	rjmp	.-22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 842:	22 20       	and	r2, r2
 844:	09 f4       	brne	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 846:	42 ce       	rjmp	.-892    	; 0x4cc <vfprintf+0x24>
 848:	b6 01       	movw	r22, r12
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 4b 04 	call	0x896	; 0x896 <fputc>
 852:	2a 94       	dec	r2
 854:	f6 cf       	rjmp	.-20     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 856:	f6 01       	movw	r30, r12
 858:	86 81       	ldd	r24, Z+6	; 0x06
 85a:	97 81       	ldd	r25, Z+7	; 0x07
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	9f ef       	ldi	r25, 0xFF	; 255
 862:	2b 96       	adiw	r28, 0x0b	; 11
 864:	e2 e1       	ldi	r30, 0x12	; 18
 866:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__epilogue_restores__>

0000086a <strnlen_P>:
 86a:	fc 01       	movw	r30, r24
 86c:	05 90       	lpm	r0, Z+
 86e:	61 50       	subi	r22, 0x01	; 1
 870:	70 40       	sbci	r23, 0x00	; 0
 872:	01 10       	cpse	r0, r1
 874:	d8 f7       	brcc	.-10     	; 0x86c <strnlen_P+0x2>
 876:	80 95       	com	r24
 878:	90 95       	com	r25
 87a:	8e 0f       	add	r24, r30
 87c:	9f 1f       	adc	r25, r31
 87e:	08 95       	ret

00000880 <strnlen>:
 880:	fc 01       	movw	r30, r24
 882:	61 50       	subi	r22, 0x01	; 1
 884:	70 40       	sbci	r23, 0x00	; 0
 886:	01 90       	ld	r0, Z+
 888:	01 10       	cpse	r0, r1
 88a:	d8 f7       	brcc	.-10     	; 0x882 <strnlen+0x2>
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	8e 0f       	add	r24, r30
 892:	9f 1f       	adc	r25, r31
 894:	08 95       	ret

00000896 <fputc>:
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	fb 01       	movw	r30, r22
 8a0:	23 81       	ldd	r18, Z+3	; 0x03
 8a2:	21 fd       	sbrc	r18, 1
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <fputc+0x16>
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	9f ef       	ldi	r25, 0xFF	; 255
 8aa:	2c c0       	rjmp	.+88     	; 0x904 <__stack+0x5>
 8ac:	22 ff       	sbrs	r18, 2
 8ae:	16 c0       	rjmp	.+44     	; 0x8dc <fputc+0x46>
 8b0:	46 81       	ldd	r20, Z+6	; 0x06
 8b2:	57 81       	ldd	r21, Z+7	; 0x07
 8b4:	24 81       	ldd	r18, Z+4	; 0x04
 8b6:	35 81       	ldd	r19, Z+5	; 0x05
 8b8:	42 17       	cp	r20, r18
 8ba:	53 07       	cpc	r21, r19
 8bc:	44 f4       	brge	.+16     	; 0x8ce <fputc+0x38>
 8be:	a0 81       	ld	r26, Z
 8c0:	b1 81       	ldd	r27, Z+1	; 0x01
 8c2:	9d 01       	movw	r18, r26
 8c4:	2f 5f       	subi	r18, 0xFF	; 255
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	31 83       	std	Z+1, r19	; 0x01
 8ca:	20 83       	st	Z, r18
 8cc:	8c 93       	st	X, r24
 8ce:	26 81       	ldd	r18, Z+6	; 0x06
 8d0:	37 81       	ldd	r19, Z+7	; 0x07
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	37 83       	std	Z+7, r19	; 0x07
 8d8:	26 83       	std	Z+6, r18	; 0x06
 8da:	14 c0       	rjmp	.+40     	; 0x904 <__stack+0x5>
 8dc:	8b 01       	movw	r16, r22
 8de:	ec 01       	movw	r28, r24
 8e0:	fb 01       	movw	r30, r22
 8e2:	00 84       	ldd	r0, Z+8	; 0x08
 8e4:	f1 85       	ldd	r31, Z+9	; 0x09
 8e6:	e0 2d       	mov	r30, r0
 8e8:	09 95       	icall
 8ea:	89 2b       	or	r24, r25
 8ec:	e1 f6       	brne	.-72     	; 0x8a6 <fputc+0x10>
 8ee:	d8 01       	movw	r26, r16
 8f0:	16 96       	adiw	r26, 0x06	; 6
 8f2:	8d 91       	ld	r24, X+
 8f4:	9c 91       	ld	r25, X
 8f6:	17 97       	sbiw	r26, 0x07	; 7
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	17 96       	adiw	r26, 0x07	; 7
 8fc:	9c 93       	st	X, r25
 8fe:	8e 93       	st	-X, r24
 900:	16 97       	sbiw	r26, 0x06	; 6
 902:	ce 01       	movw	r24, r28
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <__ultoa_invert>:
 90e:	fa 01       	movw	r30, r20
 910:	aa 27       	eor	r26, r26
 912:	28 30       	cpi	r18, 0x08	; 8
 914:	51 f1       	breq	.+84     	; 0x96a <__ultoa_invert+0x5c>
 916:	20 31       	cpi	r18, 0x10	; 16
 918:	81 f1       	breq	.+96     	; 0x97a <__ultoa_invert+0x6c>
 91a:	e8 94       	clt
 91c:	6f 93       	push	r22
 91e:	6e 7f       	andi	r22, 0xFE	; 254
 920:	6e 5f       	subi	r22, 0xFE	; 254
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	af 4f       	sbci	r26, 0xFF	; 255
 92a:	b1 e0       	ldi	r27, 0x01	; 1
 92c:	3e d0       	rcall	.+124    	; 0x9aa <__ultoa_invert+0x9c>
 92e:	b4 e0       	ldi	r27, 0x04	; 4
 930:	3c d0       	rcall	.+120    	; 0x9aa <__ultoa_invert+0x9c>
 932:	67 0f       	add	r22, r23
 934:	78 1f       	adc	r23, r24
 936:	89 1f       	adc	r24, r25
 938:	9a 1f       	adc	r25, r26
 93a:	a1 1d       	adc	r26, r1
 93c:	68 0f       	add	r22, r24
 93e:	79 1f       	adc	r23, r25
 940:	8a 1f       	adc	r24, r26
 942:	91 1d       	adc	r25, r1
 944:	a1 1d       	adc	r26, r1
 946:	6a 0f       	add	r22, r26
 948:	71 1d       	adc	r23, r1
 94a:	81 1d       	adc	r24, r1
 94c:	91 1d       	adc	r25, r1
 94e:	a1 1d       	adc	r26, r1
 950:	20 d0       	rcall	.+64     	; 0x992 <__ultoa_invert+0x84>
 952:	09 f4       	brne	.+2      	; 0x956 <__ultoa_invert+0x48>
 954:	68 94       	set
 956:	3f 91       	pop	r19
 958:	2a e0       	ldi	r18, 0x0A	; 10
 95a:	26 9f       	mul	r18, r22
 95c:	11 24       	eor	r1, r1
 95e:	30 19       	sub	r19, r0
 960:	30 5d       	subi	r19, 0xD0	; 208
 962:	31 93       	st	Z+, r19
 964:	de f6       	brtc	.-74     	; 0x91c <__ultoa_invert+0xe>
 966:	cf 01       	movw	r24, r30
 968:	08 95       	ret
 96a:	46 2f       	mov	r20, r22
 96c:	47 70       	andi	r20, 0x07	; 7
 96e:	40 5d       	subi	r20, 0xD0	; 208
 970:	41 93       	st	Z+, r20
 972:	b3 e0       	ldi	r27, 0x03	; 3
 974:	0f d0       	rcall	.+30     	; 0x994 <__ultoa_invert+0x86>
 976:	c9 f7       	brne	.-14     	; 0x96a <__ultoa_invert+0x5c>
 978:	f6 cf       	rjmp	.-20     	; 0x966 <__ultoa_invert+0x58>
 97a:	46 2f       	mov	r20, r22
 97c:	4f 70       	andi	r20, 0x0F	; 15
 97e:	40 5d       	subi	r20, 0xD0	; 208
 980:	4a 33       	cpi	r20, 0x3A	; 58
 982:	18 f0       	brcs	.+6      	; 0x98a <__ultoa_invert+0x7c>
 984:	49 5d       	subi	r20, 0xD9	; 217
 986:	31 fd       	sbrc	r19, 1
 988:	40 52       	subi	r20, 0x20	; 32
 98a:	41 93       	st	Z+, r20
 98c:	02 d0       	rcall	.+4      	; 0x992 <__ultoa_invert+0x84>
 98e:	a9 f7       	brne	.-22     	; 0x97a <__ultoa_invert+0x6c>
 990:	ea cf       	rjmp	.-44     	; 0x966 <__ultoa_invert+0x58>
 992:	b4 e0       	ldi	r27, 0x04	; 4
 994:	a6 95       	lsr	r26
 996:	97 95       	ror	r25
 998:	87 95       	ror	r24
 99a:	77 95       	ror	r23
 99c:	67 95       	ror	r22
 99e:	ba 95       	dec	r27
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__ultoa_invert+0x86>
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	61 05       	cpc	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	08 95       	ret
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	0a 2e       	mov	r0, r26
 9b0:	06 94       	lsr	r0
 9b2:	57 95       	ror	r21
 9b4:	47 95       	ror	r20
 9b6:	37 95       	ror	r19
 9b8:	27 95       	ror	r18
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0xa2>
 9be:	62 0f       	add	r22, r18
 9c0:	73 1f       	adc	r23, r19
 9c2:	84 1f       	adc	r24, r20
 9c4:	95 1f       	adc	r25, r21
 9c6:	a0 1d       	adc	r26, r0
 9c8:	08 95       	ret

000009ca <__prologue_saves__>:
 9ca:	2f 92       	push	r2
 9cc:	3f 92       	push	r3
 9ce:	4f 92       	push	r4
 9d0:	5f 92       	push	r5
 9d2:	6f 92       	push	r6
 9d4:	7f 92       	push	r7
 9d6:	8f 92       	push	r8
 9d8:	9f 92       	push	r9
 9da:	af 92       	push	r10
 9dc:	bf 92       	push	r11
 9de:	cf 92       	push	r12
 9e0:	df 92       	push	r13
 9e2:	ef 92       	push	r14
 9e4:	ff 92       	push	r15
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	cd b7       	in	r28, 0x3d	; 61
 9f0:	de b7       	in	r29, 0x3e	; 62
 9f2:	ca 1b       	sub	r28, r26
 9f4:	db 0b       	sbc	r29, r27
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
 a00:	09 94       	ijmp

00000a02 <__epilogue_restores__>:
 a02:	2a 88       	ldd	r2, Y+18	; 0x12
 a04:	39 88       	ldd	r3, Y+17	; 0x11
 a06:	48 88       	ldd	r4, Y+16	; 0x10
 a08:	5f 84       	ldd	r5, Y+15	; 0x0f
 a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a10:	9b 84       	ldd	r9, Y+11	; 0x0b
 a12:	aa 84       	ldd	r10, Y+10	; 0x0a
 a14:	b9 84       	ldd	r11, Y+9	; 0x09
 a16:	c8 84       	ldd	r12, Y+8	; 0x08
 a18:	df 80       	ldd	r13, Y+7	; 0x07
 a1a:	ee 80       	ldd	r14, Y+6	; 0x06
 a1c:	fd 80       	ldd	r15, Y+5	; 0x05
 a1e:	0c 81       	ldd	r16, Y+4	; 0x04
 a20:	1b 81       	ldd	r17, Y+3	; 0x03
 a22:	aa 81       	ldd	r26, Y+2	; 0x02
 a24:	b9 81       	ldd	r27, Y+1	; 0x01
 a26:	ce 0f       	add	r28, r30
 a28:	d1 1d       	adc	r29, r1
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	ed 01       	movw	r28, r26
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
