
temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001276  0000130a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  00800162  00800162  0000136c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df9  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001170  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00005158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d5  00000000  00000000  00005638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136e  00000000  00000000  00005e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000717b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_3>
      10:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e7       	ldi	r30, 0x76	; 118
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 36       	cpi	r26, 0x62	; 98
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e6       	ldi	r26, 0x62	; 98
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3c       	cpi	r26, 0xC5	; 197
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <main>
      9e:	0c 94 39 09 	jmp	0x1272	; 0x1272 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	6b 01       	movw	r12, r22
      b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 7c       	andi	r24, 0xCF	; 207
      b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
      b8:	44 30       	cpi	r20, 0x04	; 4
      ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
      bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
      c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
      c4:	40 31       	cpi	r20, 0x10	; 16
      c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
      c8:	40 34       	cpi	r20, 0x40	; 64
      ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
      cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
      ce:	e9 eb       	ldi	r30, 0xB9	; 185
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8c 7f       	andi	r24, 0xFC	; 252
      d6:	80 83       	st	Z, r24
		break;
      d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
      e4:	80 81       	ld	r24, Z
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	80 83       	st	Z, r24
		break;
      ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
      ec:	e9 eb       	ldi	r30, 0xB9	; 185
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
		break;
      fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
      fe:	e9 eb       	ldi	r30, 0xB9	; 185
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	83 60       	ori	r24, 0x03	; 3
     106:	80 83       	st	Z, r24
		break;
     108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8c 7f       	andi	r24, 0xFC	; 252
     112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	74 e2       	ldi	r23, 0x24	; 36
     118:	84 ef       	ldi	r24, 0xF4	; 244
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	a7 01       	movw	r20, r14
     11e:	96 01       	movw	r18, r12
     120:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__udivmodsi4>
     124:	ca 01       	movw	r24, r20
     126:	b9 01       	movw	r22, r18
     128:	60 51       	subi	r22, 0x10	; 16
     12a:	71 09       	sbc	r23, r1
     12c:	81 09       	sbc	r24, r1
     12e:	91 09       	sbc	r25, r1
     130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     134:	23 70       	andi	r18, 0x03	; 3
     136:	42 e0       	ldi	r20, 0x02	; 2
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	fa 01       	movw	r30, r20
     13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
     13e:	ee 0f       	add	r30, r30
     140:	ff 1f       	adc	r31, r31
     142:	2a 95       	dec	r18
     144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
     146:	9f 01       	movw	r18, r30
     148:	03 2e       	mov	r0, r19
     14a:	00 0c       	add	r0, r0
     14c:	44 0b       	sbc	r20, r20
     14e:	55 0b       	sbc	r21, r21
     150:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__udivmodsi4>
     154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24
}
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	df 90       	pop	r13
     168:	cf 90       	pop	r12
     16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
     16c:	84 ea       	ldi	r24, 0xA4	; 164
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
     172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     176:	88 23       	and	r24, r24
     178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
     184:	80 31       	cpi	r24, 0x10	; 16
     186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	08 95       	ret
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
     190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
     192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
     194:	84 e9       	ldi	r24, 0x94	; 148
     196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
     19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19e:	84 fd       	sbrc	r24, 4
     1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
     1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
     1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
     1a8:	84 e8       	ldi	r24, 0x84	; 132
     1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
     1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b2:	88 23       	and	r24, r24
     1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
     1bc:	88 31       	cpi	r24, 0x18	; 24
     1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
     1c0:	88 32       	cpi	r24, 0x28	; 40
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
     1c4:	80 34       	cpi	r24, 0x40	; 64
     1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
     1d0:	80 e0       	ldi	r24, 0x00	; 0
}
     1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
     1d4:	dc 01       	movw	r26, r24
	if (ack) {
     1d6:	66 23       	and	r22, r22
     1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
     1da:	ec eb       	ldi	r30, 0xBC	; 188
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	90 81       	ld	r25, Z
     1e0:	90 64       	ori	r25, 0x40	; 64
     1e2:	90 83       	st	Z, r25
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
     1e6:	ec eb       	ldi	r30, 0xBC	; 188
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	9f 7b       	andi	r25, 0xBF	; 191
     1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	90 81       	ld	r25, Z
     1f6:	90 68       	ori	r25, 0x80	; 128
     1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
     1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1fe:	99 23       	and	r25, r25
     200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
     208:	98 35       	cpi	r25, 0x58	; 88
     20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
     20c:	90 35       	cpi	r25, 0x50	; 80
     20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
     210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
     21a:	89 2f       	mov	r24, r25
	}
}
     21c:	08 95       	ret

0000021e <read_from_slave>:

uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     21e:	94 ea       	ldi	r25, 0xA4	; 164
     220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     228:	99 23       	and	r25, r25
     22a:	e4 f7       	brge	.-8      	; 0x224 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     22c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     230:	98 7f       	andi	r25, 0xF8	; 248
     232:	98 30       	cpi	r25, 0x08	; 8
     234:	99 f5       	brne	.+102    	; 0x29c <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     242:	84 e8       	ldi	r24, 0x84	; 132
     244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     24c:	88 23       	and	r24, r24
     24e:	e4 f7       	brge	.-8      	; 0x248 <read_from_slave+0x2a>
     250:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
     252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	80 34       	cpi	r24, 0x40	; 64
     25a:	21 f0       	breq	.+8      	; 0x264 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
     25c:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
     264:	84 e8       	ldi	r24, 0x84	; 132
     266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     26a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     26e:	88 23       	and	r24, r24
     270:	e4 f7       	brge	.-8      	; 0x26a <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
     272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     276:	88 7f       	andi	r24, 0xF8	; 248
     278:	88 35       	cpi	r24, 0x58	; 88
     27a:	49 f0       	breq	.+18     	; 0x28e <read_from_slave+0x70>
     27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     280:	88 7f       	andi	r24, 0xF8	; 248
     282:	80 35       	cpi	r24, 0x50	; 80
     284:	21 f0       	breq	.+8      	; 0x28e <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
     286:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error en la recepción
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
     28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     292:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
     294:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
	return 0; // Éxito
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     29c:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
     29e:	08 95       	ret

000002a0 <send_to_slave>:

void send_to_slave(uint8_t slave_address, uint8_t data) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	d8 2f       	mov	r29, r24
     2a6:	c6 2f       	mov	r28, r22
	// Inicia la comunicación I2C
	I2C_Master_Start();
     2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>

	// Envía la dirección del esclavo con el bit de escritura
	I2C_Master_Write(slave_address << 1);
     2ac:	8d 2f       	mov	r24, r29
     2ae:	88 0f       	add	r24, r24
     2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Envía el dato
	I2C_Master_Write(data);
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     2ba:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
     2c4:	80 ff       	sbrs	r24, 0
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_port+0xc>
     2c8:	9b b1       	in	r25, 0x0b	; 11
     2ca:	94 60       	ori	r25, 0x04	; 4
     2cc:	9b b9       	out	0x0b, r25	; 11
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_port+0x12>
     2d0:	9b b1       	in	r25, 0x0b	; 11
     2d2:	9b 7f       	andi	r25, 0xFB	; 251
     2d4:	9b b9       	out	0x0b, r25	; 11
     2d6:	81 ff       	sbrs	r24, 1
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_port+0x1e>
     2da:	9b b1       	in	r25, 0x0b	; 11
     2dc:	98 60       	ori	r25, 0x08	; 8
     2de:	9b b9       	out	0x0b, r25	; 11
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_port+0x24>
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	97 7f       	andi	r25, 0xF7	; 247
     2e6:	9b b9       	out	0x0b, r25	; 11
     2e8:	82 ff       	sbrs	r24, 2
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCD_port+0x30>
     2ec:	9b b1       	in	r25, 0x0b	; 11
     2ee:	90 61       	ori	r25, 0x10	; 16
     2f0:	9b b9       	out	0x0b, r25	; 11
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_port+0x36>
     2f4:	9b b1       	in	r25, 0x0b	; 11
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	9b b9       	out	0x0b, r25	; 11
     2fa:	83 ff       	sbrs	r24, 3
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <LCD_port+0x42>
     2fe:	9b b1       	in	r25, 0x0b	; 11
     300:	90 62       	ori	r25, 0x20	; 32
     302:	9b b9       	out	0x0b, r25	; 11
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_port+0x48>
     306:	9b b1       	in	r25, 0x0b	; 11
     308:	9f 7d       	andi	r25, 0xDF	; 223
     30a:	9b b9       	out	0x0b, r25	; 11
     30c:	84 ff       	sbrs	r24, 4
     30e:	04 c0       	rjmp	.+8      	; 0x318 <LCD_port+0x54>
     310:	9b b1       	in	r25, 0x0b	; 11
     312:	90 64       	ori	r25, 0x40	; 64
     314:	9b b9       	out	0x0b, r25	; 11
     316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_port+0x5a>
     318:	9b b1       	in	r25, 0x0b	; 11
     31a:	9f 7b       	andi	r25, 0xBF	; 191
     31c:	9b b9       	out	0x0b, r25	; 11
     31e:	85 ff       	sbrs	r24, 5
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_port+0x66>
     322:	9b b1       	in	r25, 0x0b	; 11
     324:	90 68       	ori	r25, 0x80	; 128
     326:	9b b9       	out	0x0b, r25	; 11
     328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_port+0x6c>
     32a:	9b b1       	in	r25, 0x0b	; 11
     32c:	9f 77       	andi	r25, 0x7F	; 127
     32e:	9b b9       	out	0x0b, r25	; 11
     330:	86 ff       	sbrs	r24, 6
     332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_port+0x78>
     334:	95 b1       	in	r25, 0x05	; 5
     336:	91 60       	ori	r25, 0x01	; 1
     338:	95 b9       	out	0x05, r25	; 5
     33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_port+0x7e>
     33c:	95 b1       	in	r25, 0x05	; 5
     33e:	9e 7f       	andi	r25, 0xFE	; 254
     340:	95 b9       	out	0x05, r25	; 5
     342:	88 23       	and	r24, r24
     344:	24 f4       	brge	.+8      	; 0x34e <LCD_port+0x8a>
     346:	85 b1       	in	r24, 0x05	; 5
     348:	82 60       	ori	r24, 0x02	; 2
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	08 95       	ret
     34e:	85 b1       	in	r24, 0x05	; 5
     350:	8d 7f       	andi	r24, 0xFD	; 253
     352:	85 b9       	out	0x05, r24	; 5
     354:	08 95       	ret

00000356 <LCD_CMD>:
     356:	95 b1       	in	r25, 0x05	; 5
     358:	9b 7f       	andi	r25, 0xFB	; 251
     35a:	95 b9       	out	0x05, r25	; 5
     35c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     360:	85 b1       	in	r24, 0x05	; 5
     362:	88 60       	ori	r24, 0x08	; 8
     364:	85 b9       	out	0x05, r24	; 5
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_CMD+0x12>
     36c:	00 00       	nop
     36e:	85 b1       	in	r24, 0x05	; 5
     370:	87 7f       	andi	r24, 0xF7	; 247
     372:	85 b9       	out	0x05, r24	; 5
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	9f e1       	ldi	r25, 0x1F	; 31
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_CMD+0x22>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_CMD+0x28>
     37e:	00 00       	nop
     380:	08 95       	ret

00000382 <initLCD8bits>:
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	8c 6f       	ori	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
     388:	1b b8       	out	0x0b, r1	; 11
     38a:	84 b1       	in	r24, 0x04	; 4
     38c:	8f 60       	ori	r24, 0x0F	; 15
     38e:	84 b9       	out	0x04, r24	; 4
     390:	15 b8       	out	0x05, r1	; 5
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	89 ef       	ldi	r24, 0xF9	; 249
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <initLCD8bits+0x16>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <initLCD8bits+0x20>
     3a2:	00 00       	nop
     3a4:	88 e3       	ldi	r24, 0x38	; 56
     3a6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3aa:	8f e1       	ldi	r24, 0x1F	; 31
     3ac:	9e e4       	ldi	r25, 0x4E	; 78
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8bits+0x2c>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8bits+0x32>
     3b4:	00 00       	nop
     3b6:	88 e3       	ldi	r24, 0x38	; 56
     3b8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <initLCD8bits+0x3e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <initLCD8bits+0x44>
     3c6:	00 00       	nop
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ce:	8f e9       	ldi	r24, 0x9F	; 159
     3d0:	9f e0       	ldi	r25, 0x0F	; 15
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <initLCD8bits+0x50>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <initLCD8bits+0x56>
     3d8:	00 00       	nop
     3da:	88 e3       	ldi	r24, 0x38	; 56
     3dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	9f e1       	ldi	r25, 0x1F	; 31
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD8bits+0x6e>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <initLCD8bits+0x74>
     3f6:	00 00       	nop
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3fe:	08 95       	ret

00000400 <LCD_WriteCaracter>:
     400:	95 b1       	in	r25, 0x05	; 5
     402:	94 60       	ori	r25, 0x04	; 4
     404:	95 b9       	out	0x05, r25	; 5
     406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	85 b9       	out	0x05, r24	; 5
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	8a 95       	dec	r24
     414:	f1 f7       	brne	.-4      	; 0x412 <LCD_WriteCaracter+0x12>
     416:	00 00       	nop
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	87 7f       	andi	r24, 0xF7	; 247
     41c:	85 b9       	out	0x05, r24	; 5
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	9f e1       	ldi	r25, 0x1F	; 31
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <LCD_WriteCaracter+0x22>
     426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_WriteCaracter+0x28>
     428:	00 00       	nop
     42a:	08 95       	ret

0000042c <LCD_Write_String>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
     43c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteCaracter>
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	f8 01       	movw	r30, r16
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	80 81       	ld	r24, Z
     44a:	81 11       	cpse	r24, r1
     44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
     458:	cf 93       	push	r28
	char temp;
	if (f == 1) {
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	31 f4       	brne	.+12     	; 0x46a <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
     45e:	cf e7       	ldi	r28, 0x7F	; 127
     460:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     468:	07 c0       	rjmp	.+14     	; 0x478 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
     46a:	62 30       	cpi	r22, 0x02	; 2
     46c:	29 f4       	brne	.+10     	; 0x478 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
     46e:	cf eb       	ldi	r28, 0xBF	; 191
     470:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     472:	8c 2f       	mov	r24, r28
     474:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
	}
	LCD_CMD(temp);
     478:	8c 2f       	mov	r24, r28
     47a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
}
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <portonUltra>:
		_delay_ms(300);
	}
}

void portonUltra() {
	uint8_t result = read_from_slave(SLAVE1, &abierto);
     482:	63 eb       	ldi	r22, 0xB3	; 179
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
	int abierto2 = (int)(abierto);
     48c:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <abierto>
	if (result == 0) {
     490:	81 11       	cpse	r24, r1
     492:	16 c0       	rjmp	.+44     	; 0x4c0 <portonUltra+0x3e>
		if (abierto2 == 1) {
     494:	91 30       	cpi	r25, 0x01	; 1
     496:	51 f4       	brne	.+20     	; 0x4ac <portonUltra+0x2a>
			strcpy(buffer2, "open");
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	e0 e0       	ldi	r30, 0x00	; 0
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	a2 ea       	ldi	r26, 0xA2	; 162
     4a0:	b1 e0       	ldi	r27, 0x01	; 1
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <portonUltra+0x20>
     4aa:	08 95       	ret
			} else {
			strcpy(buffer2, "close");
     4ac:	86 e0       	ldi	r24, 0x06	; 6
     4ae:	e5 e0       	ldi	r30, 0x05	; 5
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	a2 ea       	ldi	r26, 0xA2	; 162
     4b4:	b1 e0       	ldi	r27, 0x01	; 1
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	8a 95       	dec	r24
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <portonUltra+0x34>
     4be:	08 95       	ret
		}
		} else {
		strcpy(buffer2, "error");
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	eb e0       	ldi	r30, 0x0B	; 11
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	a2 ea       	ldi	r26, 0xA2	; 162
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	01 90       	ld	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	8a 95       	dec	r24
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <portonUltra+0x48>
     4d2:	08 95       	ret

000004d4 <diax>:
	}
}

void diax(){
	uint8_t result = read_from_slave(SLAVE2, &day);
     4d4:	64 eb       	ldi	r22, 0xB4	; 180
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
	int day2 = (int)(day);
     4de:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <day>
	if (result == 0) {
     4e2:	81 11       	cpse	r24, r1
     4e4:	15 c0       	rjmp	.+42     	; 0x510 <diax+0x3c>
		if (day2 == 1) {
     4e6:	91 30       	cpi	r25, 0x01	; 1
     4e8:	59 f4       	brne	.+22     	; 0x500 <diax+0x2c>
			strcpy(buffer1, "off");
     4ea:	e5 eb       	ldi	r30, 0xB5	; 181
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	8f e6       	ldi	r24, 0x6F	; 111
     4f0:	96 e6       	ldi	r25, 0x66	; 102
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	80 83       	st	Z, r24
     4f6:	86 e6       	ldi	r24, 0x66	; 102
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	93 83       	std	Z+3, r25	; 0x03
     4fc:	82 83       	std	Z+2, r24	; 0x02
     4fe:	08 95       	ret
			} else {
			strcpy(buffer1, "on");
     500:	e5 eb       	ldi	r30, 0xB5	; 181
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	8f e6       	ldi	r24, 0x6F	; 111
     506:	9e e6       	ldi	r25, 0x6E	; 110
     508:	91 83       	std	Z+1, r25	; 0x01
     50a:	80 83       	st	Z, r24
     50c:	12 82       	std	Z+2, r1	; 0x02
     50e:	08 95       	ret
		}
		} else {
		strcpy(buffer1, "error");
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	eb e0       	ldi	r30, 0x0B	; 11
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	a5 eb       	ldi	r26, 0xB5	; 181
     518:	b2 e0       	ldi	r27, 0x02	; 2
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	8a 95       	dec	r24
     520:	e1 f7       	brne	.-8      	; 0x51a <diax+0x46>
     522:	08 95       	ret

00000524 <read_temperature>:

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
     52e:	8b 01       	movw	r16, r22
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     530:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     534:	81 11       	cpse	r24, r1
     536:	22 c0       	rjmp	.+68     	; 0x57c <read_temperature+0x58>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     538:	80 e9       	ldi	r24, 0x90	; 144
     53a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     53e:	81 11       	cpse	r24, r1
     540:	1f c0       	rjmp	.+62     	; 0x580 <read_temperature+0x5c>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     542:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     546:	81 11       	cpse	r24, r1
     548:	1d c0       	rjmp	.+58     	; 0x584 <read_temperature+0x60>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     54a:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     54e:	81 11       	cpse	r24, r1
     550:	1b c0       	rjmp	.+54     	; 0x588 <read_temperature+0x64>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     552:	81 e9       	ldi	r24, 0x91	; 145
     554:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     558:	81 11       	cpse	r24, r1
     55a:	18 c0       	rjmp	.+48     	; 0x58c <read_temperature+0x68>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	ce 01       	movw	r24, r28
     560:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     564:	81 11       	cpse	r24, r1
     566:	14 c0       	rjmp	.+40     	; 0x590 <read_temperature+0x6c>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     570:	c8 2f       	mov	r28, r24
     572:	81 11       	cpse	r24, r1
     574:	0f c0       	rjmp	.+30     	; 0x594 <read_temperature+0x70>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     576:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

	return 0; // Éxito
     57a:	0d c0       	rjmp	.+26     	; 0x596 <read_temperature+0x72>
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     57c:	c1 e0       	ldi	r28, 0x01	; 1
     57e:	0b c0       	rjmp	.+22     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     580:	c1 e0       	ldi	r28, 0x01	; 1
     582:	09 c0       	rjmp	.+18     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     584:	c1 e0       	ldi	r28, 0x01	; 1
     586:	07 c0       	rjmp	.+14     	; 0x596 <read_temperature+0x72>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     588:	c1 e0       	ldi	r28, 0x01	; 1
     58a:	05 c0       	rjmp	.+10     	; 0x596 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     58c:	c1 e0       	ldi	r28, 0x01	; 1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <read_temperature+0x72>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     590:	c1 e0       	ldi	r28, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <read_temperature+0x72>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     594:	c1 e0       	ldi	r28, 0x01	; 1

	// Detiene la comunicación I2C
	I2C_Master_Stop();

	return 0; // Éxito
}
     596:	8c 2f       	mov	r24, r28
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret

000005a2 <sensorTemp>:
		} else {
		strcpy(buffer1, "error");
	}
}

void sensorTemp() {
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <sensorTemp+0x6>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_high = 0;
     5ac:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp_low = 0;
     5ae:	1a 82       	std	Y+2, r1	; 0x02

	// Lee la temperatura del sensor LM75
	if (read_temperature(&temp_high, &temp_low) == 0) {
     5b0:	be 01       	movw	r22, r28
     5b2:	6e 5f       	subi	r22, 0xFE	; 254
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	0e 94 92 02 	call	0x524	; 0x524 <read_temperature>
     5be:	81 11       	cpse	r24, r1
     5c0:	4b c0       	rjmp	.+150    	; 0x658 <sensorTemp+0xb6>
		// Convierte los datos del sensor a una cadena de texto
		temp_value = (temp_high << 8) | temp_low;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	98 2f       	mov	r25, r24
     5c8:	88 27       	eor	r24, r24
     5ca:	2a 81       	ldd	r18, Y+2	; 0x02
     5cc:	82 2b       	or	r24, r18
     5ce:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <temp_value+0x1>
     5d2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <temp_value>
		snprintf(buffer, sizeof(buffer), "Temperature: %d C \n\r", temp_value / 256);
     5d6:	9c 01       	movw	r18, r24
     5d8:	33 23       	and	r19, r19
     5da:	14 f4       	brge	.+4      	; 0x5e0 <sensorTemp+0x3e>
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	83 2f       	mov	r24, r19
     5e2:	88 0f       	add	r24, r24
     5e4:	88 0b       	sbc	r24, r24
     5e6:	8f 93       	push	r24
     5e8:	3f 93       	push	r19
     5ea:	81 e1       	ldi	r24, 0x11	; 17
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1f 92       	push	r1
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	8f 93       	push	r24
     5f8:	83 e3       	ldi	r24, 0x33	; 51
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 1f 06 	call	0xc3e	; 0xc3e <snprintf>

		// Convierte la temperatura a grados Celsius
		int tempCelsius = (int)(temp_value / 256);
     604:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <temp_value>
     608:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <temp_value+0x1>
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	99 23       	and	r25, r25
     618:	14 f4       	brge	.+4      	; 0x61e <sensorTemp+0x7c>
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	29 2f       	mov	r18, r25
     620:	39 2f       	mov	r19, r25
     622:	33 0f       	add	r19, r19
     624:	33 0b       	sbc	r19, r19

		// Corrige la comparación para verificar si la temperatura es mayor a 20
		if (  estadoVent == 0 &&  tempCelsius > 24 ) {
     626:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <estadoVent>
     62a:	81 11       	cpse	r24, r1
     62c:	0a c0       	rjmp	.+20     	; 0x642 <sensorTemp+0xa0>
     62e:	29 31       	cpi	r18, 0x19	; 25
     630:	31 05       	cpc	r19, r1
     632:	3c f0       	brlt	.+14     	; 0x642 <sensorTemp+0xa0>
			PORTC |= (1 << PORTC2); // Enciende el LED si la temperatura es mayor a 20
     634:	88 b1       	in	r24, 0x08	; 8
     636:	84 60       	ori	r24, 0x04	; 4
     638:	88 b9       	out	0x08, r24	; 8
			ventilador = 1;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ventilador>
     640:	14 c0       	rjmp	.+40     	; 0x66a <sensorTemp+0xc8>
			} else if( estadoVent == 0 &&  tempCelsius < 24) {
     642:	81 11       	cpse	r24, r1
     644:	12 c0       	rjmp	.+36     	; 0x66a <sensorTemp+0xc8>
     646:	28 31       	cpi	r18, 0x18	; 24
     648:	31 05       	cpc	r19, r1
     64a:	7c f4       	brge	.+30     	; 0x66a <sensorTemp+0xc8>
			PORTC &= ~(1 << PORTC2); // Apaga el LED si la temperatura es 20 o menor
     64c:	88 b1       	in	r24, 0x08	; 8
     64e:	8b 7f       	andi	r24, 0xFB	; 251
     650:	88 b9       	out	0x08, r24	; 8
			ventilador =0;
     652:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <ventilador>
     656:	09 c0       	rjmp	.+18     	; 0x66a <sensorTemp+0xc8>
		}
		} else {
		// Si hubo un error en la lectura, formatea un mensaje de error
		snprintf(buffer, sizeof(buffer), "Error reading temperature");
     658:	8a e1       	ldi	r24, 0x1A	; 26
     65a:	e6 e2       	ldi	r30, 0x26	; 38
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	a3 e3       	ldi	r26, 0x33	; 51
     660:	b2 e0       	ldi	r27, 0x02	; 2
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	8a 95       	dec	r24
     668:	e1 f7       	brne	.-8      	; 0x662 <sensorTemp+0xc0>
	}

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <LCDcasa>:
	return 0; // Éxito
}

void LCDcasa() {
	// Muestra la temperatura
	snprintf(buffer, sizeof(buffer), "%d C", temp_value / 256);
     674:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <temp_value>
     678:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <temp_value+0x1>
     67c:	99 23       	and	r25, r25
     67e:	14 f4       	brge	.+4      	; 0x684 <LCDcasa+0x10>
     680:	81 50       	subi	r24, 0x01	; 1
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	89 2f       	mov	r24, r25
     686:	88 0f       	add	r24, r24
     688:	88 0b       	sbc	r24, r24
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	80 e4       	ldi	r24, 0x40	; 64
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	1f 92       	push	r1
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	8f 93       	push	r24
     69c:	83 e3       	ldi	r24, 0x33	; 51
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 1f 06 	call	0xc3e	; 0xc3e <snprintf>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("      "); // Limpia la línea
     6b0:	8d e4       	ldi	r24, 0x4D	; 77
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer); // Muestra el valor
     6c0:	83 e3       	ldi	r24, 0x33	; 51
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 1); // Posiciona el cursor nuevamente
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("temp:"); // Muestra la etiqueta
     6d0:	85 e4       	ldi	r24, 0x45	; 69
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

	// Muestra el estado del portón
	LCD_Set_Cursor(7, 2); // Posiciona el cursor en la segunda línea del LCD
     6d8:	62 e0       	ldi	r22, 0x02	; 2
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     6e0:	8b e4       	ldi	r24, 0x4B	; 75
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 2); // Posiciona el cursor nuevamente
     6e8:	62 e0       	ldi	r22, 0x02	; 2
     6ea:	87 e0       	ldi	r24, 0x07	; 7
     6ec:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer2); // Muestra el estado del portón
     6f0:	82 ea       	ldi	r24, 0xA2	; 162
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 1); // Posiciona el cursor nuevamente
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Gate:"); // Muestra la etiqueta
     700:	84 e5       	ldi	r24, 0x54	; 84
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
	// Muestra el estado del dia
	LCD_Set_Cursor(13, 2); // Posiciona el cursor en la segunda línea del LCD
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	8d e0       	ldi	r24, 0x0D	; 13
     70c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     710:	8b e4       	ldi	r24, 0x4B	; 75
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(13, 2); // Posiciona el cursor nuevamente
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	8d e0       	ldi	r24, 0x0D	; 13
     71c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer1); // Muestra el estado del portón
     720:	85 eb       	ldi	r24, 0xB5	; 181
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(13, 1); // Posiciona el cursor nuevamente
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	8d e0       	ldi	r24, 0x0D	; 13
     72c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Luz:"); // Muestra la etiqueta
     730:	8a e5       	ldi	r24, 0x5A	; 90
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
}
     738:	8d b7       	in	r24, 0x3d	; 61
     73a:	9e b7       	in	r25, 0x3e	; 62
     73c:	08 96       	adiw	r24, 0x08	; 8
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	9e bf       	out	0x3e, r25	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	8d bf       	out	0x3d, r24	; 61
     748:	08 95       	ret

0000074a <uartCasa>:

void uartCasa() {
	if (UART_available()) {
     74a:	0e 94 ab 05 	call	0xb56	; 0xb56 <UART_available>
     74e:	89 2b       	or	r24, r25
     750:	09 f4       	brne	.+2      	; 0x754 <uartCasa+0xa>
     752:	75 c0       	rjmp	.+234    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		char comando = UART_receive();
     754:	0e 94 b5 05 	call	0xb6a	; 0xb6a <UART_receive>
		//UART_send(comando);
		//UART_send_string("\r\n");

		if (estadoVent == 1 && comando == 'm') {
     758:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <estadoVent>
     75c:	91 30       	cpi	r25, 0x01	; 1
     75e:	81 f4       	brne	.+32     	; 0x780 <uartCasa+0x36>
     760:	8d 36       	cpi	r24, 0x6D	; 109
     762:	71 f4       	brne	.+28     	; 0x780 <uartCasa+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	81 ee       	ldi	r24, 0xE1	; 225
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <uartCasa+0x20>
     772:	00 c0       	rjmp	.+0      	; 0x774 <uartCasa+0x2a>
     774:	00 00       	nop
			_delay_ms(100);
			//UART_send_string("\nCambiando el estado del portón...\r\n");
			send_to_slave(SLAVE1, 'm');
     776:	6d e6       	ldi	r22, 0x6D	; 109
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     77e:	08 95       	ret
		}
		else if (estadoVent == 1 && comando == 'n') {
     780:	91 30       	cpi	r25, 0x01	; 1
     782:	39 f4       	brne	.+14     	; 0x792 <uartCasa+0x48>
     784:	8e 36       	cpi	r24, 0x6E	; 110
     786:	29 f4       	brne	.+10     	; 0x792 <uartCasa+0x48>
			//UART_send_string("\nCambiando el estado del día...\r\n");
			send_to_slave(SLAVE2, 'n');
     788:	6e e6       	ldi	r22, 0x6E	; 110
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     790:	08 95       	ret
		}
		else if (estadoVent == 1 && comando == 'o') {
     792:	91 30       	cpi	r25, 0x01	; 1
     794:	d1 f4       	brne	.+52     	; 0x7ca <uartCasa+0x80>
     796:	8f 36       	cpi	r24, 0x6F	; 111
     798:	c1 f4       	brne	.+48     	; 0x7ca <uartCasa+0x80>
			//UART_send_string("\nCambiando el estado del ventilador...\r\n");
			ventilador = !ventilador;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <ventilador>
     7a0:	21 11       	cpse	r18, r1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ventilador>
			if (ventilador == 1 && estadoVent == 1) {
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <uartCasa+0x6e>
     7ac:	91 30       	cpi	r25, 0x01	; 1
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <uartCasa+0x6e>
				PORTC |= (1 << PORTC2); // Enciende el LED si el ventilador está encendido
     7b0:	88 b1       	in	r24, 0x08	; 8
     7b2:	84 60       	ori	r24, 0x04	; 4
     7b4:	88 b9       	out	0x08, r24	; 8
     7b6:	08 95       	ret
				} else if(ventilador == 0 && estadoVent == 1){
     7b8:	81 11       	cpse	r24, r1
     7ba:	41 c0       	rjmp	.+130    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     7bc:	91 30       	cpi	r25, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <uartCasa+0x78>
     7c0:	3e c0       	rjmp	.+124    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
				PORTC &= ~(1 << PORTC2); // Apaga el LED si el ventilador está apagado
     7c2:	88 b1       	in	r24, 0x08	; 8
     7c4:	8b 7f       	andi	r24, 0xFB	; 251
     7c6:	88 b9       	out	0x08, r24	; 8
     7c8:	08 95       	ret
			}
		}
		else if (comando == 'x') {
     7ca:	88 37       	cpi	r24, 0x78	; 120
     7cc:	71 f4       	brne	.+28     	; 0x7ea <uartCasa+0xa0>
			// Cambia al estado automático (0), manual (1);
			estadoVent = !estadoVent;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	91 11       	cpse	r25, r1
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <estadoVent>
			send_to_slave(SLAVE1,'x');
     7d8:	68 e7       	ldi	r22, 0x78	; 120
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			send_to_slave(SLAVE2,'x');
     7e0:	68 e7       	ldi	r22, 0x78	; 120
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     7e8:	08 95       	ret
			
		}
		else if (comando == 'p') {
     7ea:	80 37       	cpi	r24, 0x70	; 112
     7ec:	29 f4       	brne	.+10     	; 0x7f8 <uartCasa+0xae>
			// Cambia al estado automático (0), manual (1);
			send_to_slave(SLAVE2,'p');
     7ee:	60 e7       	ldi	r22, 0x70	; 112
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     7f6:	08 95       	ret
		}
		else if (comando == 'q'){
     7f8:	81 37       	cpi	r24, 0x71	; 113
     7fa:	09 f5       	brne	.+66     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			int tempCelsius = (int)(temp_value / 256); // Calcula la temperatura en grados Celsius
     7fc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <temp_value>
     800:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <temp_value+0x1>
     804:	99 23       	and	r25, r25
     806:	14 f4       	brge	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	81 50       	subi	r24, 0x01	; 1
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	89 2f       	mov	r24, r25
     80e:	88 0f       	add	r24, r24
     810:	88 0b       	sbc	r24, r24
			sprintf(temp2, "%d", tempCelsius); // Convierte el número entero a cadena
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	8f e5       	ldi	r24, 0x5F	; 95
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9f 93       	push	r25
     81c:	8f 93       	push	r24
     81e:	8e e6       	ldi	r24, 0x6E	; 110
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
			writeTextUART(temp2);
     82a:	8e e6       	ldi	r24, 0x6E	; 110
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 c8 05 	call	0xb90	; 0xb90 <writeTextUART>
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	08 95       	ret

00000840 <setup>:
}

/*****************************************************************/
void setup(void){
	// Configura PC2 como salida para el ventilador
	DDRC |= (1 << DDC2);
     840:	87 b1       	in	r24, 0x07	; 7
     842:	84 60       	ori	r24, 0x04	; 4
     844:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 <<DDB5);
     846:	84 b1       	in	r24, 0x04	; 4
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	84 b9       	out	0x04, r24	; 4
	// Configurar PB5, PC0, PC1, PC3 como entradas
	DDRB &= ~(1 << DDB4);
     84c:	84 b1       	in	r24, 0x04	; 4
     84e:	8f 7e       	andi	r24, 0xEF	; 239
     850:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC3));
     852:	87 b1       	in	r24, 0x07	; 7
     854:	84 7f       	andi	r24, 0xF4	; 244
     856:	87 b9       	out	0x07, r24	; 7
	// Habilitar pull-ups internos para PB5, PC0, PC1, PC3
	PORTB |= (1 << PORTB4);
     858:	85 b1       	in	r24, 0x05	; 5
     85a:	80 61       	ori	r24, 0x10	; 16
     85c:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC3);
     85e:	88 b1       	in	r24, 0x08	; 8
     860:	8b 60       	ori	r24, 0x0B	; 11
     862:	88 b9       	out	0x08, r24	; 8
     864:	08 95       	ret

00000866 <initPCint1>:
}
void initPCint1(void) {
	// Habilitar interrupciones en los botones PB5, PC0, PC1, y PC3
	
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT11); // Habilitar PCINT en PC0, PC1, y PC3
     866:	ec e6       	ldi	r30, 0x6C	; 108
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	8b 60       	ori	r24, 0x0B	; 11
     86e:	80 83       	st	Z, r24
	PCICR |=  (1 << PCIE1); // Habilitar las interrupciones de los pines de PCINT[7:0] y PCINT[14:8]
     870:	e8 e6       	ldi	r30, 0x68	; 104
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	82 60       	ori	r24, 0x02	; 2
     878:	80 83       	st	Z, r24
     87a:	08 95       	ret

0000087c <initPCint0>:
}
void initPCint0(void){
	PCMSK0 |= (1 << PCINT4); // Habilitar PCINT en PB4
     87c:	eb e6       	ldi	r30, 0x6B	; 107
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	80 61       	ori	r24, 0x10	; 16
     884:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0) ;
     886:	e8 e6       	ldi	r30, 0x68	; 104
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 83       	st	Z, r24
     890:	08 95       	ret

00000892 <timer1_init>:
volatile uint16_t debounce_counter_PC1 = 0;
volatile uint16_t debounce_counter_PC3 = 0;

void timer1_init() {
	// Configurar Timer1 en modo CTC (Clear Timer on Compare Match)
	TCCR1A = 0;            // Modo CTC (no PWM)
     892:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 19999;         // Valor de comparación para generar una interrupción cada 10 ms
     89c:	8f e1       	ldi	r24, 0x1F	; 31
     89e:	9e e4       	ldi	r25, 0x4E	; 78
     8a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     8a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar la interrupción por comparación de Timer1
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); // Habilitar interrupciones globales
     8ae:	78 94       	sei
     8b0:	08 95       	ret

000008b2 <main>:
void timer1_init(void);
void diax(void);


int main(void) {
	cli();
     8b2:	f8 94       	cli
	UART_init(9600);
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	95 e2       	ldi	r25, 0x25	; 37
     8b8:	0e 94 84 05 	call	0xb08	; 0xb08 <UART_init>
	initLCD8bits();
     8bc:	0e 94 c1 01 	call	0x382	; 0x382 <initLCD8bits>
	I2C_Master_Init(100000, 1);
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	60 ea       	ldi	r22, 0xA0	; 160
     8c4:	76 e8       	ldi	r23, 0x86	; 134
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	setup();
     8ce:	0e 94 20 04 	call	0x840	; 0x840 <setup>
	initPCint0();
     8d2:	0e 94 3e 04 	call	0x87c	; 0x87c <initPCint0>
	initPCint1();
     8d6:	0e 94 33 04 	call	0x866	; 0x866 <initPCint1>
	timer1_init();
     8da:	0e 94 49 04 	call	0x892	; 0x892 <timer1_init>

	while (1) {
		uartCasa();
     8de:	0e 94 a5 03 	call	0x74a	; 0x74a <uartCasa>
		sensorTemp();
     8e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <sensorTemp>
		portonUltra();
     8e6:	0e 94 41 02 	call	0x482	; 0x482 <portonUltra>
		diax();
     8ea:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <diax>
		LCDcasa();
     8ee:	0e 94 3a 03 	call	0x674	; 0x674 <LCDcasa>
		PORTB |= (1 << PORTB5);
     8f2:	85 b1       	in	r24, 0x05	; 5
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	85 b9       	out	0x05, r24	; 5
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	85 ea       	ldi	r24, 0xA5	; 165
     8fc:	9e e0       	ldi	r25, 0x0E	; 14
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <main+0x4c>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0x9>
     908:	00 00       	nop
     90a:	e9 cf       	rjmp	.-46     	; 0x8de <main+0x2c>

0000090c <__vector_11>:
	OCR1A = 19999;         // Valor de comparación para generar una interrupción cada 10 ms
	TIMSK1 = (1 << OCIE1A); // Habilitar la interrupción por comparación de Timer1
	sei(); // Habilitar interrupciones globales
}

ISR(TIMER1_COMPA_vect) {
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
	// Incrementa los contadores de antirrebote si es necesario
	if (debounce_counter_PB4 < 1000) {
     91c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <debounce_counter_PB4>
     920:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <debounce_counter_PB4+0x1>
     924:	88 3e       	cpi	r24, 0xE8	; 232
     926:	93 40       	sbci	r25, 0x03	; 3
     928:	48 f4       	brcc	.+18     	; 0x93c <__vector_11+0x30>
		debounce_counter_PB4++;
     92a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <debounce_counter_PB4>
     92e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <debounce_counter_PB4+0x1>
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <debounce_counter_PB4+0x1>
     938:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <debounce_counter_PB4>
	}
	if (debounce_counter_PC0 < 1000) {
     93c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <debounce_counter_PC0>
     940:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <debounce_counter_PC0+0x1>
     944:	88 3e       	cpi	r24, 0xE8	; 232
     946:	93 40       	sbci	r25, 0x03	; 3
     948:	48 f4       	brcc	.+18     	; 0x95c <__vector_11+0x50>
		debounce_counter_PC0++;
     94a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <debounce_counter_PC0>
     94e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <debounce_counter_PC0+0x1>
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <debounce_counter_PC0+0x1>
     958:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <debounce_counter_PC0>
	}
	if (debounce_counter_PC1 < 1000) {
     95c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <debounce_counter_PC1>
     960:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <debounce_counter_PC1+0x1>
     964:	88 3e       	cpi	r24, 0xE8	; 232
     966:	93 40       	sbci	r25, 0x03	; 3
     968:	48 f4       	brcc	.+18     	; 0x97c <__vector_11+0x70>
		debounce_counter_PC1++;
     96a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <debounce_counter_PC1>
     96e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <debounce_counter_PC1+0x1>
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <debounce_counter_PC1+0x1>
     978:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <debounce_counter_PC1>
	}
	if (debounce_counter_PC3 < 1000) {
     97c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     980:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     984:	88 3e       	cpi	r24, 0xE8	; 232
     986:	93 40       	sbci	r25, 0x03	; 3
     988:	48 f4       	brcc	.+18     	; 0x99c <__vector_11+0x90>
		debounce_counter_PC3++;
     98a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     98e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     998:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
	}
}
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	2f 91       	pop	r18
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_3>:

ISR(PCINT0_vect) {
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	// Verificar cuál pin causó la interrupción para PB4
	PORTB &= ~(1<<PORTB5);
     9ce:	85 b1       	in	r24, 0x05	; 5
     9d0:	8f 7d       	andi	r24, 0xDF	; 223
     9d2:	85 b9       	out	0x05, r24	; 5
	uint8_t puertoB = PINB;
	if ((puertoB & (1<<PINB4))==0) {
     9d4:	1c 99       	sbic	0x03, 4	; 3
     9d6:	19 c0       	rjmp	.+50     	; 0xa0a <__vector_3+0x5e>
		if (debounce_counter_PB4 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     9d8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <debounce_counter_PB4>
     9dc:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <debounce_counter_PB4+0x1>
     9e0:	c2 97       	sbiw	r24, 0x32	; 50
     9e2:	98 f0       	brcs	.+38     	; 0xa0a <__vector_3+0x5e>
			debounce_counter_PB4 = 0; // Reinicia el contador
     9e4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <debounce_counter_PB4+0x1>
     9e8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <debounce_counter_PB4>
			//UART_send_string("PB4 presionado.\r\n");
			estadoVent = !estadoVent;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <estadoVent>
     9f2:	91 11       	cpse	r25, r1
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <estadoVent>
			send_to_slave(SLAVE1, 'x');
     9fa:	68 e7       	ldi	r22, 0x78	; 120
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			send_to_slave(SLAVE2, 'x');
     a02:	68 e7       	ldi	r22, 0x78	; 120
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			//LCD_Write_String("cambiando estado");
		}
	}
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_4>:

ISR(PCINT1_vect) {
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	// Verificar cuál pin causó la interrupción para PC0, PC1, y PC3
	if (!(PINC & (1 << PINC0))) {
     a4e:	30 99       	sbic	0x06, 0	; 6
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__vector_4+0x4a>
		if (debounce_counter_PC0 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     a52:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <debounce_counter_PC0>
     a56:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <debounce_counter_PC0+0x1>
     a5a:	c2 97       	sbiw	r24, 0x32	; 50
     a5c:	60 f0       	brcs	.+24     	; 0xa76 <__vector_4+0x4a>
			debounce_counter_PC0 = 0; // Reinicia el contador
     a5e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <debounce_counter_PC0+0x1>
     a62:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <debounce_counter_PC0>
			if (estadoVent == 1) {
     a66:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <estadoVent>
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	21 f4       	brne	.+8      	; 0xa76 <__vector_4+0x4a>
				send_to_slave(SLAVE1, 'm');
     a6e:	6d e6       	ldi	r22, 0x6D	; 109
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				//LCD_Write_String("cambiando estado");
				//UART_send_string("PC0 presionado.\r\n");
			}
		}
	}
	if (!(PINC & (1 << PINC1))) {
     a76:	31 99       	sbic	0x06, 1	; 6
     a78:	12 c0       	rjmp	.+36     	; 0xa9e <__vector_4+0x72>
		if (debounce_counter_PC1 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     a7a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <debounce_counter_PC1>
     a7e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <debounce_counter_PC1+0x1>
     a82:	c2 97       	sbiw	r24, 0x32	; 50
     a84:	60 f0       	brcs	.+24     	; 0xa9e <__vector_4+0x72>
			debounce_counter_PC1 = 0; // Reinicia el contador
     a86:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <debounce_counter_PC1+0x1>
     a8a:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <debounce_counter_PC1>
			if (estadoVent == 1) {
     a8e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <estadoVent>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	21 f4       	brne	.+8      	; 0xa9e <__vector_4+0x72>
				send_to_slave(SLAVE2, 'n');
     a96:	6e e6       	ldi	r22, 0x6E	; 110
     a98:	84 e0       	ldi	r24, 0x04	; 4
     a9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				//LCD_Write_String("cambiando estado");
				//UART_send_string("PC1 presionado.\r\n");
			}
		}
	}
	if (!(PINC & (1 << PINC3))) {
     a9e:	33 99       	sbic	0x06, 3	; 6
     aa0:	22 c0       	rjmp	.+68     	; 0xae6 <__vector_4+0xba>
		if (debounce_counter_PC3 >= 50) { // Considera la pulsación si han pasado al menos 20 ms
     aa2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     aa6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     aaa:	c2 97       	sbiw	r24, 0x32	; 50
     aac:	e0 f0       	brcs	.+56     	; 0xae6 <__vector_4+0xba>
			debounce_counter_PC3 = 0; // Reinicia el contador
     aae:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     ab2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
			ventilador = !ventilador;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ventilador>
     abc:	91 11       	cpse	r25, r1
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ventilador>
			if (estadoVent == 1 && ventilador == 1) {
     ac4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <estadoVent>
     ac8:	91 30       	cpi	r25, 0x01	; 1
     aca:	31 f4       	brne	.+12     	; 0xad8 <__vector_4+0xac>
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	21 f4       	brne	.+8      	; 0xad8 <__vector_4+0xac>
				PORTC |= (1 << PORTC2); // Enciende el ventilador si está activado
     ad0:	88 b1       	in	r24, 0x08	; 8
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	88 b9       	out	0x08, r24	; 8
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <__vector_4+0xba>
				} else if(estadoVent == 1 && ventilador == 0) {
     ad8:	91 30       	cpi	r25, 0x01	; 1
     ada:	29 f4       	brne	.+10     	; 0xae6 <__vector_4+0xba>
     adc:	81 11       	cpse	r24, r1
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <__vector_4+0xba>
				PORTC &= ~(1 << PORTC2); // Apaga el ventilador si está desactivado
     ae0:	88 b1       	in	r24, 0x08	; 8
     ae2:	8b 7f       	andi	r24, 0xFB	; 251
     ae4:	88 b9       	out	0x08, r24	; 8
			}
			//UART_send_string("PC3 presionado.\r\n");
		}
	}
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	aa 1f       	adc	r26, r26
     b12:	bb 1f       	adc	r27, r27
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	aa 1f       	adc	r26, r26
     b1a:	bb 1f       	adc	r27, r27
     b1c:	9c 01       	movw	r18, r24
     b1e:	ad 01       	movw	r20, r26
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	44 1f       	adc	r20, r20
     b26:	55 1f       	adc	r21, r21
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	44 1f       	adc	r20, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	74 e2       	ldi	r23, 0x24	; 36
     b34:	84 ef       	ldi	r24, 0xF4	; 244
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__udivmodsi4>
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	31 09       	sbc	r19, r1
     b40:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b44:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     b48:	88 e9       	ldi	r24, 0x98	; 152
     b4a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b54:	08 95       	ret

00000b56 <UART_available>:
     b56:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <uart_head>
     b5a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <uart_tail>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	29 13       	cpse	r18, r25
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <UART_available+0x10>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	08 95       	ret

00000b6a <UART_receive>:
     b6a:	0e 94 ab 05 	call	0xb56	; 0xb56 <UART_available>
     b6e:	89 2b       	or	r24, r25
     b70:	69 f0       	breq	.+26     	; 0xb8c <UART_receive+0x22>
     b72:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <uart_tail>
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ee 54       	subi	r30, 0x4E	; 78
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	80 81       	ld	r24, Z
     b7e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <uart_tail>
     b82:	9f 5f       	subi	r25, 0xFF	; 255
     b84:	9f 77       	andi	r25, 0x7F	; 127
     b86:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <uart_tail>
     b8a:	08 95       	ret
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	08 95       	ret

00000b90 <writeTextUART>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}


void writeTextUART(char* Texto){
     b90:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; Texto[i]!='\0'; i++){
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
     b96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b9a:	95 ff       	sbrs	r25, 5
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <writeTextUART+0x6>
		UDR0 = Texto[i];
     b9e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}


void writeTextUART(char* Texto){
	uint8_t i;
	for(i=0; Texto[i]!='\0'; i++){
     ba2:	2f 5f       	subi	r18, 0xFF	; 255
     ba4:	fa 01       	movw	r30, r20
     ba6:	e2 0f       	add	r30, r18
     ba8:	f1 1d       	adc	r31, r1
     baa:	30 81       	ld	r19, Z
     bac:	31 11       	cpse	r19, r1
     bae:	f3 cf       	rjmp	.-26     	; 0xb96 <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
	
}
     bb0:	08 95       	ret

00000bb2 <__vector_18>:
// Rutina de interrupción del UART
ISR(USART_RX_vect) {
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
	uint8_t next_head = (uart_head + 1) % sizeof(uart_buffer);
     bc4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <uart_head>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	8f 77       	andi	r24, 0x7F	; 127

	if (next_head != uart_tail) { // Solo avanzar si el buffer no está lleno
     bcc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <uart_tail>
     bd0:	89 17       	cp	r24, r25
     bd2:	51 f0       	breq	.+20     	; 0xbe8 <__vector_18+0x36>
		uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
     bd4:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <uart_head>
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bde:	ee 54       	subi	r30, 0x4E	; 78
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	90 83       	st	Z, r25
		uart_head = next_head; // Actualizar el índice de la cabeza del buffer
     be4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <uart_head>
	}
}
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <__udivmodsi4>:
     bfa:	a1 e2       	ldi	r26, 0x21	; 33
     bfc:	1a 2e       	mov	r1, r26
     bfe:	aa 1b       	sub	r26, r26
     c00:	bb 1b       	sub	r27, r27
     c02:	fd 01       	movw	r30, r26
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <__udivmodsi4_ep>

00000c06 <__udivmodsi4_loop>:
     c06:	aa 1f       	adc	r26, r26
     c08:	bb 1f       	adc	r27, r27
     c0a:	ee 1f       	adc	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	a2 17       	cp	r26, r18
     c10:	b3 07       	cpc	r27, r19
     c12:	e4 07       	cpc	r30, r20
     c14:	f5 07       	cpc	r31, r21
     c16:	20 f0       	brcs	.+8      	; 0xc20 <__udivmodsi4_ep>
     c18:	a2 1b       	sub	r26, r18
     c1a:	b3 0b       	sbc	r27, r19
     c1c:	e4 0b       	sbc	r30, r20
     c1e:	f5 0b       	sbc	r31, r21

00000c20 <__udivmodsi4_ep>:
     c20:	66 1f       	adc	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	88 1f       	adc	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	1a 94       	dec	r1
     c2a:	69 f7       	brne	.-38     	; 0xc06 <__udivmodsi4_loop>
     c2c:	60 95       	com	r22
     c2e:	70 95       	com	r23
     c30:	80 95       	com	r24
     c32:	90 95       	com	r25
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	bd 01       	movw	r22, r26
     c3a:	cf 01       	movw	r24, r30
     c3c:	08 95       	ret

00000c3e <snprintf>:
     c3e:	ae e0       	ldi	r26, 0x0E	; 14
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x1c>
     c4a:	0d 89       	ldd	r16, Y+21	; 0x15
     c4c:	1e 89       	ldd	r17, Y+22	; 0x16
     c4e:	8f 89       	ldd	r24, Y+23	; 0x17
     c50:	98 8d       	ldd	r25, Y+24	; 0x18
     c52:	26 e0       	ldi	r18, 0x06	; 6
     c54:	2c 83       	std	Y+4, r18	; 0x04
     c56:	1a 83       	std	Y+2, r17	; 0x02
     c58:	09 83       	std	Y+1, r16	; 0x01
     c5a:	97 ff       	sbrs	r25, 7
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <snprintf+0x24>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e8       	ldi	r25, 0x80	; 128
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	9e 83       	std	Y+6, r25	; 0x06
     c66:	8d 83       	std	Y+5, r24	; 0x05
     c68:	ae 01       	movw	r20, r28
     c6a:	45 5e       	subi	r20, 0xE5	; 229
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	69 8d       	ldd	r22, Y+25	; 0x19
     c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 71 06 	call	0xce2	; 0xce2 <vfprintf>
     c7a:	4d 81       	ldd	r20, Y+5	; 0x05
     c7c:	5e 81       	ldd	r21, Y+6	; 0x06
     c7e:	57 fd       	sbrc	r21, 7
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <snprintf+0x58>
     c82:	2f 81       	ldd	r18, Y+7	; 0x07
     c84:	38 85       	ldd	r19, Y+8	; 0x08
     c86:	42 17       	cp	r20, r18
     c88:	53 07       	cpc	r21, r19
     c8a:	0c f4       	brge	.+2      	; 0xc8e <snprintf+0x50>
     c8c:	9a 01       	movw	r18, r20
     c8e:	f8 01       	movw	r30, r16
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	10 82       	st	Z, r1
     c96:	2e 96       	adiw	r28, 0x0e	; 14
     c98:	e4 e0       	ldi	r30, 0x04	; 4
     c9a:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x1c>

00000c9e <sprintf>:
     c9e:	ae e0       	ldi	r26, 0x0E	; 14
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e5       	ldi	r30, 0x55	; 85
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x1c>
     caa:	0d 89       	ldd	r16, Y+21	; 0x15
     cac:	1e 89       	ldd	r17, Y+22	; 0x16
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	8c 83       	std	Y+4, r24	; 0x04
     cb2:	1a 83       	std	Y+2, r17	; 0x02
     cb4:	09 83       	std	Y+1, r16	; 0x01
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	9f e7       	ldi	r25, 0x7F	; 127
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	ae 01       	movw	r20, r28
     cc0:	47 5e       	subi	r20, 0xE7	; 231
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	6f 89       	ldd	r22, Y+23	; 0x17
     cc6:	78 8d       	ldd	r23, Y+24	; 0x18
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 71 06 	call	0xce2	; 0xce2 <vfprintf>
     cd0:	ef 81       	ldd	r30, Y+7	; 0x07
     cd2:	f8 85       	ldd	r31, Y+8	; 0x08
     cd4:	e0 0f       	add	r30, r16
     cd6:	f1 1f       	adc	r31, r17
     cd8:	10 82       	st	Z, r1
     cda:	2e 96       	adiw	r28, 0x0e	; 14
     cdc:	e4 e0       	ldi	r30, 0x04	; 4
     cde:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x1c>

00000ce2 <vfprintf>:
     ce2:	ab e0       	ldi	r26, 0x0B	; 11
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e7       	ldi	r30, 0x77	; 119
     ce8:	f6 e0       	ldi	r31, 0x06	; 6
     cea:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__prologue_saves__>
     cee:	6c 01       	movw	r12, r24
     cf0:	7b 01       	movw	r14, r22
     cf2:	8a 01       	movw	r16, r20
     cf4:	fc 01       	movw	r30, r24
     cf6:	17 82       	std	Z+7, r1	; 0x07
     cf8:	16 82       	std	Z+6, r1	; 0x06
     cfa:	83 81       	ldd	r24, Z+3	; 0x03
     cfc:	81 ff       	sbrs	r24, 1
     cfe:	cc c1       	rjmp	.+920    	; 0x1098 <vfprintf+0x3b6>
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	3c 01       	movw	r6, r24
     d06:	f6 01       	movw	r30, r12
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	f7 01       	movw	r30, r14
     d0c:	93 fd       	sbrc	r25, 3
     d0e:	85 91       	lpm	r24, Z+
     d10:	93 ff       	sbrs	r25, 3
     d12:	81 91       	ld	r24, Z+
     d14:	7f 01       	movw	r14, r30
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <vfprintf+0x3a>
     d1a:	ba c1       	rjmp	.+884    	; 0x1090 <vfprintf+0x3ae>
     d1c:	85 32       	cpi	r24, 0x25	; 37
     d1e:	39 f4       	brne	.+14     	; 0xd2e <vfprintf+0x4c>
     d20:	93 fd       	sbrc	r25, 3
     d22:	85 91       	lpm	r24, Z+
     d24:	93 ff       	sbrs	r25, 3
     d26:	81 91       	ld	r24, Z+
     d28:	7f 01       	movw	r14, r30
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	29 f4       	brne	.+10     	; 0xd38 <vfprintf+0x56>
     d2e:	b6 01       	movw	r22, r12
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     d36:	e7 cf       	rjmp	.-50     	; 0xd06 <vfprintf+0x24>
     d38:	91 2c       	mov	r9, r1
     d3a:	21 2c       	mov	r2, r1
     d3c:	31 2c       	mov	r3, r1
     d3e:	ff e1       	ldi	r31, 0x1F	; 31
     d40:	f3 15       	cp	r31, r3
     d42:	d8 f0       	brcs	.+54     	; 0xd7a <vfprintf+0x98>
     d44:	8b 32       	cpi	r24, 0x2B	; 43
     d46:	79 f0       	breq	.+30     	; 0xd66 <vfprintf+0x84>
     d48:	38 f4       	brcc	.+14     	; 0xd58 <vfprintf+0x76>
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	79 f0       	breq	.+30     	; 0xd6c <vfprintf+0x8a>
     d4e:	83 32       	cpi	r24, 0x23	; 35
     d50:	a1 f4       	brne	.+40     	; 0xd7a <vfprintf+0x98>
     d52:	23 2d       	mov	r18, r3
     d54:	20 61       	ori	r18, 0x10	; 16
     d56:	1d c0       	rjmp	.+58     	; 0xd92 <vfprintf+0xb0>
     d58:	8d 32       	cpi	r24, 0x2D	; 45
     d5a:	61 f0       	breq	.+24     	; 0xd74 <vfprintf+0x92>
     d5c:	80 33       	cpi	r24, 0x30	; 48
     d5e:	69 f4       	brne	.+26     	; 0xd7a <vfprintf+0x98>
     d60:	23 2d       	mov	r18, r3
     d62:	21 60       	ori	r18, 0x01	; 1
     d64:	16 c0       	rjmp	.+44     	; 0xd92 <vfprintf+0xb0>
     d66:	83 2d       	mov	r24, r3
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	38 2e       	mov	r3, r24
     d6c:	e3 2d       	mov	r30, r3
     d6e:	e4 60       	ori	r30, 0x04	; 4
     d70:	3e 2e       	mov	r3, r30
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <vfprintf+0xe6>
     d74:	f3 2d       	mov	r31, r3
     d76:	f8 60       	ori	r31, 0x08	; 8
     d78:	1d c0       	rjmp	.+58     	; 0xdb4 <vfprintf+0xd2>
     d7a:	37 fc       	sbrc	r3, 7
     d7c:	2d c0       	rjmp	.+90     	; 0xdd8 <vfprintf+0xf6>
     d7e:	20 ed       	ldi	r18, 0xD0	; 208
     d80:	28 0f       	add	r18, r24
     d82:	2a 30       	cpi	r18, 0x0A	; 10
     d84:	40 f0       	brcs	.+16     	; 0xd96 <vfprintf+0xb4>
     d86:	8e 32       	cpi	r24, 0x2E	; 46
     d88:	b9 f4       	brne	.+46     	; 0xdb8 <vfprintf+0xd6>
     d8a:	36 fc       	sbrc	r3, 6
     d8c:	81 c1       	rjmp	.+770    	; 0x1090 <vfprintf+0x3ae>
     d8e:	23 2d       	mov	r18, r3
     d90:	20 64       	ori	r18, 0x40	; 64
     d92:	32 2e       	mov	r3, r18
     d94:	19 c0       	rjmp	.+50     	; 0xdc8 <vfprintf+0xe6>
     d96:	36 fe       	sbrs	r3, 6
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <vfprintf+0xc4>
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	98 9e       	mul	r9, r24
     d9e:	20 0d       	add	r18, r0
     da0:	11 24       	eor	r1, r1
     da2:	92 2e       	mov	r9, r18
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <vfprintf+0xe6>
     da6:	ea e0       	ldi	r30, 0x0A	; 10
     da8:	2e 9e       	mul	r2, r30
     daa:	20 0d       	add	r18, r0
     dac:	11 24       	eor	r1, r1
     dae:	22 2e       	mov	r2, r18
     db0:	f3 2d       	mov	r31, r3
     db2:	f0 62       	ori	r31, 0x20	; 32
     db4:	3f 2e       	mov	r3, r31
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <vfprintf+0xe6>
     db8:	8c 36       	cpi	r24, 0x6C	; 108
     dba:	21 f4       	brne	.+8      	; 0xdc4 <vfprintf+0xe2>
     dbc:	83 2d       	mov	r24, r3
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	38 2e       	mov	r3, r24
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0xe6>
     dc4:	88 36       	cpi	r24, 0x68	; 104
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <vfprintf+0xf6>
     dc8:	f7 01       	movw	r30, r14
     dca:	93 fd       	sbrc	r25, 3
     dcc:	85 91       	lpm	r24, Z+
     dce:	93 ff       	sbrs	r25, 3
     dd0:	81 91       	ld	r24, Z+
     dd2:	7f 01       	movw	r14, r30
     dd4:	81 11       	cpse	r24, r1
     dd6:	b3 cf       	rjmp	.-154    	; 0xd3e <vfprintf+0x5c>
     dd8:	98 2f       	mov	r25, r24
     dda:	9f 7d       	andi	r25, 0xDF	; 223
     ddc:	95 54       	subi	r25, 0x45	; 69
     dde:	93 30       	cpi	r25, 0x03	; 3
     de0:	28 f4       	brcc	.+10     	; 0xdec <vfprintf+0x10a>
     de2:	0c 5f       	subi	r16, 0xFC	; 252
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	9f e3       	ldi	r25, 0x3F	; 63
     de8:	99 83       	std	Y+1, r25	; 0x01
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <vfprintf+0x124>
     dec:	83 36       	cpi	r24, 0x63	; 99
     dee:	31 f0       	breq	.+12     	; 0xdfc <vfprintf+0x11a>
     df0:	83 37       	cpi	r24, 0x73	; 115
     df2:	71 f0       	breq	.+28     	; 0xe10 <vfprintf+0x12e>
     df4:	83 35       	cpi	r24, 0x53	; 83
     df6:	09 f0       	breq	.+2      	; 0xdfa <vfprintf+0x118>
     df8:	59 c0       	rjmp	.+178    	; 0xeac <vfprintf+0x1ca>
     dfa:	21 c0       	rjmp	.+66     	; 0xe3e <vfprintf+0x15c>
     dfc:	f8 01       	movw	r30, r16
     dfe:	80 81       	ld	r24, Z
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	0e 5f       	subi	r16, 0xFE	; 254
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	88 24       	eor	r8, r8
     e08:	83 94       	inc	r8
     e0a:	91 2c       	mov	r9, r1
     e0c:	53 01       	movw	r10, r6
     e0e:	13 c0       	rjmp	.+38     	; 0xe36 <vfprintf+0x154>
     e10:	28 01       	movw	r4, r16
     e12:	f2 e0       	ldi	r31, 0x02	; 2
     e14:	4f 0e       	add	r4, r31
     e16:	51 1c       	adc	r5, r1
     e18:	f8 01       	movw	r30, r16
     e1a:	a0 80       	ld	r10, Z
     e1c:	b1 80       	ldd	r11, Z+1	; 0x01
     e1e:	36 fe       	sbrs	r3, 6
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <vfprintf+0x146>
     e22:	69 2d       	mov	r22, r9
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x14a>
     e28:	6f ef       	ldi	r22, 0xFF	; 255
     e2a:	7f ef       	ldi	r23, 0xFF	; 255
     e2c:	c5 01       	movw	r24, r10
     e2e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <strnlen>
     e32:	4c 01       	movw	r8, r24
     e34:	82 01       	movw	r16, r4
     e36:	f3 2d       	mov	r31, r3
     e38:	ff 77       	andi	r31, 0x7F	; 127
     e3a:	3f 2e       	mov	r3, r31
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <vfprintf+0x188>
     e3e:	28 01       	movw	r4, r16
     e40:	22 e0       	ldi	r18, 0x02	; 2
     e42:	42 0e       	add	r4, r18
     e44:	51 1c       	adc	r5, r1
     e46:	f8 01       	movw	r30, r16
     e48:	a0 80       	ld	r10, Z
     e4a:	b1 80       	ldd	r11, Z+1	; 0x01
     e4c:	36 fe       	sbrs	r3, 6
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x174>
     e50:	69 2d       	mov	r22, r9
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x178>
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	c5 01       	movw	r24, r10
     e5c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strnlen_P>
     e60:	4c 01       	movw	r8, r24
     e62:	f3 2d       	mov	r31, r3
     e64:	f0 68       	ori	r31, 0x80	; 128
     e66:	3f 2e       	mov	r3, r31
     e68:	82 01       	movw	r16, r4
     e6a:	33 fc       	sbrc	r3, 3
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <vfprintf+0x1c2>
     e6e:	82 2d       	mov	r24, r2
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	88 16       	cp	r8, r24
     e74:	99 06       	cpc	r9, r25
     e76:	b0 f4       	brcc	.+44     	; 0xea4 <vfprintf+0x1c2>
     e78:	b6 01       	movw	r22, r12
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     e82:	2a 94       	dec	r2
     e84:	f4 cf       	rjmp	.-24     	; 0xe6e <vfprintf+0x18c>
     e86:	f5 01       	movw	r30, r10
     e88:	37 fc       	sbrc	r3, 7
     e8a:	85 91       	lpm	r24, Z+
     e8c:	37 fe       	sbrs	r3, 7
     e8e:	81 91       	ld	r24, Z+
     e90:	5f 01       	movw	r10, r30
     e92:	b6 01       	movw	r22, r12
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     e9a:	21 10       	cpse	r2, r1
     e9c:	2a 94       	dec	r2
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	82 1a       	sub	r8, r18
     ea2:	91 08       	sbc	r9, r1
     ea4:	81 14       	cp	r8, r1
     ea6:	91 04       	cpc	r9, r1
     ea8:	71 f7       	brne	.-36     	; 0xe86 <vfprintf+0x1a4>
     eaa:	e8 c0       	rjmp	.+464    	; 0x107c <vfprintf+0x39a>
     eac:	84 36       	cpi	r24, 0x64	; 100
     eae:	11 f0       	breq	.+4      	; 0xeb4 <vfprintf+0x1d2>
     eb0:	89 36       	cpi	r24, 0x69	; 105
     eb2:	41 f5       	brne	.+80     	; 0xf04 <vfprintf+0x222>
     eb4:	f8 01       	movw	r30, r16
     eb6:	37 fe       	sbrs	r3, 7
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <vfprintf+0x1e6>
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	0c 5f       	subi	r16, 0xFC	; 252
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <vfprintf+0x1f6>
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	07 2e       	mov	r0, r23
     ece:	00 0c       	add	r0, r0
     ed0:	88 0b       	sbc	r24, r24
     ed2:	99 0b       	sbc	r25, r25
     ed4:	0e 5f       	subi	r16, 0xFE	; 254
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	f3 2d       	mov	r31, r3
     eda:	ff 76       	andi	r31, 0x6F	; 111
     edc:	3f 2e       	mov	r3, r31
     ede:	97 ff       	sbrs	r25, 7
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <vfprintf+0x212>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	f0 68       	ori	r31, 0x80	; 128
     ef2:	3f 2e       	mov	r3, r31
     ef4:	2a e0       	ldi	r18, 0x0A	; 10
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	a3 01       	movw	r20, r6
     efa:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     efe:	88 2e       	mov	r8, r24
     f00:	86 18       	sub	r8, r6
     f02:	45 c0       	rjmp	.+138    	; 0xf8e <vfprintf+0x2ac>
     f04:	85 37       	cpi	r24, 0x75	; 117
     f06:	31 f4       	brne	.+12     	; 0xf14 <vfprintf+0x232>
     f08:	23 2d       	mov	r18, r3
     f0a:	2f 7e       	andi	r18, 0xEF	; 239
     f0c:	b2 2e       	mov	r11, r18
     f0e:	2a e0       	ldi	r18, 0x0A	; 10
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	25 c0       	rjmp	.+74     	; 0xf5e <vfprintf+0x27c>
     f14:	93 2d       	mov	r25, r3
     f16:	99 7f       	andi	r25, 0xF9	; 249
     f18:	b9 2e       	mov	r11, r25
     f1a:	8f 36       	cpi	r24, 0x6F	; 111
     f1c:	c1 f0       	breq	.+48     	; 0xf4e <vfprintf+0x26c>
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <vfprintf+0x244>
     f20:	88 35       	cpi	r24, 0x58	; 88
     f22:	79 f0       	breq	.+30     	; 0xf42 <vfprintf+0x260>
     f24:	b5 c0       	rjmp	.+362    	; 0x1090 <vfprintf+0x3ae>
     f26:	80 37       	cpi	r24, 0x70	; 112
     f28:	19 f0       	breq	.+6      	; 0xf30 <vfprintf+0x24e>
     f2a:	88 37       	cpi	r24, 0x78	; 120
     f2c:	21 f0       	breq	.+8      	; 0xf36 <vfprintf+0x254>
     f2e:	b0 c0       	rjmp	.+352    	; 0x1090 <vfprintf+0x3ae>
     f30:	e9 2f       	mov	r30, r25
     f32:	e0 61       	ori	r30, 0x10	; 16
     f34:	be 2e       	mov	r11, r30
     f36:	b4 fe       	sbrs	r11, 4
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <vfprintf+0x272>
     f3a:	fb 2d       	mov	r31, r11
     f3c:	f4 60       	ori	r31, 0x04	; 4
     f3e:	bf 2e       	mov	r11, r31
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <vfprintf+0x272>
     f42:	34 fe       	sbrs	r3, 4
     f44:	0a c0       	rjmp	.+20     	; 0xf5a <vfprintf+0x278>
     f46:	29 2f       	mov	r18, r25
     f48:	26 60       	ori	r18, 0x06	; 6
     f4a:	b2 2e       	mov	r11, r18
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0x278>
     f4e:	28 e0       	ldi	r18, 0x08	; 8
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <vfprintf+0x27c>
     f54:	20 e1       	ldi	r18, 0x10	; 16
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <vfprintf+0x27c>
     f5a:	20 e1       	ldi	r18, 0x10	; 16
     f5c:	32 e0       	ldi	r19, 0x02	; 2
     f5e:	f8 01       	movw	r30, r16
     f60:	b7 fe       	sbrs	r11, 7
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <vfprintf+0x290>
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	0c 5f       	subi	r16, 0xFC	; 252
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <vfprintf+0x29c>
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 5f       	subi	r16, 0xFE	; 254
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	a3 01       	movw	r20, r6
     f80:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	fb 2d       	mov	r31, r11
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	36 fe       	sbrs	r3, 6
     f90:	0d c0       	rjmp	.+26     	; 0xfac <vfprintf+0x2ca>
     f92:	23 2d       	mov	r18, r3
     f94:	2e 7f       	andi	r18, 0xFE	; 254
     f96:	a2 2e       	mov	r10, r18
     f98:	89 14       	cp	r8, r9
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <vfprintf+0x2d0>
     f9c:	34 fe       	sbrs	r3, 4
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <vfprintf+0x2d4>
     fa0:	32 fc       	sbrc	r3, 2
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x2d4>
     fa4:	83 2d       	mov	r24, r3
     fa6:	8e 7e       	andi	r24, 0xEE	; 238
     fa8:	a8 2e       	mov	r10, r24
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <vfprintf+0x2d4>
     fac:	b8 2c       	mov	r11, r8
     fae:	a3 2c       	mov	r10, r3
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <vfprintf+0x2d6>
     fb2:	b8 2c       	mov	r11, r8
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <vfprintf+0x2d6>
     fb6:	b9 2c       	mov	r11, r9
     fb8:	a4 fe       	sbrs	r10, 4
     fba:	0f c0       	rjmp	.+30     	; 0xfda <vfprintf+0x2f8>
     fbc:	fe 01       	movw	r30, r28
     fbe:	e8 0d       	add	r30, r8
     fc0:	f1 1d       	adc	r31, r1
     fc2:	80 81       	ld	r24, Z
     fc4:	80 33       	cpi	r24, 0x30	; 48
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <vfprintf+0x2ee>
     fc8:	9a 2d       	mov	r25, r10
     fca:	99 7e       	andi	r25, 0xE9	; 233
     fcc:	a9 2e       	mov	r10, r25
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x300>
     fd0:	a2 fe       	sbrs	r10, 2
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x2fe>
     fd4:	b3 94       	inc	r11
     fd6:	b3 94       	inc	r11
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x300>
     fda:	8a 2d       	mov	r24, r10
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x300>
     fe0:	b3 94       	inc	r11
     fe2:	a3 fc       	sbrc	r10, 3
     fe4:	11 c0       	rjmp	.+34     	; 0x1008 <vfprintf+0x326>
     fe6:	a0 fe       	sbrs	r10, 0
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x314>
     fea:	b2 14       	cp	r11, r2
     fec:	88 f4       	brcc	.+34     	; 0x1010 <vfprintf+0x32e>
     fee:	28 0c       	add	r2, r8
     ff0:	92 2c       	mov	r9, r2
     ff2:	9b 18       	sub	r9, r11
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <vfprintf+0x330>
     ff6:	b2 14       	cp	r11, r2
     ff8:	60 f4       	brcc	.+24     	; 0x1012 <vfprintf+0x330>
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1004:	b3 94       	inc	r11
    1006:	f7 cf       	rjmp	.-18     	; 0xff6 <vfprintf+0x314>
    1008:	b2 14       	cp	r11, r2
    100a:	18 f4       	brcc	.+6      	; 0x1012 <vfprintf+0x330>
    100c:	2b 18       	sub	r2, r11
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x332>
    1010:	98 2c       	mov	r9, r8
    1012:	21 2c       	mov	r2, r1
    1014:	a4 fe       	sbrs	r10, 4
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <vfprintf+0x356>
    1018:	b6 01       	movw	r22, r12
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1022:	a2 fe       	sbrs	r10, 2
    1024:	17 c0       	rjmp	.+46     	; 0x1054 <vfprintf+0x372>
    1026:	a1 fc       	sbrc	r10, 1
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <vfprintf+0x34e>
    102a:	88 e7       	ldi	r24, 0x78	; 120
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x352>
    1030:	88 e5       	ldi	r24, 0x58	; 88
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b6 01       	movw	r22, r12
    1036:	0c c0       	rjmp	.+24     	; 0x1050 <vfprintf+0x36e>
    1038:	8a 2d       	mov	r24, r10
    103a:	86 78       	andi	r24, 0x86	; 134
    103c:	59 f0       	breq	.+22     	; 0x1054 <vfprintf+0x372>
    103e:	a1 fe       	sbrs	r10, 1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x364>
    1042:	8b e2       	ldi	r24, 0x2B	; 43
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <vfprintf+0x366>
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	a7 fc       	sbrc	r10, 7
    104a:	8d e2       	ldi	r24, 0x2D	; 45
    104c:	b6 01       	movw	r22, r12
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1054:	89 14       	cp	r8, r9
    1056:	38 f4       	brcc	.+14     	; 0x1066 <vfprintf+0x384>
    1058:	b6 01       	movw	r22, r12
    105a:	80 e3       	ldi	r24, 0x30	; 48
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1062:	9a 94       	dec	r9
    1064:	f7 cf       	rjmp	.-18     	; 0x1054 <vfprintf+0x372>
    1066:	8a 94       	dec	r8
    1068:	f3 01       	movw	r30, r6
    106a:	e8 0d       	add	r30, r8
    106c:	f1 1d       	adc	r31, r1
    106e:	80 81       	ld	r24, Z
    1070:	b6 01       	movw	r22, r12
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1078:	81 10       	cpse	r8, r1
    107a:	f5 cf       	rjmp	.-22     	; 0x1066 <vfprintf+0x384>
    107c:	22 20       	and	r2, r2
    107e:	09 f4       	brne	.+2      	; 0x1082 <vfprintf+0x3a0>
    1080:	42 ce       	rjmp	.-892    	; 0xd06 <vfprintf+0x24>
    1082:	b6 01       	movw	r22, r12
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    108c:	2a 94       	dec	r2
    108e:	f6 cf       	rjmp	.-20     	; 0x107c <vfprintf+0x39a>
    1090:	f6 01       	movw	r30, r12
    1092:	86 81       	ldd	r24, Z+6	; 0x06
    1094:	97 81       	ldd	r25, Z+7	; 0x07
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x3ba>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	2b 96       	adiw	r28, 0x0b	; 11
    109e:	e2 e1       	ldi	r30, 0x12	; 18
    10a0:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__epilogue_restores__>

000010a4 <strnlen_P>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	05 90       	lpm	r0, Z+
    10a8:	61 50       	subi	r22, 0x01	; 1
    10aa:	70 40       	sbci	r23, 0x00	; 0
    10ac:	01 10       	cpse	r0, r1
    10ae:	d8 f7       	brcc	.-10     	; 0x10a6 <strnlen_P+0x2>
    10b0:	80 95       	com	r24
    10b2:	90 95       	com	r25
    10b4:	8e 0f       	add	r24, r30
    10b6:	9f 1f       	adc	r25, r31
    10b8:	08 95       	ret

000010ba <strnlen>:
    10ba:	fc 01       	movw	r30, r24
    10bc:	61 50       	subi	r22, 0x01	; 1
    10be:	70 40       	sbci	r23, 0x00	; 0
    10c0:	01 90       	ld	r0, Z+
    10c2:	01 10       	cpse	r0, r1
    10c4:	d8 f7       	brcc	.-10     	; 0x10bc <strnlen+0x2>
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	8e 0f       	add	r24, r30
    10cc:	9f 1f       	adc	r25, r31
    10ce:	08 95       	ret

000010d0 <fputc>:
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	fb 01       	movw	r30, r22
    10da:	23 81       	ldd	r18, Z+3	; 0x03
    10dc:	21 fd       	sbrc	r18, 1
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <fputc+0x16>
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	2c c0       	rjmp	.+88     	; 0x113e <fputc+0x6e>
    10e6:	22 ff       	sbrs	r18, 2
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <fputc+0x46>
    10ea:	46 81       	ldd	r20, Z+6	; 0x06
    10ec:	57 81       	ldd	r21, Z+7	; 0x07
    10ee:	24 81       	ldd	r18, Z+4	; 0x04
    10f0:	35 81       	ldd	r19, Z+5	; 0x05
    10f2:	42 17       	cp	r20, r18
    10f4:	53 07       	cpc	r21, r19
    10f6:	44 f4       	brge	.+16     	; 0x1108 <fputc+0x38>
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	9d 01       	movw	r18, r26
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	20 83       	st	Z, r18
    1106:	8c 93       	st	X, r24
    1108:	26 81       	ldd	r18, Z+6	; 0x06
    110a:	37 81       	ldd	r19, Z+7	; 0x07
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	37 83       	std	Z+7, r19	; 0x07
    1112:	26 83       	std	Z+6, r18	; 0x06
    1114:	14 c0       	rjmp	.+40     	; 0x113e <fputc+0x6e>
    1116:	8b 01       	movw	r16, r22
    1118:	ec 01       	movw	r28, r24
    111a:	fb 01       	movw	r30, r22
    111c:	00 84       	ldd	r0, Z+8	; 0x08
    111e:	f1 85       	ldd	r31, Z+9	; 0x09
    1120:	e0 2d       	mov	r30, r0
    1122:	09 95       	icall
    1124:	89 2b       	or	r24, r25
    1126:	e1 f6       	brne	.-72     	; 0x10e0 <fputc+0x10>
    1128:	d8 01       	movw	r26, r16
    112a:	16 96       	adiw	r26, 0x06	; 6
    112c:	8d 91       	ld	r24, X+
    112e:	9c 91       	ld	r25, X
    1130:	17 97       	sbiw	r26, 0x07	; 7
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	17 96       	adiw	r26, 0x07	; 7
    1136:	9c 93       	st	X, r25
    1138:	8e 93       	st	-X, r24
    113a:	16 97       	sbiw	r26, 0x06	; 6
    113c:	ce 01       	movw	r24, r28
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <__ultoa_invert>:
    1148:	fa 01       	movw	r30, r20
    114a:	aa 27       	eor	r26, r26
    114c:	28 30       	cpi	r18, 0x08	; 8
    114e:	51 f1       	breq	.+84     	; 0x11a4 <__ultoa_invert+0x5c>
    1150:	20 31       	cpi	r18, 0x10	; 16
    1152:	81 f1       	breq	.+96     	; 0x11b4 <__ultoa_invert+0x6c>
    1154:	e8 94       	clt
    1156:	6f 93       	push	r22
    1158:	6e 7f       	andi	r22, 0xFE	; 254
    115a:	6e 5f       	subi	r22, 0xFE	; 254
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	af 4f       	sbci	r26, 0xFF	; 255
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	3e d0       	rcall	.+124    	; 0x11e4 <__ultoa_invert+0x9c>
    1168:	b4 e0       	ldi	r27, 0x04	; 4
    116a:	3c d0       	rcall	.+120    	; 0x11e4 <__ultoa_invert+0x9c>
    116c:	67 0f       	add	r22, r23
    116e:	78 1f       	adc	r23, r24
    1170:	89 1f       	adc	r24, r25
    1172:	9a 1f       	adc	r25, r26
    1174:	a1 1d       	adc	r26, r1
    1176:	68 0f       	add	r22, r24
    1178:	79 1f       	adc	r23, r25
    117a:	8a 1f       	adc	r24, r26
    117c:	91 1d       	adc	r25, r1
    117e:	a1 1d       	adc	r26, r1
    1180:	6a 0f       	add	r22, r26
    1182:	71 1d       	adc	r23, r1
    1184:	81 1d       	adc	r24, r1
    1186:	91 1d       	adc	r25, r1
    1188:	a1 1d       	adc	r26, r1
    118a:	20 d0       	rcall	.+64     	; 0x11cc <__ultoa_invert+0x84>
    118c:	09 f4       	brne	.+2      	; 0x1190 <__ultoa_invert+0x48>
    118e:	68 94       	set
    1190:	3f 91       	pop	r19
    1192:	2a e0       	ldi	r18, 0x0A	; 10
    1194:	26 9f       	mul	r18, r22
    1196:	11 24       	eor	r1, r1
    1198:	30 19       	sub	r19, r0
    119a:	30 5d       	subi	r19, 0xD0	; 208
    119c:	31 93       	st	Z+, r19
    119e:	de f6       	brtc	.-74     	; 0x1156 <__ultoa_invert+0xe>
    11a0:	cf 01       	movw	r24, r30
    11a2:	08 95       	ret
    11a4:	46 2f       	mov	r20, r22
    11a6:	47 70       	andi	r20, 0x07	; 7
    11a8:	40 5d       	subi	r20, 0xD0	; 208
    11aa:	41 93       	st	Z+, r20
    11ac:	b3 e0       	ldi	r27, 0x03	; 3
    11ae:	0f d0       	rcall	.+30     	; 0x11ce <__ultoa_invert+0x86>
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__ultoa_invert+0x5c>
    11b2:	f6 cf       	rjmp	.-20     	; 0x11a0 <__ultoa_invert+0x58>
    11b4:	46 2f       	mov	r20, r22
    11b6:	4f 70       	andi	r20, 0x0F	; 15
    11b8:	40 5d       	subi	r20, 0xD0	; 208
    11ba:	4a 33       	cpi	r20, 0x3A	; 58
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <__ultoa_invert+0x7c>
    11be:	49 5d       	subi	r20, 0xD9	; 217
    11c0:	31 fd       	sbrc	r19, 1
    11c2:	40 52       	subi	r20, 0x20	; 32
    11c4:	41 93       	st	Z+, r20
    11c6:	02 d0       	rcall	.+4      	; 0x11cc <__ultoa_invert+0x84>
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__ultoa_invert+0x6c>
    11ca:	ea cf       	rjmp	.-44     	; 0x11a0 <__ultoa_invert+0x58>
    11cc:	b4 e0       	ldi	r27, 0x04	; 4
    11ce:	a6 95       	lsr	r26
    11d0:	97 95       	ror	r25
    11d2:	87 95       	ror	r24
    11d4:	77 95       	ror	r23
    11d6:	67 95       	ror	r22
    11d8:	ba 95       	dec	r27
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__ultoa_invert+0x86>
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	61 05       	cpc	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	08 95       	ret
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	0a 2e       	mov	r0, r26
    11ea:	06 94       	lsr	r0
    11ec:	57 95       	ror	r21
    11ee:	47 95       	ror	r20
    11f0:	37 95       	ror	r19
    11f2:	27 95       	ror	r18
    11f4:	ba 95       	dec	r27
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__ultoa_invert+0xa2>
    11f8:	62 0f       	add	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	84 1f       	adc	r24, r20
    11fe:	95 1f       	adc	r25, r21
    1200:	a0 1d       	adc	r26, r0
    1202:	08 95       	ret

00001204 <__prologue_saves__>:
    1204:	2f 92       	push	r2
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	ca 1b       	sub	r28, r26
    122e:	db 0b       	sbc	r29, r27
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	09 94       	ijmp

0000123c <__epilogue_restores__>:
    123c:	2a 88       	ldd	r2, Y+18	; 0x12
    123e:	39 88       	ldd	r3, Y+17	; 0x11
    1240:	48 88       	ldd	r4, Y+16	; 0x10
    1242:	5f 84       	ldd	r5, Y+15	; 0x0f
    1244:	6e 84       	ldd	r6, Y+14	; 0x0e
    1246:	7d 84       	ldd	r7, Y+13	; 0x0d
    1248:	8c 84       	ldd	r8, Y+12	; 0x0c
    124a:	9b 84       	ldd	r9, Y+11	; 0x0b
    124c:	aa 84       	ldd	r10, Y+10	; 0x0a
    124e:	b9 84       	ldd	r11, Y+9	; 0x09
    1250:	c8 84       	ldd	r12, Y+8	; 0x08
    1252:	df 80       	ldd	r13, Y+7	; 0x07
    1254:	ee 80       	ldd	r14, Y+6	; 0x06
    1256:	fd 80       	ldd	r15, Y+5	; 0x05
    1258:	0c 81       	ldd	r16, Y+4	; 0x04
    125a:	1b 81       	ldd	r17, Y+3	; 0x03
    125c:	aa 81       	ldd	r26, Y+2	; 0x02
    125e:	b9 81       	ldd	r27, Y+1	; 0x01
    1260:	ce 0f       	add	r28, r30
    1262:	d1 1d       	adc	r29, r1
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	ed 01       	movw	r28, r26
    1270:	08 95       	ret

00001272 <_exit>:
    1272:	f8 94       	cli

00001274 <__stop_program>:
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <__stop_program>
