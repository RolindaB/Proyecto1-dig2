
temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000111a  000011ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  0080020c  0080020c  000012ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb1  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3f  00000000  00000000  000033b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010bd  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000050b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000122a  00000000  00000000  00005c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006ea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_3>
      10:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e1       	ldi	r30, 0x1A	; 26
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 33       	cpi	r26, 0x37	; 55
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cf 04 	call	0x99e	; 0x99e <main>
      9e:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	6b 01       	movw	r12, r22
      b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 7c       	andi	r24, 0xCF	; 207
      b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
      b8:	44 30       	cpi	r20, 0x04	; 4
      ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
      bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
      c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
      c4:	40 31       	cpi	r20, 0x10	; 16
      c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
      c8:	40 34       	cpi	r20, 0x40	; 64
      ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
      cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
      ce:	e9 eb       	ldi	r30, 0xB9	; 185
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8c 7f       	andi	r24, 0xFC	; 252
      d6:	80 83       	st	Z, r24
		break;
      d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
      e4:	80 81       	ld	r24, Z
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	80 83       	st	Z, r24
		break;
      ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
      ec:	e9 eb       	ldi	r30, 0xB9	; 185
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
		break;
      fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
      fe:	e9 eb       	ldi	r30, 0xB9	; 185
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	83 60       	ori	r24, 0x03	; 3
     106:	80 83       	st	Z, r24
		break;
     108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8c 7f       	andi	r24, 0xFC	; 252
     112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	74 e2       	ldi	r23, 0x24	; 36
     118:	84 ef       	ldi	r24, 0xF4	; 244
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	a7 01       	movw	r20, r14
     11e:	96 01       	movw	r18, r12
     120:	0e 94 71 05 	call	0xae2	; 0xae2 <__udivmodsi4>
     124:	ca 01       	movw	r24, r20
     126:	b9 01       	movw	r22, r18
     128:	60 51       	subi	r22, 0x10	; 16
     12a:	71 09       	sbc	r23, r1
     12c:	81 09       	sbc	r24, r1
     12e:	91 09       	sbc	r25, r1
     130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     134:	23 70       	andi	r18, 0x03	; 3
     136:	42 e0       	ldi	r20, 0x02	; 2
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	fa 01       	movw	r30, r20
     13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
     13e:	ee 0f       	add	r30, r30
     140:	ff 1f       	adc	r31, r31
     142:	2a 95       	dec	r18
     144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
     146:	9f 01       	movw	r18, r30
     148:	03 2e       	mov	r0, r19
     14a:	00 0c       	add	r0, r0
     14c:	44 0b       	sbc	r20, r20
     14e:	55 0b       	sbc	r21, r21
     150:	0e 94 71 05 	call	0xae2	; 0xae2 <__udivmodsi4>
     154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24
}
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	df 90       	pop	r13
     168:	cf 90       	pop	r12
     16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
     16c:	84 ea       	ldi	r24, 0xA4	; 164
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
     172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     176:	88 23       	and	r24, r24
     178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
     184:	80 31       	cpi	r24, 0x10	; 16
     186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	08 95       	ret
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
     190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
     192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
     194:	84 e9       	ldi	r24, 0x94	; 148
     196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
     19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19e:	84 fd       	sbrc	r24, 4
     1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
     1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
     1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
     1a8:	84 e8       	ldi	r24, 0x84	; 132
     1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
     1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b2:	88 23       	and	r24, r24
     1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
     1bc:	88 31       	cpi	r24, 0x18	; 24
     1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
     1c0:	88 32       	cpi	r24, 0x28	; 40
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
     1c4:	80 34       	cpi	r24, 0x40	; 64
     1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
     1d0:	80 e0       	ldi	r24, 0x00	; 0
}
     1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
     1d4:	dc 01       	movw	r26, r24
	if (ack) {
     1d6:	66 23       	and	r22, r22
     1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
     1da:	ec eb       	ldi	r30, 0xBC	; 188
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	90 81       	ld	r25, Z
     1e0:	90 64       	ori	r25, 0x40	; 64
     1e2:	90 83       	st	Z, r25
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
     1e6:	ec eb       	ldi	r30, 0xBC	; 188
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	9f 7b       	andi	r25, 0xBF	; 191
     1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
     1f0:	ec eb       	ldi	r30, 0xBC	; 188
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	90 81       	ld	r25, Z
     1f6:	90 68       	ori	r25, 0x80	; 128
     1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
     1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1fe:	99 23       	and	r25, r25
     200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
     202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
     208:	98 35       	cpi	r25, 0x58	; 88
     20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
     20c:	90 35       	cpi	r25, 0x50	; 80
     20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
     210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
     21a:	89 2f       	mov	r24, r25
	}
}
     21c:	08 95       	ret

0000021e <read_from_slave>:

uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     21e:	94 ea       	ldi	r25, 0xA4	; 164
     220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     228:	99 23       	and	r25, r25
     22a:	e4 f7       	brge	.-8      	; 0x224 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     22c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     230:	98 7f       	andi	r25, 0xF8	; 248
     232:	98 30       	cpi	r25, 0x08	; 8
     234:	99 f5       	brne	.+102    	; 0x29c <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     242:	84 e8       	ldi	r24, 0x84	; 132
     244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     24c:	88 23       	and	r24, r24
     24e:	e4 f7       	brge	.-8      	; 0x248 <read_from_slave+0x2a>
     250:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
     252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	80 34       	cpi	r24, 0x40	; 64
     25a:	21 f0       	breq	.+8      	; 0x264 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
     25c:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
     264:	84 e8       	ldi	r24, 0x84	; 132
     266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
     26a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     26e:	88 23       	and	r24, r24
     270:	e4 f7       	brge	.-8      	; 0x26a <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
     272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     276:	88 7f       	andi	r24, 0xF8	; 248
     278:	88 35       	cpi	r24, 0x58	; 88
     27a:	49 f0       	breq	.+18     	; 0x28e <read_from_slave+0x70>
     27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     280:	88 7f       	andi	r24, 0xF8	; 248
     282:	80 35       	cpi	r24, 0x50	; 80
     284:	21 f0       	breq	.+8      	; 0x28e <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
     286:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error en la recepción
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
     28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     292:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
     294:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
	return 0; // Éxito
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
     29c:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
     29e:	08 95       	ret

000002a0 <send_to_slave>:

void send_to_slave(uint8_t slave_address, uint8_t data) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	d8 2f       	mov	r29, r24
     2a6:	c6 2f       	mov	r28, r22
	// Inicia la comunicación I2C
	I2C_Master_Start();
     2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>

	// Envía la dirección del esclavo con el bit de escritura
	I2C_Master_Write(slave_address << 1);
     2ac:	8d 2f       	mov	r24, r29
     2ae:	88 0f       	add	r24, r24
     2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Envía el dato
	I2C_Master_Write(data);
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     2ba:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
     2c4:	80 ff       	sbrs	r24, 0
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_port+0xc>
     2c8:	9b b1       	in	r25, 0x0b	; 11
     2ca:	94 60       	ori	r25, 0x04	; 4
     2cc:	9b b9       	out	0x0b, r25	; 11
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_port+0x12>
     2d0:	9b b1       	in	r25, 0x0b	; 11
     2d2:	9b 7f       	andi	r25, 0xFB	; 251
     2d4:	9b b9       	out	0x0b, r25	; 11
     2d6:	81 ff       	sbrs	r24, 1
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_port+0x1e>
     2da:	9b b1       	in	r25, 0x0b	; 11
     2dc:	98 60       	ori	r25, 0x08	; 8
     2de:	9b b9       	out	0x0b, r25	; 11
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_port+0x24>
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	97 7f       	andi	r25, 0xF7	; 247
     2e6:	9b b9       	out	0x0b, r25	; 11
     2e8:	82 ff       	sbrs	r24, 2
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCD_port+0x30>
     2ec:	9b b1       	in	r25, 0x0b	; 11
     2ee:	90 61       	ori	r25, 0x10	; 16
     2f0:	9b b9       	out	0x0b, r25	; 11
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_port+0x36>
     2f4:	9b b1       	in	r25, 0x0b	; 11
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	9b b9       	out	0x0b, r25	; 11
     2fa:	83 ff       	sbrs	r24, 3
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <LCD_port+0x42>
     2fe:	9b b1       	in	r25, 0x0b	; 11
     300:	90 62       	ori	r25, 0x20	; 32
     302:	9b b9       	out	0x0b, r25	; 11
     304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_port+0x48>
     306:	9b b1       	in	r25, 0x0b	; 11
     308:	9f 7d       	andi	r25, 0xDF	; 223
     30a:	9b b9       	out	0x0b, r25	; 11
     30c:	84 ff       	sbrs	r24, 4
     30e:	04 c0       	rjmp	.+8      	; 0x318 <LCD_port+0x54>
     310:	9b b1       	in	r25, 0x0b	; 11
     312:	90 64       	ori	r25, 0x40	; 64
     314:	9b b9       	out	0x0b, r25	; 11
     316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_port+0x5a>
     318:	9b b1       	in	r25, 0x0b	; 11
     31a:	9f 7b       	andi	r25, 0xBF	; 191
     31c:	9b b9       	out	0x0b, r25	; 11
     31e:	85 ff       	sbrs	r24, 5
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_port+0x66>
     322:	9b b1       	in	r25, 0x0b	; 11
     324:	90 68       	ori	r25, 0x80	; 128
     326:	9b b9       	out	0x0b, r25	; 11
     328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_port+0x6c>
     32a:	9b b1       	in	r25, 0x0b	; 11
     32c:	9f 77       	andi	r25, 0x7F	; 127
     32e:	9b b9       	out	0x0b, r25	; 11
     330:	86 ff       	sbrs	r24, 6
     332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_port+0x78>
     334:	95 b1       	in	r25, 0x05	; 5
     336:	91 60       	ori	r25, 0x01	; 1
     338:	95 b9       	out	0x05, r25	; 5
     33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_port+0x7e>
     33c:	95 b1       	in	r25, 0x05	; 5
     33e:	9e 7f       	andi	r25, 0xFE	; 254
     340:	95 b9       	out	0x05, r25	; 5
     342:	88 23       	and	r24, r24
     344:	24 f4       	brge	.+8      	; 0x34e <LCD_port+0x8a>
     346:	85 b1       	in	r24, 0x05	; 5
     348:	82 60       	ori	r24, 0x02	; 2
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	08 95       	ret
     34e:	85 b1       	in	r24, 0x05	; 5
     350:	8d 7f       	andi	r24, 0xFD	; 253
     352:	85 b9       	out	0x05, r24	; 5
     354:	08 95       	ret

00000356 <LCD_CMD>:
     356:	95 b1       	in	r25, 0x05	; 5
     358:	9b 7f       	andi	r25, 0xFB	; 251
     35a:	95 b9       	out	0x05, r25	; 5
     35c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     360:	85 b1       	in	r24, 0x05	; 5
     362:	88 60       	ori	r24, 0x08	; 8
     364:	85 b9       	out	0x05, r24	; 5
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_CMD+0x12>
     36c:	00 00       	nop
     36e:	85 b1       	in	r24, 0x05	; 5
     370:	87 7f       	andi	r24, 0xF7	; 247
     372:	85 b9       	out	0x05, r24	; 5
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	9f e1       	ldi	r25, 0x1F	; 31
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_CMD+0x22>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_CMD+0x28>
     37e:	00 00       	nop
     380:	08 95       	ret

00000382 <initLCD8bits>:
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	8c 6f       	ori	r24, 0xFC	; 252
     386:	8a b9       	out	0x0a, r24	; 10
     388:	1b b8       	out	0x0b, r1	; 11
     38a:	84 b1       	in	r24, 0x04	; 4
     38c:	8f 60       	ori	r24, 0x0F	; 15
     38e:	84 b9       	out	0x04, r24	; 4
     390:	15 b8       	out	0x05, r1	; 5
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	89 ef       	ldi	r24, 0xF9	; 249
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <initLCD8bits+0x16>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <initLCD8bits+0x20>
     3a2:	00 00       	nop
     3a4:	88 e3       	ldi	r24, 0x38	; 56
     3a6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3aa:	8f e1       	ldi	r24, 0x1F	; 31
     3ac:	9e e4       	ldi	r25, 0x4E	; 78
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8bits+0x2c>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8bits+0x32>
     3b4:	00 00       	nop
     3b6:	88 e3       	ldi	r24, 0x38	; 56
     3b8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <initLCD8bits+0x3e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <initLCD8bits+0x44>
     3c6:	00 00       	nop
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ce:	8f e9       	ldi	r24, 0x9F	; 159
     3d0:	9f e0       	ldi	r25, 0x0F	; 15
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <initLCD8bits+0x50>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <initLCD8bits+0x56>
     3d8:	00 00       	nop
     3da:	88 e3       	ldi	r24, 0x38	; 56
     3dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	9f e1       	ldi	r25, 0x1F	; 31
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD8bits+0x6e>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <initLCD8bits+0x74>
     3f6:	00 00       	nop
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     3fe:	08 95       	ret

00000400 <LCD_WriteCaracter>:
     400:	95 b1       	in	r25, 0x05	; 5
     402:	94 60       	ori	r25, 0x04	; 4
     404:	95 b9       	out	0x05, r25	; 5
     406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	85 b9       	out	0x05, r24	; 5
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	8a 95       	dec	r24
     414:	f1 f7       	brne	.-4      	; 0x412 <LCD_WriteCaracter+0x12>
     416:	00 00       	nop
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	87 7f       	andi	r24, 0xF7	; 247
     41c:	85 b9       	out	0x05, r24	; 5
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	9f e1       	ldi	r25, 0x1F	; 31
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <LCD_WriteCaracter+0x22>
     426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_WriteCaracter+0x28>
     428:	00 00       	nop
     42a:	08 95       	ret

0000042c <LCD_Write_String>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
     43c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteCaracter>
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	f8 01       	movw	r30, r16
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	80 81       	ld	r24, Z
     44a:	81 11       	cpse	r24, r1
     44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
     458:	cf 93       	push	r28
	char temp;
	if (f == 1) {
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	31 f4       	brne	.+12     	; 0x46a <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
     45e:	cf e7       	ldi	r28, 0x7F	; 127
     460:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
     468:	07 c0       	rjmp	.+14     	; 0x478 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
     46a:	62 30       	cpi	r22, 0x02	; 2
     46c:	29 f4       	brne	.+10     	; 0x478 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
     46e:	cf eb       	ldi	r28, 0xBF	; 191
     470:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
     472:	8c 2f       	mov	r24, r28
     474:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
	}
	LCD_CMD(temp);
     478:	8c 2f       	mov	r24, r28
     47a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
}
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <init_timer1>:
			strcpy(buffer1, "Día");
			} else {
			strcpy(buffer1, "noche");
		}
		} else {
		strcpy(buffer1, "error");
     482:	e1 e8       	ldi	r30, 0x81	; 129
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	8b 60       	ori	r24, 0x0B	; 11
     48a:	80 83       	st	Z, r24
     48c:	8a ef       	ldi	r24, 0xFA	; 250
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     494:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     498:	ef e6       	ldi	r30, 0x6F	; 111
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	82 60       	ori	r24, 0x02	; 2
     4a0:	80 83       	st	Z, r24
     4a2:	08 95       	ret

000004a4 <portonUltra>:
     4a4:	65 e2       	ldi	r22, 0x25	; 37
     4a6:	73 e0       	ldi	r23, 0x03	; 3
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
     4ae:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <abierto>
     4b2:	81 11       	cpse	r24, r1
     4b4:	16 c0       	rjmp	.+44     	; 0x4e2 <portonUltra+0x3e>
     4b6:	91 30       	cpi	r25, 0x01	; 1
     4b8:	51 f4       	brne	.+20     	; 0x4ce <portonUltra+0x2a>
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	e0 e0       	ldi	r30, 0x00	; 0
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	a7 e2       	ldi	r26, 0x27	; 39
     4c2:	b3 e0       	ldi	r27, 0x03	; 3
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <portonUltra+0x20>
     4cc:	08 95       	ret
     4ce:	86 e0       	ldi	r24, 0x06	; 6
     4d0:	e5 e0       	ldi	r30, 0x05	; 5
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	a7 e2       	ldi	r26, 0x27	; 39
     4d6:	b3 e0       	ldi	r27, 0x03	; 3
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	8a 95       	dec	r24
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <portonUltra+0x34>
     4e0:	08 95       	ret
     4e2:	86 e0       	ldi	r24, 0x06	; 6
     4e4:	eb e0       	ldi	r30, 0x0B	; 11
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	a7 e2       	ldi	r26, 0x27	; 39
     4ea:	b3 e0       	ldi	r27, 0x03	; 3
     4ec:	01 90       	ld	r0, Z+
     4ee:	0d 92       	st	X+, r0
     4f0:	8a 95       	dec	r24
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <portonUltra+0x48>
     4f4:	08 95       	ret

000004f6 <read_temperature>:

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	ec 01       	movw	r28, r24
     500:	8b 01       	movw	r16, r22
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     502:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     506:	81 11       	cpse	r24, r1
     508:	22 c0       	rjmp	.+68     	; 0x54e <read_temperature+0x58>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     50a:	80 e9       	ldi	r24, 0x90	; 144
     50c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     510:	81 11       	cpse	r24, r1
     512:	1f c0       	rjmp	.+62     	; 0x552 <read_temperature+0x5c>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     514:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     518:	81 11       	cpse	r24, r1
     51a:	1d c0       	rjmp	.+58     	; 0x556 <read_temperature+0x60>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     51c:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
     520:	81 11       	cpse	r24, r1
     522:	1b c0       	rjmp	.+54     	; 0x55a <read_temperature+0x64>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     524:	81 e9       	ldi	r24, 0x91	; 145
     526:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
     52a:	81 11       	cpse	r24, r1
     52c:	18 c0       	rjmp	.+48     	; 0x55e <read_temperature+0x68>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	ce 01       	movw	r24, r28
     532:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     536:	81 11       	cpse	r24, r1
     538:	14 c0       	rjmp	.+40     	; 0x562 <read_temperature+0x6c>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	c8 01       	movw	r24, r16
     53e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
     542:	c8 2f       	mov	r28, r24
     544:	81 11       	cpse	r24, r1
     546:	0f c0       	rjmp	.+30     	; 0x566 <read_temperature+0x70>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
     548:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

	return 0; // Éxito
     54c:	0d c0       	rjmp	.+26     	; 0x568 <read_temperature+0x72>
	//UART_send_string(buffer);
}

uint8_t read_temperature(uint8_t *high_byte, uint8_t *low_byte) {
	// Inicia la comunicación I2C
	if (I2C_Master_Start() != 0) return 1;
     54e:	c1 e0       	ldi	r28, 0x01	; 1
     550:	0b c0       	rjmp	.+22     	; 0x568 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo escritura
	if (I2C_Master_Write(LM75_ADDRESS << 1) != 0) return 1;
     552:	c1 e0       	ldi	r28, 0x01	; 1
     554:	09 c0       	rjmp	.+18     	; 0x568 <read_temperature+0x72>

	// Envía la dirección del registro de temperatura
	if (I2C_Master_Write(0x00) != 0) return 1;
     556:	c1 e0       	ldi	r28, 0x01	; 1
     558:	07 c0       	rjmp	.+14     	; 0x568 <read_temperature+0x72>

	// Repite la condición de START para lectura
	if (I2C_Master_Start() != 0) return 1;
     55a:	c1 e0       	ldi	r28, 0x01	; 1
     55c:	05 c0       	rjmp	.+10     	; 0x568 <read_temperature+0x72>

	// Envía la dirección del esclavo (LM75) en modo lectura
	if (I2C_Master_Write((LM75_ADDRESS << 1) | 1) != 0) return 1;
     55e:	c1 e0       	ldi	r28, 0x01	; 1
     560:	03 c0       	rjmp	.+6      	; 0x568 <read_temperature+0x72>

	// Lee el byte alto de la temperatura
	if (I2C_Master_Read(high_byte, 1) != 0) return 1;
     562:	c1 e0       	ldi	r28, 0x01	; 1
     564:	01 c0       	rjmp	.+2      	; 0x568 <read_temperature+0x72>

	// Lee el byte bajo de la temperatura
	if (I2C_Master_Read(low_byte, 0) != 0) return 1;
     566:	c1 e0       	ldi	r28, 0x01	; 1

	// Detiene la comunicación I2C
	I2C_Master_Stop();

	return 0; // Éxito
}
     568:	8c 2f       	mov	r24, r28
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <sensorTemp>:
		} else {
		strcpy(buffer1, "error");
	}
}
	
void sensorTemp() {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <sensorTemp+0x6>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_high = 0;
     57e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp_low = 0;
     580:	1a 82       	std	Y+2, r1	; 0x02

	// Lee la temperatura del sensor LM75
	if (read_temperature(&temp_high, &temp_low) == 0) {
     582:	be 01       	movw	r22, r28
     584:	6e 5f       	subi	r22, 0xFE	; 254
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_temperature>
     590:	81 11       	cpse	r24, r1
     592:	3a c0       	rjmp	.+116    	; 0x608 <sensorTemp+0x94>
		// Convierte los datos del sensor a una cadena de texto
		temp_value = (temp_high << 8) | temp_low;
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	98 2f       	mov	r25, r24
     59a:	88 27       	eor	r24, r24
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	82 2b       	or	r24, r18
     5a0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <temp_value+0x1>
     5a4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <temp_value>
		snprintf(buffer, sizeof(buffer), "Temperature: %d C \n\r", temp_value / 256);
     5a8:	9c 01       	movw	r18, r24
     5aa:	33 23       	and	r19, r19
     5ac:	14 f4       	brge	.+4      	; 0x5b2 <sensorTemp+0x3e>
     5ae:	21 50       	subi	r18, 0x01	; 1
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
     5b2:	83 2f       	mov	r24, r19
     5b4:	88 0f       	add	r24, r24
     5b6:	88 0b       	sbc	r24, r24
     5b8:	8f 93       	push	r24
     5ba:	3f 93       	push	r19
     5bc:	87 e1       	ldi	r24, 0x17	; 23
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	1f 92       	push	r1
     5c6:	80 e8       	ldi	r24, 0x80	; 128
     5c8:	8f 93       	push	r24
     5ca:	85 ea       	ldi	r24, 0xA5	; 165
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	0e 94 93 05 	call	0xb26	; 0xb26 <snprintf>

		// Convierte la temperatura a grados Celsius
		int temp2 = (int)(temp_value / 256);
     5d6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <temp_value>
     5da:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <temp_value+0x1>

		// Corrige la comparación para verificar si la temperatura es mayor a 20
		if (temp2 > 20 ) {
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	81 15       	cp	r24, r1
     5ea:	95 41       	sbci	r25, 0x15	; 21
     5ec:	3c f0       	brlt	.+14     	; 0x5fc <sensorTemp+0x88>
			PORTC |= (1 << PORTC2); // Enciende el LED si la temperatura es mayor a 20
     5ee:	88 b1       	in	r24, 0x08	; 8
     5f0:	84 60       	ori	r24, 0x04	; 4
     5f2:	88 b9       	out	0x08, r24	; 8
			ventilador = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ventilador>
     5fa:	0f c0       	rjmp	.+30     	; 0x61a <sensorTemp+0xa6>
			} else {
			PORTC &= ~(1 << PORTC2); // Apaga el LED si la temperatura es 20 o menor
     5fc:	88 b1       	in	r24, 0x08	; 8
     5fe:	8b 7f       	andi	r24, 0xFB	; 251
     600:	88 b9       	out	0x08, r24	; 8
			ventilador =0;
     602:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ventilador>
     606:	09 c0       	rjmp	.+18     	; 0x61a <sensorTemp+0xa6>
		}
		} else {
		// Si hubo un error en la lectura, formatea un mensaje de error
		snprintf(buffer, sizeof(buffer), "Error reading temperature");
     608:	8a e1       	ldi	r24, 0x1A	; 26
     60a:	ec e2       	ldi	r30, 0x2C	; 44
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	a5 ea       	ldi	r26, 0xA5	; 165
     610:	b2 e0       	ldi	r27, 0x02	; 2
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <sensorTemp+0x9e>
	}

	// Envía el mensaje por UART a la consola
	//UART_send_string(buffer);
}
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <LCDcasa>:
	return 0; // Éxito
}

void LCDcasa() {
	// Muestra la temperatura
	snprintf(buffer, sizeof(buffer), "%d C", temp_value / 256);
     624:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <temp_value>
     628:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <temp_value+0x1>
     62c:	99 23       	and	r25, r25
     62e:	14 f4       	brge	.+4      	; 0x634 <LCDcasa+0x10>
     630:	81 50       	subi	r24, 0x01	; 1
     632:	9f 4f       	sbci	r25, 0xFF	; 255
     634:	89 2f       	mov	r24, r25
     636:	88 0f       	add	r24, r24
     638:	88 0b       	sbc	r24, r24
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	86 e4       	ldi	r24, 0x46	; 70
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	1f 92       	push	r1
     648:	80 e8       	ldi	r24, 0x80	; 128
     64a:	8f 93       	push	r24
     64c:	85 ea       	ldi	r24, 0xA5	; 165
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	0e 94 93 05 	call	0xb26	; 0xb26 <snprintf>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("      "); // Limpia la línea
     660:	83 e5       	ldi	r24, 0x53	; 83
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer); // Muestra el valor
     670:	85 ea       	ldi	r24, 0xA5	; 165
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(1, 1); // Posiciona el cursor nuevamente
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("temp:"); // Muestra la etiqueta
     680:	8b e4       	ldi	r24, 0x4B	; 75
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

	// Muestra el estado del portón
	LCD_Set_Cursor(7, 2); // Posiciona el cursor en la segunda línea del LCD
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	87 e0       	ldi	r24, 0x07	; 7
     68c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     690:	81 e5       	ldi	r24, 0x51	; 81
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 2); // Posiciona el cursor nuevamente
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer1); // Muestra el estado del portón
     6a0:	87 e2       	ldi	r24, 0x27	; 39
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(7, 1); // Posiciona el cursor nuevamente
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Gate:"); // Muestra la etiqueta
     6b0:	8a e5       	ldi	r24, 0x5A	; 90
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
	// Muestra el estado del dia
	LCD_Set_Cursor(13, 2); // Posiciona el cursor en la segunda línea del LCD
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("        "); // Limpia la línea
     6c0:	81 e5       	ldi	r24, 0x51	; 81
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(12, 2); // Posiciona el cursor nuevamente
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	8c e0       	ldi	r24, 0x0C	; 12
     6cc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String(buffer2); // Muestra el estado del portón
     6d0:	84 e1       	ldi	r24, 0x14	; 20
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(13, 1); // Posiciona el cursor nuevamente
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	8d e0       	ldi	r24, 0x0D	; 13
     6dc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Day:"); // Muestra la etiqueta
     6e0:	80 e6       	ldi	r24, 0x60	; 96
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
}
     6e8:	8d b7       	in	r24, 0x3d	; 61
     6ea:	9e b7       	in	r25, 0x3e	; 62
     6ec:	08 96       	adiw	r24, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	9e bf       	out	0x3e, r25	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	8d bf       	out	0x3d, r24	; 61
     6f8:	08 95       	ret

000006fa <uartCasa>:

void uartCasa() {
     6fa:	cf 93       	push	r28
	if (UART_available()) {
     6fc:	0e 94 30 05 	call	0xa60	; 0xa60 <UART_available>
     700:	89 2b       	or	r24, r25
     702:	09 f4       	brne	.+2      	; 0x706 <uartCasa+0xc>
     704:	5b c0       	rjmp	.+182    	; 0x7bc <uartCasa+0xc2>
		char comando = UART_receive();
     706:	0e 94 3a 05 	call	0xa74	; 0xa74 <UART_receive>
     70a:	c8 2f       	mov	r28, r24
		UART_send(comando);
     70c:	0e 94 1c 05 	call	0xa38	; 0xa38 <UART_send>
		UART_send_string("\r\n");
     710:	89 ea       	ldi	r24, 0xA9	; 169
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 23 05 	call	0xa46	; 0xa46 <UART_send_string>

		if (estadoVent == 1 && comando == 'm') {
     718:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <estadoVent>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	a1 f4       	brne	.+40     	; 0x748 <uartCasa+0x4e>
     720:	cd 36       	cpi	r28, 0x6D	; 109
     722:	91 f4       	brne	.+36     	; 0x748 <uartCasa+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	81 ee       	ldi	r24, 0xE1	; 225
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	21 50       	subi	r18, 0x01	; 1
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	90 40       	sbci	r25, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <uartCasa+0x30>
     732:	00 c0       	rjmp	.+0      	; 0x734 <uartCasa+0x3a>
     734:	00 00       	nop
			_delay_ms(100);
			UART_send_string("\nCambiando el estado del portón...\r\n");
     736:	85 e6       	ldi	r24, 0x65	; 101
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 23 05 	call	0xa46	; 0xa46 <UART_send_string>
			send_to_slave(SLAVE1, 'm');
     73e:	6d e6       	ldi	r22, 0x6D	; 109
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     746:	3a c0       	rjmp	.+116    	; 0x7bc <uartCasa+0xc2>
		}
		else if (estadoVent == 1 && comando == 'n') {
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	59 f4       	brne	.+22     	; 0x762 <uartCasa+0x68>
     74c:	ce 36       	cpi	r28, 0x6E	; 110
     74e:	49 f4       	brne	.+18     	; 0x762 <uartCasa+0x68>
			UART_send_string("\nCambiando el estado del día...\r\n");
     750:	8a e8       	ldi	r24, 0x8A	; 138
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 23 05 	call	0xa46	; 0xa46 <UART_send_string>
			send_to_slave(SLAVE2, 'n');
     758:	6e e6       	ldi	r22, 0x6E	; 110
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     760:	2d c0       	rjmp	.+90     	; 0x7bc <uartCasa+0xc2>
		}
		else if (estadoVent == 1 && comando == 'o') {
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	b9 f4       	brne	.+46     	; 0x794 <uartCasa+0x9a>
     766:	cf 36       	cpi	r28, 0x6F	; 111
     768:	a9 f4       	brne	.+42     	; 0x794 <uartCasa+0x9a>
			UART_send_string("\nCambiando el estado del ventilador...\r\n");
     76a:	8c ea       	ldi	r24, 0xAC	; 172
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 23 05 	call	0xa46	; 0xa46 <UART_send_string>
			ventilador = !ventilador;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <ventilador>
     778:	91 11       	cpse	r25, r1
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ventilador>
			if (ventilador) {
     780:	88 23       	and	r24, r24
     782:	21 f0       	breq	.+8      	; 0x78c <uartCasa+0x92>
				PORTC |= (1 << PORTC2); // Enciende el LED si el ventilador está encendido
     784:	88 b1       	in	r24, 0x08	; 8
     786:	84 60       	ori	r24, 0x04	; 4
     788:	88 b9       	out	0x08, r24	; 8
     78a:	18 c0       	rjmp	.+48     	; 0x7bc <uartCasa+0xc2>
				} else {
				PORTC &= ~(1 << PORTC2); // Apaga el LED si el ventilador está apagado
     78c:	88 b1       	in	r24, 0x08	; 8
     78e:	8b 7f       	andi	r24, 0xFB	; 251
     790:	88 b9       	out	0x08, r24	; 8
     792:	14 c0       	rjmp	.+40     	; 0x7bc <uartCasa+0xc2>
			}
		}
		else if (comando == 'x') {
     794:	c8 37       	cpi	r28, 0x78	; 120
     796:	71 f4       	brne	.+28     	; 0x7b4 <uartCasa+0xba>
			// Cambia al estado automático (0), manual (1);
			estadoVent = !estadoVent;
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	81 11       	cpse	r24, r1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <estadoVent>
			send_to_slave(SLAVE1,'x');
     7a2:	68 e7       	ldi	r22, 0x78	; 120
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
			send_to_slave(SLAVE2,'x');
     7aa:	68 e7       	ldi	r22, 0x78	; 120
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <uartCasa+0xc2>
			
		}
		else {
			UART_send_string("\nEl comando ingresado no se reconoce\n");
     7b4:	85 ed       	ldi	r24, 0xD5	; 213
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 23 05 	call	0xa46	; 0xa46 <UART_send_string>
		}
	}
	else {
		// UART_send_string("No data available.\r\n");
	}
}
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <setup>:

/*****************************************************************/
void setup(){
	// Configura PC2 como salida para el ventilador
	DDRC |= (1 << DDC2);
     7c0:	87 b1       	in	r24, 0x07	; 7
     7c2:	84 60       	ori	r24, 0x04	; 4
     7c4:	87 b9       	out	0x07, r24	; 7

	// Configurar PB5, PC0, PC1, PC3 como entradas
	DDRB &= ~(1 << DDB5);
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	8f 7d       	andi	r24, 0xDF	; 223
     7ca:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC3));
     7cc:	87 b1       	in	r24, 0x07	; 7
     7ce:	84 7f       	andi	r24, 0xF4	; 244
     7d0:	87 b9       	out	0x07, r24	; 7

	// Habilitar pull-ups internos para PB5, PC0, PC1, PC3
	PORTB |= (1 << PORTB5);
     7d2:	85 b1       	in	r24, 0x05	; 5
     7d4:	80 62       	ori	r24, 0x20	; 32
     7d6:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC3);
     7d8:	88 b1       	in	r24, 0x08	; 8
     7da:	8b 60       	ori	r24, 0x0B	; 11
     7dc:	88 b9       	out	0x08, r24	; 8
     7de:	08 95       	ret

000007e0 <initPCint2>:
}

void initPCint2(void) {
	// Habilitar interrupciones en los botones PB5, PC0, PC1, y PC3
	PCMSK0 |= (1 << PCINT5); // Habilitando PCINT en PB5
     7e0:	eb e6       	ldi	r30, 0x6B	; 107
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 62       	ori	r24, 0x20	; 32
     7e8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT11); // Habilitando PCINT en PC0, PC1, y PC3
     7ea:	ec e6       	ldi	r30, 0x6C	; 108
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	8b 60       	ori	r24, 0x0B	; 11
     7f2:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0) | (1 << PCIE1); // Habilitando las interrupciones de los pines de PCINT[7:0] y PCINT[14:8]
     7f4:	e8 e6       	ldi	r30, 0x68	; 104
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	83 60       	ori	r24, 0x03	; 3
     7fc:	80 83       	st	Z, r24
     7fe:	08 95       	ret

00000800 <__vector_3>:
}

ISR(PCINT0_vect) {
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	8f 93       	push	r24
	if (debounce_counter == 0) {
     80c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <debounce_counter>
     810:	81 11       	cpse	r24, r1
     812:	07 c0       	rjmp	.+14     	; 0x822 <__vector_3+0x22>
		// Verificar cuál pin causó la interrupción para PB5
		if (!(PINB & (1 << PB5))) {
     814:	1d 99       	sbic	0x03, 5	; 3
     816:	05 c0       	rjmp	.+10     	; 0x822 <__vector_3+0x22>
			debounce_flags |= (1 << 0); // Marca el botón PB5
     818:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     81c:	81 60       	ori	r24, 0x01	; 1
     81e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
}
     822:	8f 91       	pop	r24
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_4>:

ISR(PCINT1_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	8f 93       	push	r24
	if (debounce_counter == 0) {
     83a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <debounce_counter>
     83e:	81 11       	cpse	r24, r1
     840:	15 c0       	rjmp	.+42     	; 0x86c <__vector_4+0x3e>
		// Verificar cuál pin causó la interrupción para PC0, PC1, y PC3
		if (!(PINC & (1 << PC0))) {
     842:	30 99       	sbic	0x06, 0	; 6
     844:	05 c0       	rjmp	.+10     	; 0x850 <__vector_4+0x22>
			debounce_flags |= (1 << 1); // Marca el botón PC0
     846:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     84a:	82 60       	ori	r24, 0x02	; 2
     84c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
		if (!(PINC & (1 << PC1))) {
     850:	31 99       	sbic	0x06, 1	; 6
     852:	05 c0       	rjmp	.+10     	; 0x85e <__vector_4+0x30>
			debounce_flags |= (1 << 2); // Marca el botón PC1
     854:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     858:	84 60       	ori	r24, 0x04	; 4
     85a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
		if (!(PINC & (1 << PC3))) {
     85e:	33 99       	sbic	0x06, 3	; 6
     860:	05 c0       	rjmp	.+10     	; 0x86c <__vector_4+0x3e>
			debounce_flags |= (1 << 3); // Marca el botón PC3
     862:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     866:	88 60       	ori	r24, 0x08	; 8
     868:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
}
     86c:	8f 91       	pop	r24
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <__vector_11>:

// Temporizador ISR para manejar el tiempo de antirrebote
ISR(TIMER1_COMPA_vect) {
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
	if (debounce_counter > 0) {
     89a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <debounce_counter>
     89e:	88 23       	and	r24, r24
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <__vector_11+0x2c>
     8a2:	6c c0       	rjmp	.+216    	; 0x97c <__stack+0x7d>
		debounce_counter--;
     8a4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <debounce_counter>
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <debounce_counter>
		if (debounce_counter == 0) {
     8ae:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <debounce_counter>
     8b2:	81 11       	cpse	r24, r1
     8b4:	63 c0       	rjmp	.+198    	; 0x97c <__stack+0x7d>
			// Ejecutar las acciones asociadas a los botones después de que se haya estabilizado
			if (debounce_flags & (1 << 0)) {
     8b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     8ba:	80 ff       	sbrs	r24, 0
     8bc:	18 c0       	rjmp	.+48     	; 0x8ee <__vector_11+0x76>
				estadoVent = !estadoVent;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <estadoVent>
     8c4:	91 11       	cpse	r25, r1
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <estadoVent>
				send_to_slave(SLAVE1,'x');
     8cc:	68 e7       	ldi	r22, 0x78	; 120
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				send_to_slave(SLAVE2,'x');
     8d4:	68 e7       	ldi	r22, 0x78	; 120
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				LCD_Write_String("cambiando estado");
     8dc:	8b ef       	ldi	r24, 0xFB	; 251
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
				debounce_flags &= ~(1 << 0);
     8e4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			}
			if (debounce_flags & (1 << 1)) {
     8ee:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     8f2:	81 ff       	sbrs	r24, 1
     8f4:	11 c0       	rjmp	.+34     	; 0x918 <__stack+0x19>
				if (estadoVent == 1){
     8f6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <estadoVent>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	41 f4       	brne	.+16     	; 0x90e <__stack+0xf>
					send_to_slave(SLAVE1, 'm');
     8fe:	6d e6       	ldi	r22, 0x6D	; 109
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
					LCD_Write_String("cambiando estado");
     906:	8b ef       	ldi	r24, 0xFB	; 251
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

				}
				debounce_flags &= ~(1 << 1);
     90e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     912:	8d 7f       	andi	r24, 0xFD	; 253
     914:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			}
			if (debounce_flags & (1 << 2)) {
     918:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     91c:	82 ff       	sbrs	r24, 2
     91e:	11 c0       	rjmp	.+34     	; 0x942 <__stack+0x43>
				if (estadoVent == 1){
     920:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <estadoVent>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	41 f4       	brne	.+16     	; 0x938 <__stack+0x39>
				send_to_slave(SLAVE2, 'n');
     928:	6e e6       	ldi	r22, 0x6E	; 110
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
				LCD_Write_String("cambiando estado");
     930:	8b ef       	ldi	r24, 0xFB	; 251
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

				}
				debounce_flags &= ~(1 << 2);
     938:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     93c:	8b 7f       	andi	r24, 0xFB	; 251
     93e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			}
			if (debounce_flags & (1 << 3)) {
     942:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     946:	83 ff       	sbrs	r24, 3
     948:	19 c0       	rjmp	.+50     	; 0x97c <__stack+0x7d>
				ventilador = !ventilador;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <ventilador>
     950:	91 11       	cpse	r25, r1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ventilador>
				if (ventilador && estadoVent == 1) {
     958:	88 23       	and	r24, r24
     95a:	41 f0       	breq	.+16     	; 0x96c <__stack+0x6d>
     95c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <estadoVent>
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	21 f4       	brne	.+8      	; 0x96c <__stack+0x6d>
					PORTC |= (1 << PORTC2); // Enciende el LED si el ventilador está encendido
     964:	88 b1       	in	r24, 0x08	; 8
     966:	84 60       	ori	r24, 0x04	; 4
     968:	88 b9       	out	0x08, r24	; 8
     96a:	03 c0       	rjmp	.+6      	; 0x972 <__stack+0x73>
					} else {
					PORTC &= ~(1 << PORTC2); // Apaga el LED si el ventilador está apagado
     96c:	88 b1       	in	r24, 0x08	; 8
     96e:	8b 7f       	andi	r24, 0xFB	; 251
     970:	88 b9       	out	0x08, r24	; 8
				}
				debounce_flags &= ~(1 << 3);
     972:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     976:	87 7f       	andi	r24, 0xF7	; 247
     978:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			}
		}
	}
}
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	7f 91       	pop	r23
     98a:	6f 91       	pop	r22
     98c:	5f 91       	pop	r21
     98e:	4f 91       	pop	r20
     990:	3f 91       	pop	r19
     992:	2f 91       	pop	r18
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	0f 90       	pop	r0
     99a:	1f 90       	pop	r1
     99c:	18 95       	reti

0000099e <main>:

int main(void) {
	UART_init(9600);
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	95 e2       	ldi	r25, 0x25	; 37
     9a2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <UART_init>
	initLCD8bits();
     9a6:	0e 94 c1 01 	call	0x382	; 0x382 <initLCD8bits>
	I2C_Master_Init(100000, 1);
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	60 ea       	ldi	r22, 0xA0	; 160
     9ae:	76 e8       	ldi	r23, 0x86	; 134
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	setup();
     9b8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <setup>
	initPCint2();
     9bc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <initPCint2>
	init_timer1();
     9c0:	0e 94 41 02 	call	0x482	; 0x482 <init_timer1>

	sei();
     9c4:	78 94       	sei

	while (1) {
		uartCasa();
     9c6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <uartCasa>
		sensorTemp();
     9ca:	0e 94 ba 02 	call	0x574	; 0x574 <sensorTemp>
		portonUltra();
     9ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <portonUltra>
		LCDcasa();
     9d2:	0e 94 12 03 	call	0x624	; 0x624 <LCDcasa>
     9d6:	2f ef       	ldi	r18, 0xFF	; 255
     9d8:	85 ea       	ldi	r24, 0xA5	; 165
     9da:	9e e0       	ldi	r25, 0x0E	; 14
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <main+0x3e>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <main+0x48>
     9e6:	00 00       	nop
     9e8:	ee cf       	rjmp	.-36     	; 0x9c6 <main+0x28>

000009ea <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	aa 1f       	adc	r26, r26
     9f4:	bb 1f       	adc	r27, r27
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	9c 01       	movw	r18, r24
     a00:	ad 01       	movw	r20, r26
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	44 1f       	adc	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	74 e2       	ldi	r23, 0x24	; 36
     a16:	84 ef       	ldi	r24, 0xF4	; 244
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 71 05 	call	0xae2	; 0xae2 <__udivmodsi4>
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	31 09       	sbc	r19, r1
     a22:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a26:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a2a:	88 e9       	ldi	r24, 0x98	; 152
     a2c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a36:	08 95       	ret

00000a38 <UART_send>:
     a38:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a3c:	95 ff       	sbrs	r25, 5
     a3e:	fc cf       	rjmp	.-8      	; 0xa38 <UART_send>
     a40:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a44:	08 95       	ret

00000a46 <UART_send_string>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <UART_send_string+0xe>
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	0e 94 1c 05 	call	0xa38	; 0xa38 <UART_send>
     a54:	88 81       	ld	r24, Y
     a56:	81 11       	cpse	r24, r1
     a58:	fa cf       	rjmp	.-12     	; 0xa4e <UART_send_string+0x8>
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <UART_available>:
     a60:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <uart_head>
     a64:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <uart_tail>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	29 13       	cpse	r18, r25
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <UART_available+0x10>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	08 95       	ret

00000a74 <UART_receive>:
     a74:	0e 94 30 05 	call	0xa60	; 0xa60 <UART_available>
     a78:	89 2b       	or	r24, r25
     a7a:	69 f0       	breq	.+26     	; 0xa96 <UART_receive+0x22>
     a7c:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <uart_tail>
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	ec 5d       	subi	r30, 0xDC	; 220
     a84:	fd 4f       	sbci	r31, 0xFD	; 253
     a86:	80 81       	ld	r24, Z
     a88:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <uart_tail>
     a8c:	9f 5f       	subi	r25, 0xFF	; 255
     a8e:	9f 77       	andi	r25, 0x7F	; 127
     a90:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <uart_tail>
     a94:	08 95       	ret
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	08 95       	ret

00000a9a <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
	uint8_t next_head = (uart_head + 1) % sizeof(uart_buffer);
     aac:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <uart_head>
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	8f 77       	andi	r24, 0x7F	; 127

	if (next_head != uart_tail) { // Solo avanzar si el buffer no está lleno
     ab4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <uart_tail>
     ab8:	89 17       	cp	r24, r25
     aba:	51 f0       	breq	.+20     	; 0xad0 <__vector_18+0x36>
		uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
     abc:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <uart_head>
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ac6:	ec 5d       	subi	r30, 0xDC	; 220
     ac8:	fd 4f       	sbci	r31, 0xFD	; 253
     aca:	90 83       	st	Z, r25
		uart_head = next_head; // Actualizar el índice de la cabeza del buffer
     acc:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <uart_head>
	}
}
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <__udivmodsi4>:
     ae2:	a1 e2       	ldi	r26, 0x21	; 33
     ae4:	1a 2e       	mov	r1, r26
     ae6:	aa 1b       	sub	r26, r26
     ae8:	bb 1b       	sub	r27, r27
     aea:	fd 01       	movw	r30, r26
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__udivmodsi4_ep>

00000aee <__udivmodsi4_loop>:
     aee:	aa 1f       	adc	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	ee 1f       	adc	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	a2 17       	cp	r26, r18
     af8:	b3 07       	cpc	r27, r19
     afa:	e4 07       	cpc	r30, r20
     afc:	f5 07       	cpc	r31, r21
     afe:	20 f0       	brcs	.+8      	; 0xb08 <__udivmodsi4_ep>
     b00:	a2 1b       	sub	r26, r18
     b02:	b3 0b       	sbc	r27, r19
     b04:	e4 0b       	sbc	r30, r20
     b06:	f5 0b       	sbc	r31, r21

00000b08 <__udivmodsi4_ep>:
     b08:	66 1f       	adc	r22, r22
     b0a:	77 1f       	adc	r23, r23
     b0c:	88 1f       	adc	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	1a 94       	dec	r1
     b12:	69 f7       	brne	.-38     	; 0xaee <__udivmodsi4_loop>
     b14:	60 95       	com	r22
     b16:	70 95       	com	r23
     b18:	80 95       	com	r24
     b1a:	90 95       	com	r25
     b1c:	9b 01       	movw	r18, r22
     b1e:	ac 01       	movw	r20, r24
     b20:	bd 01       	movw	r22, r26
     b22:	cf 01       	movw	r24, r30
     b24:	08 95       	ret

00000b26 <snprintf>:
     b26:	ae e0       	ldi	r26, 0x0E	; 14
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e9 e9       	ldi	r30, 0x99	; 153
     b2c:	f5 e0       	ldi	r31, 0x05	; 5
     b2e:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__prologue_saves__+0x1c>
     b32:	0d 89       	ldd	r16, Y+21	; 0x15
     b34:	1e 89       	ldd	r17, Y+22	; 0x16
     b36:	8f 89       	ldd	r24, Y+23	; 0x17
     b38:	98 8d       	ldd	r25, Y+24	; 0x18
     b3a:	26 e0       	ldi	r18, 0x06	; 6
     b3c:	2c 83       	std	Y+4, r18	; 0x04
     b3e:	1a 83       	std	Y+2, r17	; 0x02
     b40:	09 83       	std	Y+1, r16	; 0x01
     b42:	97 ff       	sbrs	r25, 7
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <snprintf+0x24>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e8       	ldi	r25, 0x80	; 128
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9e 83       	std	Y+6, r25	; 0x06
     b4e:	8d 83       	std	Y+5, r24	; 0x05
     b50:	ae 01       	movw	r20, r28
     b52:	45 5e       	subi	r20, 0xE5	; 229
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	69 8d       	ldd	r22, Y+25	; 0x19
     b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	0e 94 c3 05 	call	0xb86	; 0xb86 <vfprintf>
     b62:	4d 81       	ldd	r20, Y+5	; 0x05
     b64:	5e 81       	ldd	r21, Y+6	; 0x06
     b66:	57 fd       	sbrc	r21, 7
     b68:	0a c0       	rjmp	.+20     	; 0xb7e <snprintf+0x58>
     b6a:	2f 81       	ldd	r18, Y+7	; 0x07
     b6c:	38 85       	ldd	r19, Y+8	; 0x08
     b6e:	42 17       	cp	r20, r18
     b70:	53 07       	cpc	r21, r19
     b72:	0c f4       	brge	.+2      	; 0xb76 <snprintf+0x50>
     b74:	9a 01       	movw	r18, r20
     b76:	f8 01       	movw	r30, r16
     b78:	e2 0f       	add	r30, r18
     b7a:	f3 1f       	adc	r31, r19
     b7c:	10 82       	st	Z, r1
     b7e:	2e 96       	adiw	r28, 0x0e	; 14
     b80:	e4 e0       	ldi	r30, 0x04	; 4
     b82:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__epilogue_restores__+0x1c>

00000b86 <vfprintf>:
     b86:	ab e0       	ldi	r26, 0x0B	; 11
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 ec       	ldi	r30, 0xC9	; 201
     b8c:	f5 e0       	ldi	r31, 0x05	; 5
     b8e:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__prologue_saves__>
     b92:	6c 01       	movw	r12, r24
     b94:	7b 01       	movw	r14, r22
     b96:	8a 01       	movw	r16, r20
     b98:	fc 01       	movw	r30, r24
     b9a:	17 82       	std	Z+7, r1	; 0x07
     b9c:	16 82       	std	Z+6, r1	; 0x06
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	81 ff       	sbrs	r24, 1
     ba2:	cc c1       	rjmp	.+920    	; 0xf3c <vfprintf+0x3b6>
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	3c 01       	movw	r6, r24
     baa:	f6 01       	movw	r30, r12
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	f7 01       	movw	r30, r14
     bb0:	93 fd       	sbrc	r25, 3
     bb2:	85 91       	lpm	r24, Z+
     bb4:	93 ff       	sbrs	r25, 3
     bb6:	81 91       	ld	r24, Z+
     bb8:	7f 01       	movw	r14, r30
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <vfprintf+0x3a>
     bbe:	ba c1       	rjmp	.+884    	; 0xf34 <vfprintf+0x3ae>
     bc0:	85 32       	cpi	r24, 0x25	; 37
     bc2:	39 f4       	brne	.+14     	; 0xbd2 <vfprintf+0x4c>
     bc4:	93 fd       	sbrc	r25, 3
     bc6:	85 91       	lpm	r24, Z+
     bc8:	93 ff       	sbrs	r25, 3
     bca:	81 91       	ld	r24, Z+
     bcc:	7f 01       	movw	r14, r30
     bce:	85 32       	cpi	r24, 0x25	; 37
     bd0:	29 f4       	brne	.+10     	; 0xbdc <vfprintf+0x56>
     bd2:	b6 01       	movw	r22, r12
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     bda:	e7 cf       	rjmp	.-50     	; 0xbaa <vfprintf+0x24>
     bdc:	91 2c       	mov	r9, r1
     bde:	21 2c       	mov	r2, r1
     be0:	31 2c       	mov	r3, r1
     be2:	ff e1       	ldi	r31, 0x1F	; 31
     be4:	f3 15       	cp	r31, r3
     be6:	d8 f0       	brcs	.+54     	; 0xc1e <vfprintf+0x98>
     be8:	8b 32       	cpi	r24, 0x2B	; 43
     bea:	79 f0       	breq	.+30     	; 0xc0a <vfprintf+0x84>
     bec:	38 f4       	brcc	.+14     	; 0xbfc <vfprintf+0x76>
     bee:	80 32       	cpi	r24, 0x20	; 32
     bf0:	79 f0       	breq	.+30     	; 0xc10 <vfprintf+0x8a>
     bf2:	83 32       	cpi	r24, 0x23	; 35
     bf4:	a1 f4       	brne	.+40     	; 0xc1e <vfprintf+0x98>
     bf6:	23 2d       	mov	r18, r3
     bf8:	20 61       	ori	r18, 0x10	; 16
     bfa:	1d c0       	rjmp	.+58     	; 0xc36 <vfprintf+0xb0>
     bfc:	8d 32       	cpi	r24, 0x2D	; 45
     bfe:	61 f0       	breq	.+24     	; 0xc18 <vfprintf+0x92>
     c00:	80 33       	cpi	r24, 0x30	; 48
     c02:	69 f4       	brne	.+26     	; 0xc1e <vfprintf+0x98>
     c04:	23 2d       	mov	r18, r3
     c06:	21 60       	ori	r18, 0x01	; 1
     c08:	16 c0       	rjmp	.+44     	; 0xc36 <vfprintf+0xb0>
     c0a:	83 2d       	mov	r24, r3
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	38 2e       	mov	r3, r24
     c10:	e3 2d       	mov	r30, r3
     c12:	e4 60       	ori	r30, 0x04	; 4
     c14:	3e 2e       	mov	r3, r30
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <vfprintf+0xe6>
     c18:	f3 2d       	mov	r31, r3
     c1a:	f8 60       	ori	r31, 0x08	; 8
     c1c:	1d c0       	rjmp	.+58     	; 0xc58 <vfprintf+0xd2>
     c1e:	37 fc       	sbrc	r3, 7
     c20:	2d c0       	rjmp	.+90     	; 0xc7c <vfprintf+0xf6>
     c22:	20 ed       	ldi	r18, 0xD0	; 208
     c24:	28 0f       	add	r18, r24
     c26:	2a 30       	cpi	r18, 0x0A	; 10
     c28:	40 f0       	brcs	.+16     	; 0xc3a <vfprintf+0xb4>
     c2a:	8e 32       	cpi	r24, 0x2E	; 46
     c2c:	b9 f4       	brne	.+46     	; 0xc5c <vfprintf+0xd6>
     c2e:	36 fc       	sbrc	r3, 6
     c30:	81 c1       	rjmp	.+770    	; 0xf34 <vfprintf+0x3ae>
     c32:	23 2d       	mov	r18, r3
     c34:	20 64       	ori	r18, 0x40	; 64
     c36:	32 2e       	mov	r3, r18
     c38:	19 c0       	rjmp	.+50     	; 0xc6c <vfprintf+0xe6>
     c3a:	36 fe       	sbrs	r3, 6
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <vfprintf+0xc4>
     c3e:	8a e0       	ldi	r24, 0x0A	; 10
     c40:	98 9e       	mul	r9, r24
     c42:	20 0d       	add	r18, r0
     c44:	11 24       	eor	r1, r1
     c46:	92 2e       	mov	r9, r18
     c48:	11 c0       	rjmp	.+34     	; 0xc6c <vfprintf+0xe6>
     c4a:	ea e0       	ldi	r30, 0x0A	; 10
     c4c:	2e 9e       	mul	r2, r30
     c4e:	20 0d       	add	r18, r0
     c50:	11 24       	eor	r1, r1
     c52:	22 2e       	mov	r2, r18
     c54:	f3 2d       	mov	r31, r3
     c56:	f0 62       	ori	r31, 0x20	; 32
     c58:	3f 2e       	mov	r3, r31
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <vfprintf+0xe6>
     c5c:	8c 36       	cpi	r24, 0x6C	; 108
     c5e:	21 f4       	brne	.+8      	; 0xc68 <vfprintf+0xe2>
     c60:	83 2d       	mov	r24, r3
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	38 2e       	mov	r3, r24
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0xe6>
     c68:	88 36       	cpi	r24, 0x68	; 104
     c6a:	41 f4       	brne	.+16     	; 0xc7c <vfprintf+0xf6>
     c6c:	f7 01       	movw	r30, r14
     c6e:	93 fd       	sbrc	r25, 3
     c70:	85 91       	lpm	r24, Z+
     c72:	93 ff       	sbrs	r25, 3
     c74:	81 91       	ld	r24, Z+
     c76:	7f 01       	movw	r14, r30
     c78:	81 11       	cpse	r24, r1
     c7a:	b3 cf       	rjmp	.-154    	; 0xbe2 <vfprintf+0x5c>
     c7c:	98 2f       	mov	r25, r24
     c7e:	9f 7d       	andi	r25, 0xDF	; 223
     c80:	95 54       	subi	r25, 0x45	; 69
     c82:	93 30       	cpi	r25, 0x03	; 3
     c84:	28 f4       	brcc	.+10     	; 0xc90 <vfprintf+0x10a>
     c86:	0c 5f       	subi	r16, 0xFC	; 252
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	9f e3       	ldi	r25, 0x3F	; 63
     c8c:	99 83       	std	Y+1, r25	; 0x01
     c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vfprintf+0x124>
     c90:	83 36       	cpi	r24, 0x63	; 99
     c92:	31 f0       	breq	.+12     	; 0xca0 <vfprintf+0x11a>
     c94:	83 37       	cpi	r24, 0x73	; 115
     c96:	71 f0       	breq	.+28     	; 0xcb4 <vfprintf+0x12e>
     c98:	83 35       	cpi	r24, 0x53	; 83
     c9a:	09 f0       	breq	.+2      	; 0xc9e <vfprintf+0x118>
     c9c:	59 c0       	rjmp	.+178    	; 0xd50 <vfprintf+0x1ca>
     c9e:	21 c0       	rjmp	.+66     	; 0xce2 <vfprintf+0x15c>
     ca0:	f8 01       	movw	r30, r16
     ca2:	80 81       	ld	r24, Z
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	0e 5f       	subi	r16, 0xFE	; 254
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	88 24       	eor	r8, r8
     cac:	83 94       	inc	r8
     cae:	91 2c       	mov	r9, r1
     cb0:	53 01       	movw	r10, r6
     cb2:	13 c0       	rjmp	.+38     	; 0xcda <vfprintf+0x154>
     cb4:	28 01       	movw	r4, r16
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	4f 0e       	add	r4, r31
     cba:	51 1c       	adc	r5, r1
     cbc:	f8 01       	movw	r30, r16
     cbe:	a0 80       	ld	r10, Z
     cc0:	b1 80       	ldd	r11, Z+1	; 0x01
     cc2:	36 fe       	sbrs	r3, 6
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x146>
     cc6:	69 2d       	mov	r22, r9
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x14a>
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	7f ef       	ldi	r23, 0xFF	; 255
     cd0:	c5 01       	movw	r24, r10
     cd2:	0e 94 af 07 	call	0xf5e	; 0xf5e <strnlen>
     cd6:	4c 01       	movw	r8, r24
     cd8:	82 01       	movw	r16, r4
     cda:	f3 2d       	mov	r31, r3
     cdc:	ff 77       	andi	r31, 0x7F	; 127
     cde:	3f 2e       	mov	r3, r31
     ce0:	16 c0       	rjmp	.+44     	; 0xd0e <vfprintf+0x188>
     ce2:	28 01       	movw	r4, r16
     ce4:	22 e0       	ldi	r18, 0x02	; 2
     ce6:	42 0e       	add	r4, r18
     ce8:	51 1c       	adc	r5, r1
     cea:	f8 01       	movw	r30, r16
     cec:	a0 80       	ld	r10, Z
     cee:	b1 80       	ldd	r11, Z+1	; 0x01
     cf0:	36 fe       	sbrs	r3, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x174>
     cf4:	69 2d       	mov	r22, r9
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x178>
     cfa:	6f ef       	ldi	r22, 0xFF	; 255
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	c5 01       	movw	r24, r10
     d00:	0e 94 a4 07 	call	0xf48	; 0xf48 <strnlen_P>
     d04:	4c 01       	movw	r8, r24
     d06:	f3 2d       	mov	r31, r3
     d08:	f0 68       	ori	r31, 0x80	; 128
     d0a:	3f 2e       	mov	r3, r31
     d0c:	82 01       	movw	r16, r4
     d0e:	33 fc       	sbrc	r3, 3
     d10:	1b c0       	rjmp	.+54     	; 0xd48 <vfprintf+0x1c2>
     d12:	82 2d       	mov	r24, r2
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	88 16       	cp	r8, r24
     d18:	99 06       	cpc	r9, r25
     d1a:	b0 f4       	brcc	.+44     	; 0xd48 <vfprintf+0x1c2>
     d1c:	b6 01       	movw	r22, r12
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     d26:	2a 94       	dec	r2
     d28:	f4 cf       	rjmp	.-24     	; 0xd12 <vfprintf+0x18c>
     d2a:	f5 01       	movw	r30, r10
     d2c:	37 fc       	sbrc	r3, 7
     d2e:	85 91       	lpm	r24, Z+
     d30:	37 fe       	sbrs	r3, 7
     d32:	81 91       	ld	r24, Z+
     d34:	5f 01       	movw	r10, r30
     d36:	b6 01       	movw	r22, r12
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     d3e:	21 10       	cpse	r2, r1
     d40:	2a 94       	dec	r2
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	82 1a       	sub	r8, r18
     d46:	91 08       	sbc	r9, r1
     d48:	81 14       	cp	r8, r1
     d4a:	91 04       	cpc	r9, r1
     d4c:	71 f7       	brne	.-36     	; 0xd2a <vfprintf+0x1a4>
     d4e:	e8 c0       	rjmp	.+464    	; 0xf20 <vfprintf+0x39a>
     d50:	84 36       	cpi	r24, 0x64	; 100
     d52:	11 f0       	breq	.+4      	; 0xd58 <vfprintf+0x1d2>
     d54:	89 36       	cpi	r24, 0x69	; 105
     d56:	41 f5       	brne	.+80     	; 0xda8 <vfprintf+0x222>
     d58:	f8 01       	movw	r30, r16
     d5a:	37 fe       	sbrs	r3, 7
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <vfprintf+0x1e6>
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	0c 5f       	subi	r16, 0xFC	; 252
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <vfprintf+0x1f6>
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	07 2e       	mov	r0, r23
     d72:	00 0c       	add	r0, r0
     d74:	88 0b       	sbc	r24, r24
     d76:	99 0b       	sbc	r25, r25
     d78:	0e 5f       	subi	r16, 0xFE	; 254
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	f3 2d       	mov	r31, r3
     d7e:	ff 76       	andi	r31, 0x6F	; 111
     d80:	3f 2e       	mov	r3, r31
     d82:	97 ff       	sbrs	r25, 7
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <vfprintf+0x212>
     d86:	90 95       	com	r25
     d88:	80 95       	com	r24
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	f0 68       	ori	r31, 0x80	; 128
     d96:	3f 2e       	mov	r3, r31
     d98:	2a e0       	ldi	r18, 0x0A	; 10
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	a3 01       	movw	r20, r6
     d9e:	0e 94 f6 07 	call	0xfec	; 0xfec <__ultoa_invert>
     da2:	88 2e       	mov	r8, r24
     da4:	86 18       	sub	r8, r6
     da6:	45 c0       	rjmp	.+138    	; 0xe32 <vfprintf+0x2ac>
     da8:	85 37       	cpi	r24, 0x75	; 117
     daa:	31 f4       	brne	.+12     	; 0xdb8 <vfprintf+0x232>
     dac:	23 2d       	mov	r18, r3
     dae:	2f 7e       	andi	r18, 0xEF	; 239
     db0:	b2 2e       	mov	r11, r18
     db2:	2a e0       	ldi	r18, 0x0A	; 10
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	25 c0       	rjmp	.+74     	; 0xe02 <vfprintf+0x27c>
     db8:	93 2d       	mov	r25, r3
     dba:	99 7f       	andi	r25, 0xF9	; 249
     dbc:	b9 2e       	mov	r11, r25
     dbe:	8f 36       	cpi	r24, 0x6F	; 111
     dc0:	c1 f0       	breq	.+48     	; 0xdf2 <vfprintf+0x26c>
     dc2:	18 f4       	brcc	.+6      	; 0xdca <vfprintf+0x244>
     dc4:	88 35       	cpi	r24, 0x58	; 88
     dc6:	79 f0       	breq	.+30     	; 0xde6 <vfprintf+0x260>
     dc8:	b5 c0       	rjmp	.+362    	; 0xf34 <vfprintf+0x3ae>
     dca:	80 37       	cpi	r24, 0x70	; 112
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <vfprintf+0x24e>
     dce:	88 37       	cpi	r24, 0x78	; 120
     dd0:	21 f0       	breq	.+8      	; 0xdda <vfprintf+0x254>
     dd2:	b0 c0       	rjmp	.+352    	; 0xf34 <vfprintf+0x3ae>
     dd4:	e9 2f       	mov	r30, r25
     dd6:	e0 61       	ori	r30, 0x10	; 16
     dd8:	be 2e       	mov	r11, r30
     dda:	b4 fe       	sbrs	r11, 4
     ddc:	0d c0       	rjmp	.+26     	; 0xdf8 <vfprintf+0x272>
     dde:	fb 2d       	mov	r31, r11
     de0:	f4 60       	ori	r31, 0x04	; 4
     de2:	bf 2e       	mov	r11, r31
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <vfprintf+0x272>
     de6:	34 fe       	sbrs	r3, 4
     de8:	0a c0       	rjmp	.+20     	; 0xdfe <vfprintf+0x278>
     dea:	29 2f       	mov	r18, r25
     dec:	26 60       	ori	r18, 0x06	; 6
     dee:	b2 2e       	mov	r11, r18
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <vfprintf+0x278>
     df2:	28 e0       	ldi	r18, 0x08	; 8
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <vfprintf+0x27c>
     df8:	20 e1       	ldi	r18, 0x10	; 16
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x27c>
     dfe:	20 e1       	ldi	r18, 0x10	; 16
     e00:	32 e0       	ldi	r19, 0x02	; 2
     e02:	f8 01       	movw	r30, r16
     e04:	b7 fe       	sbrs	r11, 7
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <vfprintf+0x290>
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	0c 5f       	subi	r16, 0xFC	; 252
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <vfprintf+0x29c>
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 5f       	subi	r16, 0xFE	; 254
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	a3 01       	movw	r20, r6
     e24:	0e 94 f6 07 	call	0xfec	; 0xfec <__ultoa_invert>
     e28:	88 2e       	mov	r8, r24
     e2a:	86 18       	sub	r8, r6
     e2c:	fb 2d       	mov	r31, r11
     e2e:	ff 77       	andi	r31, 0x7F	; 127
     e30:	3f 2e       	mov	r3, r31
     e32:	36 fe       	sbrs	r3, 6
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <vfprintf+0x2ca>
     e36:	23 2d       	mov	r18, r3
     e38:	2e 7f       	andi	r18, 0xFE	; 254
     e3a:	a2 2e       	mov	r10, r18
     e3c:	89 14       	cp	r8, r9
     e3e:	58 f4       	brcc	.+22     	; 0xe56 <vfprintf+0x2d0>
     e40:	34 fe       	sbrs	r3, 4
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <vfprintf+0x2d4>
     e44:	32 fc       	sbrc	r3, 2
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <vfprintf+0x2d4>
     e48:	83 2d       	mov	r24, r3
     e4a:	8e 7e       	andi	r24, 0xEE	; 238
     e4c:	a8 2e       	mov	r10, r24
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <vfprintf+0x2d4>
     e50:	b8 2c       	mov	r11, r8
     e52:	a3 2c       	mov	r10, r3
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <vfprintf+0x2d6>
     e56:	b8 2c       	mov	r11, r8
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <vfprintf+0x2d6>
     e5a:	b9 2c       	mov	r11, r9
     e5c:	a4 fe       	sbrs	r10, 4
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <vfprintf+0x2f8>
     e60:	fe 01       	movw	r30, r28
     e62:	e8 0d       	add	r30, r8
     e64:	f1 1d       	adc	r31, r1
     e66:	80 81       	ld	r24, Z
     e68:	80 33       	cpi	r24, 0x30	; 48
     e6a:	21 f4       	brne	.+8      	; 0xe74 <vfprintf+0x2ee>
     e6c:	9a 2d       	mov	r25, r10
     e6e:	99 7e       	andi	r25, 0xE9	; 233
     e70:	a9 2e       	mov	r10, r25
     e72:	09 c0       	rjmp	.+18     	; 0xe86 <vfprintf+0x300>
     e74:	a2 fe       	sbrs	r10, 2
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <vfprintf+0x2fe>
     e78:	b3 94       	inc	r11
     e7a:	b3 94       	inc	r11
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <vfprintf+0x300>
     e7e:	8a 2d       	mov	r24, r10
     e80:	86 78       	andi	r24, 0x86	; 134
     e82:	09 f0       	breq	.+2      	; 0xe86 <vfprintf+0x300>
     e84:	b3 94       	inc	r11
     e86:	a3 fc       	sbrc	r10, 3
     e88:	11 c0       	rjmp	.+34     	; 0xeac <vfprintf+0x326>
     e8a:	a0 fe       	sbrs	r10, 0
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x314>
     e8e:	b2 14       	cp	r11, r2
     e90:	88 f4       	brcc	.+34     	; 0xeb4 <vfprintf+0x32e>
     e92:	28 0c       	add	r2, r8
     e94:	92 2c       	mov	r9, r2
     e96:	9b 18       	sub	r9, r11
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <vfprintf+0x330>
     e9a:	b2 14       	cp	r11, r2
     e9c:	60 f4       	brcc	.+24     	; 0xeb6 <vfprintf+0x330>
     e9e:	b6 01       	movw	r22, r12
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ea8:	b3 94       	inc	r11
     eaa:	f7 cf       	rjmp	.-18     	; 0xe9a <vfprintf+0x314>
     eac:	b2 14       	cp	r11, r2
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <vfprintf+0x330>
     eb0:	2b 18       	sub	r2, r11
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0x332>
     eb4:	98 2c       	mov	r9, r8
     eb6:	21 2c       	mov	r2, r1
     eb8:	a4 fe       	sbrs	r10, 4
     eba:	10 c0       	rjmp	.+32     	; 0xedc <vfprintf+0x356>
     ebc:	b6 01       	movw	r22, r12
     ebe:	80 e3       	ldi	r24, 0x30	; 48
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ec6:	a2 fe       	sbrs	r10, 2
     ec8:	17 c0       	rjmp	.+46     	; 0xef8 <vfprintf+0x372>
     eca:	a1 fc       	sbrc	r10, 1
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfprintf+0x34e>
     ece:	88 e7       	ldi	r24, 0x78	; 120
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x352>
     ed4:	88 e5       	ldi	r24, 0x58	; 88
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b6 01       	movw	r22, r12
     eda:	0c c0       	rjmp	.+24     	; 0xef4 <vfprintf+0x36e>
     edc:	8a 2d       	mov	r24, r10
     ede:	86 78       	andi	r24, 0x86	; 134
     ee0:	59 f0       	breq	.+22     	; 0xef8 <vfprintf+0x372>
     ee2:	a1 fe       	sbrs	r10, 1
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x364>
     ee6:	8b e2       	ldi	r24, 0x2B	; 43
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <vfprintf+0x366>
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	a7 fc       	sbrc	r10, 7
     eee:	8d e2       	ldi	r24, 0x2D	; 45
     ef0:	b6 01       	movw	r22, r12
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ef8:	89 14       	cp	r8, r9
     efa:	38 f4       	brcc	.+14     	; 0xf0a <vfprintf+0x384>
     efc:	b6 01       	movw	r22, r12
     efe:	80 e3       	ldi	r24, 0x30	; 48
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f06:	9a 94       	dec	r9
     f08:	f7 cf       	rjmp	.-18     	; 0xef8 <vfprintf+0x372>
     f0a:	8a 94       	dec	r8
     f0c:	f3 01       	movw	r30, r6
     f0e:	e8 0d       	add	r30, r8
     f10:	f1 1d       	adc	r31, r1
     f12:	80 81       	ld	r24, Z
     f14:	b6 01       	movw	r22, r12
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f1c:	81 10       	cpse	r8, r1
     f1e:	f5 cf       	rjmp	.-22     	; 0xf0a <vfprintf+0x384>
     f20:	22 20       	and	r2, r2
     f22:	09 f4       	brne	.+2      	; 0xf26 <vfprintf+0x3a0>
     f24:	42 ce       	rjmp	.-892    	; 0xbaa <vfprintf+0x24>
     f26:	b6 01       	movw	r22, r12
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f30:	2a 94       	dec	r2
     f32:	f6 cf       	rjmp	.-20     	; 0xf20 <vfprintf+0x39a>
     f34:	f6 01       	movw	r30, r12
     f36:	86 81       	ldd	r24, Z+6	; 0x06
     f38:	97 81       	ldd	r25, Z+7	; 0x07
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x3ba>
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	2b 96       	adiw	r28, 0x0b	; 11
     f42:	e2 e1       	ldi	r30, 0x12	; 18
     f44:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__epilogue_restores__>

00000f48 <strnlen_P>:
     f48:	fc 01       	movw	r30, r24
     f4a:	05 90       	lpm	r0, Z+
     f4c:	61 50       	subi	r22, 0x01	; 1
     f4e:	70 40       	sbci	r23, 0x00	; 0
     f50:	01 10       	cpse	r0, r1
     f52:	d8 f7       	brcc	.-10     	; 0xf4a <strnlen_P+0x2>
     f54:	80 95       	com	r24
     f56:	90 95       	com	r25
     f58:	8e 0f       	add	r24, r30
     f5a:	9f 1f       	adc	r25, r31
     f5c:	08 95       	ret

00000f5e <strnlen>:
     f5e:	fc 01       	movw	r30, r24
     f60:	61 50       	subi	r22, 0x01	; 1
     f62:	70 40       	sbci	r23, 0x00	; 0
     f64:	01 90       	ld	r0, Z+
     f66:	01 10       	cpse	r0, r1
     f68:	d8 f7       	brcc	.-10     	; 0xf60 <strnlen+0x2>
     f6a:	80 95       	com	r24
     f6c:	90 95       	com	r25
     f6e:	8e 0f       	add	r24, r30
     f70:	9f 1f       	adc	r25, r31
     f72:	08 95       	ret

00000f74 <fputc>:
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	fb 01       	movw	r30, r22
     f7e:	23 81       	ldd	r18, Z+3	; 0x03
     f80:	21 fd       	sbrc	r18, 1
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <fputc+0x16>
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	2c c0       	rjmp	.+88     	; 0xfe2 <fputc+0x6e>
     f8a:	22 ff       	sbrs	r18, 2
     f8c:	16 c0       	rjmp	.+44     	; 0xfba <fputc+0x46>
     f8e:	46 81       	ldd	r20, Z+6	; 0x06
     f90:	57 81       	ldd	r21, Z+7	; 0x07
     f92:	24 81       	ldd	r18, Z+4	; 0x04
     f94:	35 81       	ldd	r19, Z+5	; 0x05
     f96:	42 17       	cp	r20, r18
     f98:	53 07       	cpc	r21, r19
     f9a:	44 f4       	brge	.+16     	; 0xfac <fputc+0x38>
     f9c:	a0 81       	ld	r26, Z
     f9e:	b1 81       	ldd	r27, Z+1	; 0x01
     fa0:	9d 01       	movw	r18, r26
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	31 83       	std	Z+1, r19	; 0x01
     fa8:	20 83       	st	Z, r18
     faa:	8c 93       	st	X, r24
     fac:	26 81       	ldd	r18, Z+6	; 0x06
     fae:	37 81       	ldd	r19, Z+7	; 0x07
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	37 83       	std	Z+7, r19	; 0x07
     fb6:	26 83       	std	Z+6, r18	; 0x06
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <fputc+0x6e>
     fba:	8b 01       	movw	r16, r22
     fbc:	ec 01       	movw	r28, r24
     fbe:	fb 01       	movw	r30, r22
     fc0:	00 84       	ldd	r0, Z+8	; 0x08
     fc2:	f1 85       	ldd	r31, Z+9	; 0x09
     fc4:	e0 2d       	mov	r30, r0
     fc6:	09 95       	icall
     fc8:	89 2b       	or	r24, r25
     fca:	e1 f6       	brne	.-72     	; 0xf84 <fputc+0x10>
     fcc:	d8 01       	movw	r26, r16
     fce:	16 96       	adiw	r26, 0x06	; 6
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	17 97       	sbiw	r26, 0x07	; 7
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	17 96       	adiw	r26, 0x07	; 7
     fda:	9c 93       	st	X, r25
     fdc:	8e 93       	st	-X, r24
     fde:	16 97       	sbiw	r26, 0x06	; 6
     fe0:	ce 01       	movw	r24, r28
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <__ultoa_invert>:
     fec:	fa 01       	movw	r30, r20
     fee:	aa 27       	eor	r26, r26
     ff0:	28 30       	cpi	r18, 0x08	; 8
     ff2:	51 f1       	breq	.+84     	; 0x1048 <__ultoa_invert+0x5c>
     ff4:	20 31       	cpi	r18, 0x10	; 16
     ff6:	81 f1       	breq	.+96     	; 0x1058 <__ultoa_invert+0x6c>
     ff8:	e8 94       	clt
     ffa:	6f 93       	push	r22
     ffc:	6e 7f       	andi	r22, 0xFE	; 254
     ffe:	6e 5f       	subi	r22, 0xFE	; 254
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	af 4f       	sbci	r26, 0xFF	; 255
    1008:	b1 e0       	ldi	r27, 0x01	; 1
    100a:	3e d0       	rcall	.+124    	; 0x1088 <__ultoa_invert+0x9c>
    100c:	b4 e0       	ldi	r27, 0x04	; 4
    100e:	3c d0       	rcall	.+120    	; 0x1088 <__ultoa_invert+0x9c>
    1010:	67 0f       	add	r22, r23
    1012:	78 1f       	adc	r23, r24
    1014:	89 1f       	adc	r24, r25
    1016:	9a 1f       	adc	r25, r26
    1018:	a1 1d       	adc	r26, r1
    101a:	68 0f       	add	r22, r24
    101c:	79 1f       	adc	r23, r25
    101e:	8a 1f       	adc	r24, r26
    1020:	91 1d       	adc	r25, r1
    1022:	a1 1d       	adc	r26, r1
    1024:	6a 0f       	add	r22, r26
    1026:	71 1d       	adc	r23, r1
    1028:	81 1d       	adc	r24, r1
    102a:	91 1d       	adc	r25, r1
    102c:	a1 1d       	adc	r26, r1
    102e:	20 d0       	rcall	.+64     	; 0x1070 <__ultoa_invert+0x84>
    1030:	09 f4       	brne	.+2      	; 0x1034 <__ultoa_invert+0x48>
    1032:	68 94       	set
    1034:	3f 91       	pop	r19
    1036:	2a e0       	ldi	r18, 0x0A	; 10
    1038:	26 9f       	mul	r18, r22
    103a:	11 24       	eor	r1, r1
    103c:	30 19       	sub	r19, r0
    103e:	30 5d       	subi	r19, 0xD0	; 208
    1040:	31 93       	st	Z+, r19
    1042:	de f6       	brtc	.-74     	; 0xffa <__ultoa_invert+0xe>
    1044:	cf 01       	movw	r24, r30
    1046:	08 95       	ret
    1048:	46 2f       	mov	r20, r22
    104a:	47 70       	andi	r20, 0x07	; 7
    104c:	40 5d       	subi	r20, 0xD0	; 208
    104e:	41 93       	st	Z+, r20
    1050:	b3 e0       	ldi	r27, 0x03	; 3
    1052:	0f d0       	rcall	.+30     	; 0x1072 <__ultoa_invert+0x86>
    1054:	c9 f7       	brne	.-14     	; 0x1048 <__ultoa_invert+0x5c>
    1056:	f6 cf       	rjmp	.-20     	; 0x1044 <__ultoa_invert+0x58>
    1058:	46 2f       	mov	r20, r22
    105a:	4f 70       	andi	r20, 0x0F	; 15
    105c:	40 5d       	subi	r20, 0xD0	; 208
    105e:	4a 33       	cpi	r20, 0x3A	; 58
    1060:	18 f0       	brcs	.+6      	; 0x1068 <__ultoa_invert+0x7c>
    1062:	49 5d       	subi	r20, 0xD9	; 217
    1064:	31 fd       	sbrc	r19, 1
    1066:	40 52       	subi	r20, 0x20	; 32
    1068:	41 93       	st	Z+, r20
    106a:	02 d0       	rcall	.+4      	; 0x1070 <__ultoa_invert+0x84>
    106c:	a9 f7       	brne	.-22     	; 0x1058 <__ultoa_invert+0x6c>
    106e:	ea cf       	rjmp	.-44     	; 0x1044 <__ultoa_invert+0x58>
    1070:	b4 e0       	ldi	r27, 0x04	; 4
    1072:	a6 95       	lsr	r26
    1074:	97 95       	ror	r25
    1076:	87 95       	ror	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	ba 95       	dec	r27
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__ultoa_invert+0x86>
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 05       	cpc	r22, r1
    1084:	71 05       	cpc	r23, r1
    1086:	08 95       	ret
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	0a 2e       	mov	r0, r26
    108e:	06 94       	lsr	r0
    1090:	57 95       	ror	r21
    1092:	47 95       	ror	r20
    1094:	37 95       	ror	r19
    1096:	27 95       	ror	r18
    1098:	ba 95       	dec	r27
    109a:	c9 f7       	brne	.-14     	; 0x108e <__ultoa_invert+0xa2>
    109c:	62 0f       	add	r22, r18
    109e:	73 1f       	adc	r23, r19
    10a0:	84 1f       	adc	r24, r20
    10a2:	95 1f       	adc	r25, r21
    10a4:	a0 1d       	adc	r26, r0
    10a6:	08 95       	ret

000010a8 <__prologue_saves__>:
    10a8:	2f 92       	push	r2
    10aa:	3f 92       	push	r3
    10ac:	4f 92       	push	r4
    10ae:	5f 92       	push	r5
    10b0:	6f 92       	push	r6
    10b2:	7f 92       	push	r7
    10b4:	8f 92       	push	r8
    10b6:	9f 92       	push	r9
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	ca 1b       	sub	r28, r26
    10d2:	db 0b       	sbc	r29, r27
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	09 94       	ijmp

000010e0 <__epilogue_restores__>:
    10e0:	2a 88       	ldd	r2, Y+18	; 0x12
    10e2:	39 88       	ldd	r3, Y+17	; 0x11
    10e4:	48 88       	ldd	r4, Y+16	; 0x10
    10e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    10e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    10ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    10f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    10f2:	b9 84       	ldd	r11, Y+9	; 0x09
    10f4:	c8 84       	ldd	r12, Y+8	; 0x08
    10f6:	df 80       	ldd	r13, Y+7	; 0x07
    10f8:	ee 80       	ldd	r14, Y+6	; 0x06
    10fa:	fd 80       	ldd	r15, Y+5	; 0x05
    10fc:	0c 81       	ldd	r16, Y+4	; 0x04
    10fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1100:	aa 81       	ldd	r26, Y+2	; 0x02
    1102:	b9 81       	ldd	r27, Y+1	; 0x01
    1104:	ce 0f       	add	r28, r30
    1106:	d1 1d       	adc	r29, r1
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	ed 01       	movw	r28, r26
    1114:	08 95       	ret

00001116 <_exit>:
    1116:	f8 94       	cli

00001118 <__stop_program>:
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__stop_program>
